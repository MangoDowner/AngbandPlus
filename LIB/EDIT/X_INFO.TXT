# File: x_info.txt


# This file is used to initialize the "lib/data/x_info.raw" file, which is
# used to define effects for spells and magic items.

# Do not modify this file unless you know exactly what you are doing,
# unless you wish to risk possible system crashes and broken savefiles.
# After modifying this file, delete the "lib/data/d_info.raw" file.

# XXX XXX XXX This table *must* be correct or drastic errors may occur!

# N: this: next : percentage
# A: name of effect
# B: blow : flavour : dice d sides + bonus
# T: timer dice d sides + bonus
# F: other effects
# D: description

# Note we can have multiple effects for a single spell/item or an effect
# occuring only a percentage of the time.

# Following are defined effects.




# Version stamp (required)

V:2.9.1

N:1:0:100
A:Magic Missile
B:MISSILE:MISSILF:3d4+0

N:2:0:100
A:Detect Monsters
F:DETECT_MONSTER

N:3:0:100
A:Phase Door
B:SELF:TELEPORT:0d0+10

N:4:0:100
A:Light Area
B:AREA:LITE:2d0+1
F:LITE_ROOM

N:5:0:100
A:Treasure Detection
F:DETECT_TREASURE | DETECT_GOLD

N:6:0:100
A:Cure Light Wounds
B:SELF:HEAL:2d8+0

N:7:0:100
A:Object Detection
F:DETECT_OBJECTS

N:8:0:100
A:Find Hidden Traps/Stairs
F:DETECT_DOORS | DETECT_TRAPS | DETECT_STAIRS

N:9:0:100
A:Stinking Cloud
B:CLOUD:POIS:0d0+10

N:10:0:100
A:Confuse Monster
B:AIM:OLD_CONF:1

N:11:0:100
A:Lightening Bolt
B:BOLT_10:ELEC:3d8+0

N:12:0:100
A:Trap/Door Destruction
B:TOUCH:KILL_DOOR

N:13:0:100
A:Sleep I
B:AIM:OLD_SLEEP:1

N:14:0:100
A:Cure Poison
F:CURE_POIS

N:15:0:100
A:Teleport Self
B:SELF:TELEPORT:5d0+0

N:16:0:100
A:Light
B:BEAM:LITE:6d8+0
D:A line of blue shimmering light appears.

N:17:0:100
A:Frost Bolt
B:BOLT_10:COLD:5d8+0

N:18:0:100
A:Turn Rock to Mud
B:AIM:KILL_WALL:6d8+0

N:19:0:100
A:Satisfy Hunger
F:CURE_FOOD

N:20:0:100
A:Recharge I
F:RECHARGE_5

N:21:0:100
A:Sleep II
B:TOUCH:OLD_SLEEP:1d0+0

N:22:0:100
A:Polymorph Other
B:AIM:OLD_POLY:1d0+0

N:23:0:100
A:Identify
F:ID

N:24:0:100
A:Sleep III
F:LOS:OLD_SLEEP:1d0+0

N:25:0:100
A:Fire Bolt
B:BOLT:FIRE:8d8+0

N:26:0:100
A:Slow Monster
B:AIM:OLD_SLOW:1d0+0

N:27:0:100
A:Frost Ball
B:BALL:ELEC:1d0+30

N:28:0:100
A:Recharge II
F:RECHARGE_40

N:29:0:100
A:Teleport Other
B:AIM:TELEPORT:1d0+0

N:30:0:100
A:Haste Self
F:HASTE
T:1d20+20

N:31:0:100
A:Fire Ball
B:BALL:FIRE:1d0+55

N:32:0:100
A:Destruction
F:DESTRUCTION

N:33:0:100
A:Genocide
F:DESTRUCTION

N:34:0:100
A:Door Creation
B:TOUCH:MAKE_DOOR:0d0+0

N:35:0:100
A:Stair Creation
F:CREATE_STAIR

N:36:0:100
A:Teleport Level
B:SELF:TELE_LEVEL:0d0+0

N:37:0:100
A:Earthquake
F:EARTHQUAKE

N:38:0:100
A:Recall
F:RECALL

N:39:0:100
A:Acid Bolt
B:BOLT:ACID:6d8+0

N:40:0:100
A:Cloudkill
B:CLOUD:POIS:0d0+20

N:41:0:100
A:Acid Ball
B:BALL:ACID:1d0+40

N:42:0:100
A:Ice Storm
B:STORM:ICF:2d0+70

N:43:0:100
A:Meteor Storm
B:STORM:METEOR:2d0+65

N:44:0:100
A:Mana Storm
B:STORM:MANA:2d0+65

N:45:0:100
A:Detect Evil
F:DETECT_EVIL

N:46:0:100
A:Detect Magic
F:DETECT_MAGIC

N:47:0:100
A:Recharge III
F:RECHARGE_100

N:48:0:100
A:Genocide
F:GENOCIDE

N:49:0:100
A:Mass Genocide
B:MASS:GENOCIDE:0d0+0

N:50:0:100
A:Resist Fire
F:RES_FIRE
T:1d20+20

N:51:0:100
A:Resist Cold
F:RES_COLD
T:1d20+20

N:52:0:100
A:Resist Acid
F:RES_ACID
T:1d20+20

N:53:0:100
A:Resist Poison
F:RES_POIS
T:1d20+20

N:54:0:100
A:Resistance
F:RES_FIRE | RES_COLD | RES_ACID | RES_ELEC | RES_POIS
T:1d20+20

N:55:0:100
A:Heroism
B:SELF:HEAL:0d0+10
F:CURE_FEAR | HERO
T:1d20+20

N:56:0:100
A:Shield
F:SHIELD
T:1d20+30

N:57:0:100
A:Beserk Strength
B:SELF:HEAL:0d0+30
F:CURE_FEAR | SHERO
T:1d25+25

N:58:0:100
A:Haste Self
F:HASTE
T:1d30+30

N:59:0:100
A:Invulneribility
F:HASTE_2
T:1d8+8

N:60:0:100
A:Detect Evil
F:DETECT_EVIL

N:61:0:100
A:Cure Light Wounds
B:SELF:HEAL:2d10

N:62:0:100
A:Bless
F:BLESS
T:1d12+12

N:63:0:100
A:Cure Fear
F:CURE_FEAR

N:64:0:100
A:Light Area
B:AREA:LITE:2d0+1
F:LITE_ROOM

N:65:0:100
A:Find Traps
F:DETECT_TRAPS

N:66:0:100
A:Detect Doors/Stairs
F:DETECT_DOORS | DETECT_STAIRS

N:67:0:100
A:Cure Poison
F:CURE_POIS

N:68:0:100
A:Scare Monster
B:AIM:OLD_FEAR:1d0+0

N:69:0:100
A:Portal
B:SELF:TELEPORT:3d0+0

N:70:0:100
A:Cure Moderate Wounds
B:SELF:HEAL:4d10
F:SLOW_CUTS

N:71:0:100
A:Holy Chant
F:BLESS
T:1d24+24

N:72:0:100
A:Sanctuary
B:TOUCH:OLD_SLEEP:1d0+0

N:73:0:100
A:Satisfy Hunger
F:CURE_FOOD

N:74:0:100
A:Remove Curse
F:CURE_CURSE

N:75:0:100
A:Endure Heat and Cold
F:RES_FIRE | RES_COLD
T:1d10+10

N:76:0:100
A:Resist Poison
F:RES_POIS
T:1d20+20

N:77:0:100
A:Orb of Draining
B:ORB:HOLY_ORB:3d6+0

N:78:0:100
A:Cure Critical Wounds
B:SELF:HEAL:8d10+0
F:CURE_CUTS

N:79:0:100
A:Sense Invisible
F:SEE_INVIS
T:1d24+24

N:80:0:100
A:Protection from Evil
F:PROT_EVIL
T:1d25

N:81:0:100
A:Earthquake
F:EARTHQUAKE

N:82:0:100
A:Sensing Surroundings
F:MAP_AREA

N:83:0:100
A:Cure Mortal Wounds
B:SELF:HEAL:10d10+0
F:CURE_CUTS | CURE_STUN

N:84:0:100
A:Turn Undead
B:LOS:TURN_UNDEAD:0d0+0

N:85:0:100
A:Prayer
F:BLESS
T:1d48+48

N:86:0:100
A:Dispel Undead
B:LOS:DISP_UNDEAD:0d0+0

N:87:0:100
A:Healing
B:SELF:HEAL:0d0+300
F:CURE_CUTS | CURE_STUN

N:88:0:100
A:Dispel Evil
B:LOS:DISP_EVIL:3d0+0

N:89:0:100
A:Glyph of Warding
B:SELF:GLYPH:0d0+0

N:90:256:100
A:Holy Word
B:LOS:DISP_EVIL:4d0+0
B:CURE_FEAR

N:256:0:100
A:*Healing*
B:SELF:HEAL:0d0+1000
F:CURE_CUTS | CURE_STUN | CURE_POIS

N:91:0:100
A:Detect Monsters
F:DETECT_MONSTER

N:92:0:100
A:Detection
F:DETECT_DOORS | DETECT_TRAPS | DETECT_STAIRS | DETECT_MONSTER | DETECT_EVIL | DETECT_INVIS | DETECT_GOLD |
F:DETECT_TREASURE | DETECT_WATER | DETECT_OBJECT

N:93:0:100
A:Identify
F:ID

N:94:0:100
A:Probing
B:AIM:OLD_PROBE:0d0+0

N:95:0:100
A:Enlightenment
F:WIZ_LITE

N:96:0:100
A:Cure Serious Wounds
B:SELF:HEAL:0d0+0
F:CURE_CUTS

N:97:0:100
A:Cure Mortal Wounds
B:SELF:HEAL:12d0+0
F:CURE_CUTS | CURE_STUN

N:98:0:100
A:*Healing*
B:SELF:HEAL:0d0+2000
F:CURE_CUTS | CURE_STUN

N:99:0:100
A:Restoration
F:CURE_STR | CURE_INT | CURE_WIS | CURE_DEX | CURE_CON | CURE_CHR

N:100:0:100
A:Remembrance
F:CURE_XP

N:101:0:100
A:Dispel Undead
B:LOS:DISP_UNDEAD:4d0+0

N:102:0:100
A:Dispel Evil
B:LOS:DISP_EVIL:4d0+0

N:103:0:100
A:Banish Evil
B:LOS:AWAY_EVIL:0d0+0
D:The power of your god banishes evil.

N:104:0:100
A:Destruction
F:DESTRUCTION


			case 60+45:
			{
				if (!get_aim_dir(&dir)) return;
				drain_life(dir, 200 + 2 * plev);
				break;
			}

			case 60+46:
			{
				(void)destroy_doors_touch();
				break;
			}

			case 60+47:
			{
				(void)recharge(15);
				break;
			}

			case 60+48:
			{
				(void)remove_all_curse();
				break;
			}

			case 60+49:
			{
				(void)enchant_spell(rand_int(4) + 1, rand_int(4) + 1, 0);
				break;
			}

			case 60+50:
			{
				(void)enchant_spell(0, 0, rand_int(3) + 2);
				break;
			}

			case 60+51:
			{
				brand_weapon();
				break;
			}

			case 60+52:
			{
				teleport_player(10);
				break;
			}

			case 60+53:
			{
				teleport_player(plev * 8);
				break;
			}

			case 60+54:
			{
				if (!get_aim_dir(&dir)) return;
				(void)teleport_monster(dir);
				break;
			}

			case 60+55:
			{
				(void)teleport_player_level();
				break;
			}

			case 60+56:
			{
				set_recall();
				break;
			}

			case 60+57:
			{
				msg_print("The world changes!");

				/* Leaving */
				p_ptr->leaving = TRUE;

				break;
			}

		/*** And the new spells ***/
		/*** Of course, they are mostly old spells ***/


			case 118:
			{
				(void)set_shield(p_ptr->shield + randint(30) + 20);
				break;
			}


			case 119:
			{
				int time = randint(48) + 48;
				(void)set_blessed(p_ptr->blessed + time);
				(void)hp_player(10);
				(void)set_hero(p_ptr->hero + time);
				(void)set_afraid(0);
				break;
			}


			case 120:
			{
				int time = randint(48) + 48;

				(void)set_blessed(p_ptr->blessed + time);
				(void)hp_player(30);
				(void)set_shero(p_ptr->shero + time);
				(void)set_afraid(0);
				break;
			}


			case 121:
			{
				(void)set_invuln(p_ptr->invuln + randint(8) + 8);
				break;
			}


			case 122:
			{
				if (!get_aim_dir(&dir)) return;
				msg_print("A line of blue shimmering light appears.");
				lite_line(dir);
				break;
			}

			case 123:
			{

				wield_spell(INVEN_WIELD, SV_HAMMER_UNDEAD, randint(48) + 48);
				break;

			}


			case 124:
			{

				wield_spell(INVEN_WIELD, SV_HAMMER_DEMON, randint(48) + 48);
				break;

			}

			case 125:
			{
				if (!get_aim_dir(&dir)) return;
				fire_ball(GF_FIRE, dir,
				          55 + (plev), 2);
				break;
			}

			case 126:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}



			case 127:
			{

				detect_monsters_undead();
				break;

			}

			case 128:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}

			case 129:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}


			case 130:
			{

                                detect_objects_cursed();
				break;

			}


			case 131:
			{
				enchant_item(TV_FOOD,plev);
				break;
			}

			case 132:
			{

				bless_weapon();
				break;

			}



			case 133:
			{

                                brand_armor();
				break;

			}


			case 134:
			{
				(void)set_poisoned(p_ptr->poisoned/2);
				break;
			}

			case 135:
			{
				if (!get_aim_dir(&dir)) return;
                                water_to_air(dir);
				break;
			}

			case 136:
			{
				int time = randint(20) + 20;
				(void)set_oppose_elec(p_ptr->oppose_elec + time);
				break;
			}

			case 137:
			{
				int time = randint(20) + 20;
				(void)set_oppose_acid(p_ptr->oppose_acid + time);
				(void)set_oppose_elec(p_ptr->oppose_elec + time);
				(void)set_oppose_fire(p_ptr->oppose_fire + time);
				(void)set_oppose_cold(p_ptr->oppose_cold + time);
				(void)set_oppose_pois(p_ptr->oppose_pois + time);
				break;
			}

			case 138:
			{
				if (!get_aim_dir(&dir)) return;
				drain_life(dir, damroll(2, 10+plev/4));
				break;
			}


			case 139:
			{
				if (!get_aim_dir(&dir)) return;
                                (void)blind_monster(dir);
				break;
			}


			case 140:
			{
				if (!get_aim_dir(&dir)) return;
				drain_life(dir, damroll(3, 10+plev/4));
				break;
			}


			case 141:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}
			
			case 142:
			{
				if (!get_aim_dir(&dir)) return;
				drain_life(dir, damroll(4, 10+plev/4));
				break;
			}

			case 143:
			{
				if (!get_aim_dir(&dir)) return;
				drain_life(dir, damroll(5, 10+plev/4));
				break;
			}

			case 144:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}

			case 145:
			{
				if (!get_aim_dir(&dir)) return;
				drain_life(dir, damroll(6, 10+plev/4));
				break;
			}


			case 146:
			{

				if (!get_rep_dir(&dir)) return;
				fire_touch(GF_FIRE, dir,
				                  damroll(3 + ((plev - 1) / 5), 8));
				break;
			}


                        case 147:
			{
				if (!get_rep_dir(&dir)) return;
                                warding_trap(22,dir);
				break;

			}

                        case 148:
			{

				wield_spell(INVEN_WIELD, SV_BLADE_FIRE, randint(48) + 48);
				break;
			}

			case 149:
			{

				/* To do summon friendly monster */
				break;

			}


			case 150:
			{

				if (!get_aim_dir(&dir)) return;
				fire_beam(GF_FIRE, dir,
				                  damroll(8+((plev-5)/4), 8));
				break;

			}

			case 151:
			{
				if (!get_aim_dir(&dir)) return;
				fire_bolt_or_beam(beam, GF_FIRE, dir,
				                  damroll(8+((plev-5)/4), 8));
				if (!get_aim_dir(&dir)) break;
				fire_bolt_or_beam(beam, GF_FIRE, dir,
				                  damroll(8+((plev-5)/4), 8));
				break;
			}

			case 152:
			{
				if (!get_aim_dir(&dir)) return;
				fire_bolt_or_beam(beam, GF_FIRE, dir,
				                  damroll(8+((plev-5)/4), 8));
				if (!get_aim_dir(&dir)) break;
				fire_bolt_or_beam(beam, GF_FIRE, dir,
				                  damroll(8+((plev-5)/4), 8));
				if (!get_aim_dir(&dir)) break;
				fire_bolt_or_beam(beam, GF_FIRE, dir,
				                  damroll(8+((plev-5)/4), 8));
				break;
			}


			case 153:
			{
				if (!get_aim_dir(&dir)) return;
				fire_ball(GF_FIRE, dir,
				          95 + (plev*2), 3);
				break;
			}

			case 154:
			{

				if (!get_rep_dir(&dir)) return;
				fire_touch(GF_ACID, dir,
				                  damroll(3 + ((plev - 1) / 5), 8));
				break;

			}

			case 155:
			{
				if (!get_rep_dir(&dir)) return;
                                warding_trap(23,dir);
				break;


			}

                        case 156:
			{

				wield_spell(INVEN_WIELD, SV_BLADE_ACID, randint(48) + 48);
				break;

			}

			case 157:
			{
				if (!get_aim_dir(&dir)) return;
				fire_bolt_or_beam(beam, GF_ACID, dir,
				                  damroll(6+((plev-5)/4), 8));
				if (!get_aim_dir(&dir)) break;
				fire_bolt_or_beam(beam, GF_ACID, dir,
				                  damroll(6+((plev-5)/4), 8));
				break;
			}



			case 158:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}


			case 159:
			{

				if (!get_aim_dir(&dir)) return;
				fire_beam(GF_ACID, dir,
				                  damroll(6+((plev-5)/4), 8));
				break;
			}

			case 160:
			{
				if (!get_aim_dir(&dir)) return;
				fire_ball(GF_ACID, dir,
				          65 + (plev*2), 3);
				break;
			}

			case 161:
			{
				if (!get_aim_dir(&dir)) return;
				fire_bolt_or_beam(beam, GF_ACID, dir,
				                  damroll(6+((plev-5)/4), 8));
				if (!get_aim_dir(&dir)) break;
				fire_bolt_or_beam(beam, GF_ACID, dir,
				                  damroll(6+((plev-5)/4), 8));
				if (!get_aim_dir(&dir)) break;
				fire_bolt_or_beam(beam, GF_ACID, dir,
				                  damroll(6+((plev-5)/4), 8));
				break;
			}



			case 162:
			{

				if (!get_rep_dir(&dir)) return;
				fire_touch(GF_ELEC, dir,
				                  damroll(3 + ((plev - 1) / 5), 8));
				break;
			}


			case 163:
			{

				int time = randint(20) + 20;
				(void)set_oppose_elec(p_ptr->oppose_elec + time);
				break;

			}

			case 164:
			{
				if (!get_rep_dir(&dir)) return;
                                warding_trap(78,dir);
				break;

			}

			case 165:
			{

				wield_spell(INVEN_WIELD, SV_BLADE_ELEC, randint(48) + 48);
				break;

			}


			case 166:
			{
				if (!get_aim_dir(&dir)) return;
				fire_bolt_or_beam(beam-10, GF_ELEC, dir,
				                  damroll(3+((plev-5)/4), 8));
				if (!get_aim_dir(&dir)) break;
				fire_bolt_or_beam(beam-10, GF_ELEC, dir,
				                  damroll(3+((plev-5)/4), 8));
				break;
			}


			case 167:
			{

				if (!get_aim_dir(&dir)) return;
                                fire_beam(GF_ELEC, dir,
				                  damroll(3+((plev-5)/4), 8));
				break;

			}

			case 168:
			{
				if (!get_aim_dir(&dir)) return;
				fire_ball(GF_ELEC, dir,
				          90 + (plev), 2);
				break;
			}

			case 169:
			{
				if (!get_aim_dir(&dir)) return;
				fire_bolt_or_beam(beam-10, GF_ELEC, dir,
				                  damroll(3+((plev-5)/4), 8));
				if (!get_aim_dir(&dir)) break;
				fire_bolt_or_beam(beam-10, GF_ELEC, dir,
				                  damroll(3+((plev-5)/4), 8));
				if (!get_aim_dir(&dir)) break;
				fire_bolt_or_beam(beam-10, GF_ELEC, dir,
				                  damroll(3+((plev-5)/4), 8));
				break;
			}

			case 170:
			{
				if (!get_aim_dir(&dir)) return;
				fire_ball(GF_ELEC, dir,
				          115 + (plev*2), 2);
				break;
			}


			case 171:
			{

				if (!get_rep_dir(&dir)) return;
				fire_touch(GF_COLD, dir,
				                  damroll(3 + ((plev - 1) / 5), 8));
                                break;

			}

			case 172:
			{
				if (!get_rep_dir(&dir)) return;
                                warding_trap(132,dir);
				break;

			}

			case 173:
			{

				wield_spell(INVEN_WIELD, SV_BLADE_COLD, randint(48) + 48);
				break;
			}

			case 174:
			{
				if (!get_aim_dir(&dir)) return;
				fire_bolt_or_beam(beam-10, GF_COLD, dir,
				                  damroll(5+((plev-5)/4), 8));
				if (!get_aim_dir(&dir)) break;
				fire_bolt_or_beam(beam-10, GF_COLD, dir,
				                  damroll(5+((plev-5)/4), 8));

				break;
			}



			case 175:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}



			case 176:
			{
				if (!get_aim_dir(&dir)) return;
				fire_bolt_or_beam(beam-10, GF_COLD, dir,
				                  damroll(5+((plev-5)/4), 8));

				if (!get_aim_dir(&dir)) break;
				fire_bolt_or_beam(beam-10, GF_COLD, dir,
				                  damroll(5+((plev-5)/4), 8));

				if (!get_aim_dir(&dir)) break;
				fire_bolt_or_beam(beam-10, GF_COLD, dir,
				                  damroll(5+((plev-5)/4), 8));

				break;
			}

			case 177:
			{

				if (!get_aim_dir(&dir)) break;
                                fire_beam(GF_ICE, dir,
				                  damroll(5+((plev-5)/4), 8));

				break;
			}

                        case 178:
			{

				map_area();
				break;

			}



			case 179:
			{
				if (!get_rep_dir(&dir)) return;
				fire_blast(GF_OLD_CONF,dir,10+plev/2);
				break;
			}


			case 180:
			{
				(void)hp_player(10);
				(void)set_hero(p_ptr->hero + randint(25) + 25);
				(void)set_afraid(0);
				break;
			}

			case 181:
			{
				(void)ident_spell_tval(TV_POTION);
				break;
			}


			case 182:
			{
				int time = randint(20) + 20;
				(void)set_oppose_fire(p_ptr->oppose_fire + time);
				(void)set_oppose_cold(p_ptr->oppose_cold + time);
				break;
			}

			case 183:
			{
				(void)set_poisoned(0);
				(void)hp_player(damroll(4, 10+plev/4));
				(void)set_cut(0);
				break;
			}

			case 184:
			{

				if (!get_rep_dir(&dir)) return;
				fire_blast(GF_FIRE,dir,damroll(2, 10)+plev/2);
				fire_blast(GF_SOUND,dir,damroll(2, 10)+plev/2);
				break;

			}

			case 185:
			{

				(void)hp_player(30);
				(void)set_shero(p_ptr->shero + randint(25) + 25);
				(void)set_afraid(0);
				break;
			}

			case 186:
			{
				wiz_lite();
				break;
			}

			case 187:
			{
				enchant_item(TV_POTION,plev);
				break;
			}

			case 188:
			{
                                create_gold();
                                break;
			}


			case 189:
			{

                                detect_monsters_undead();
				break;

			}

			case 190:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}


			case 191:
			{
				(void)turn_undead();
				break;
			}


			case 192:
			{

				(void)dispel_undead(randint(plev * 4));
				break;
			}


			case 193:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}


			case 194:
			{
				if (banish_evil(100))
				{
					msg_print("The power of your magic banishes evil!");
				}
				break;
			}

			case 195:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}

			case 196:
			{

				(void)detect_monsters_animal;
				break;

			}

			case 197:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}

			case 198:
			{

				/* XXX To do: Make monsters friendly */ break;

			}

			case 199:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}

			case 200:
			{
				wield_spell(INVEN_BODY, SV_DRAGONSCALES, randint(100) + 100);
				break;
			}

			case 201:
			{
				int choice = rand_int(100);

				if (!get_aim_dir(&dir)) return;
				if (choice < 20)
				{
					fire_ball(GF_FIRE, dir,
					          55 + (plev*2), 2);
				}
				else if (choice < 40)
				{
					fire_ball(GF_COLD, dir,
					          30 + (plev*2), 2);
				}
				else if (choice < 60)
				{
					fire_ball(GF_ELEC, dir,
					          45 + (plev*2), 2);
				}
				else if (choice < 80)
				{
					fire_ball(GF_ACID, dir,
					          40 + (plev*2), 2);

				}
				else
				{
					fire_ball(GF_POIS, dir,
					          35 + (plev*2), 2);

				}
				break;
			}

			case 202:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}

			case 203:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}

			case 204:
			{

				fear_monsters();
				break;

			}

			case 205:
			{

				confuse_monsters();
				break;

			}

			case 206:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}

			case 207:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}

			case 208:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}

			case 209:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}

			case 210:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}

			case 211:
			{
				msg_print("The world changes!");

				/* Leaving */
				p_ptr->leaving = TRUE;

				break;
			}

			case 212:
			{

				wield_spell(INVEN_LITE, SV_LITE_WIZARD, randint(200) + 200);
				break;

			}

			case 213:
			{
				int k;

				for (k = 0; k < 8; k++) lite_line(ddd[k]);

				break;
			}

			case 214:
			{
				(void)lite_area(damroll(4, (plev / 2)), (plev / 5) + 1);
				break;
			}

			case 215:
			{
				if (!get_aim_dir(&dir)) return;
				fire_bolt_or_beam(beam-10, GF_METEOR, dir,
				                  damroll(10+((plev-5)/4), 8));
				break;
				
			}

			case 216:
			{

				wield_spell(INVEN_BODY, SV_STONESKIN, randint(100) + 100);
				break;

			}

			case 217:
			{

				if (!get_aim_dir(&dir)) return;
                                raise_bridge(dir);

				break;
			}

			case 218:
			{

				/* XXX To do: Summon friendly monsters */ break;

			}

			case 219:
			{
				if (!get_aim_dir(&dir)) return;
                                fire_beam(GF_SHARD, dir,
				                  damroll(5+((plev-5)/4), 8));

				break;
			}

			case 220:
			{
				if (!get_aim_dir(&dir)) return;
                                water_to_air(dir);
				break;
			}


			case 221:
			{
				if (!get_aim_dir(&dir)) return;
				fire_ball(GF_COLD, dir,
				          20 + (plev / 2), (plev/10) + 2);
				break;

			}
			case 222:
			{
				if (!get_aim_dir(&dir)) return;
				fire_ball(GF_ACID, dir,
				          30 + (plev / 2), (plev/10) + 2);
				break;

			}

			case 223:
			{
				if (!get_aim_dir(&dir)) return;
				fire_ball(GF_ELEC, dir,
				          40 + (plev / 2), (plev/10) + 2);
				break;

			}

			case 224:
			{
				/* XXX To do: Summon friendly monsters */ break;
				
			}

			case 225:
			{
				if (!get_aim_dir(&dir)) return;
				fire_ball(GF_FIRE, dir,
				          50 + (plev / 2), (plev/10) + 2);
				break;
			}


			case 226:
			{
				if (!get_aim_dir(&dir)) return;
				fire_ball(GF_POIS, dir,
				          80+plev, (plev/10) + 2);
				break;
			}

			case 227:
			{
				detect_water();
				break;

			}

			case 228:
			{
				(void)lower_water(damroll(2, (plev / 2)), (plev / 10) + 1);
				break;
			}

			case 229:
			{
				(void)raise_water(damroll(2, (plev / 2)), (plev / 10) + 1);
				break;
			}

			case 230:
			{
				if (!get_aim_dir(&dir)) return;
				fire_bolt_or_beam(beam-10, GF_WATER, dir,
				                  damroll(5+((plev-5)/4), 8));
				break;
			
			}

			case 231:
			{
				/* XXX To do: Summon friendly monsters */ break;
				
			}



			case 232:
			{

				if (!get_aim_dir(&dir)) return;
				fire_beam(GF_WATER, dir,
				                  damroll(6+((plev-5)/4), 8));
				break;

			}

			case 233:
			{
				if (!get_aim_dir(&dir)) return;
				fire_ball(GF_WATER, dir,
				          60+(plev*2), 3);
				break;
			}

			case 234:
			{
				(void)destroy_doors_touch();
				break;
			}

			case 235:
			{
				sleep_monsters();
				break;
			}

			case 236:
			{
				dispel_monsters(10+plev);
				break;
			}

			case 237:
			{
                                wield_spell(INVEN_WIELD, SV_QUARTERSTAFF_RUNE, randint(200) + 200);
				break;
			}
			case 238:
			{
				dispel_monsters(20+2*plev);
				break;
			}

			case 239:
			{
				if (!get_aim_dir(&dir)) return;
				(void)fear_monster(dir, plev);
				break;
			}


			case 240:
			{

				/* XXX To do: Make monsters friendly */ break;

			}

			case 241:
			{

				(void)do_inc_stat(A_CHR);
				break;

			}

			case 242:
			{

				/* XXX To do: Make monsters friendly */ break;

			}

			case 243:
			{
				(void)ident_spell_tval(TV_SCROLL);
				break;
			}

			case 244:
			{
				if (!identify_fully()) return;
				break;
			}

			case 245:
			{
				(void)hp_player(damroll(6, 10+plev/4) + plev);
				(void)set_cut(0);
				break;
			}

			case 246:
			{
				(void)hp_player(damroll(10, 10+plev/4));
				(void)set_stun(0);
				(void)set_cut(0);
				break;
			}


			case 247:
			{
				/* To do: Summon friendly monster */
				break;
			}
			case 248:
			{
				enchant_item(TV_WAND,plev);
				break;
			}

			case 249:
			{
				enchant_item(TV_STAFF,plev);
				break;
			}


			case 250:
			{
				enchant_item(TV_ROD,plev);
				break;
			}

			case 251:
			{
				if (!get_rep_dir(&dir)) return;
				warding_trap(21,dir);
				break;
			}

			case 252:
			{
				warding_glyph();
				break;
			}

			case 253:
			{
                                wield_spell(INVEN_HEAD, SV_PSYCHIC_CROWN, randint(48) + 48);
				break;
			}

			case 254:
			{

				if (!get_rep_dir(&dir)) return;
				fire_blast(GF_SOUND,dir,damroll(4, 10)+plev);
				break;

			}

			case 255:
			{

				if (!get_aim_dir(&dir)) return;
				fire_bolt_or_beam(beam+10, GF_SOUND, dir,
				                  damroll(8+((plev-5)/4), 8));
				break;
			}
		}

