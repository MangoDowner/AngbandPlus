2002-01-05  Stig E Sandø <stig@users.sourceforge.net>
	* Renamed slots in the game-values object to be more precise and
	then updated all places these are used.
	* Made all creation of game-values go via an error-checking
	function.
	* Added message when you stand atop items in dungeons after a
	move.
	* Altered player stat-system to be slightly simpler and more
	logical
	* Tweaked more effect and element-code and fixed bugs that were
	found for elements.  Made game-values use bit-fields for elements.
	* Renamed high-score file
	* Added copy-function for active-object
	* Added code to display to-hit vs armour in the game
	* Simplified update of player slightly.. does not cons anymore
	* Altered some stat-keywords
	* Fixed some bugs in the store
	* Made a new splash-screen
	* Tried to update compat-code slightly.. it is fairly broken
	* Other minor tweaks
	
	
2001-12-16  Stig E Sandø <stig@users.sourceforge.net>
	* Started to add code for effects and elements (core.lisp)
	* Updated more of the tests to work with current source-base
	* Minor tweaks
	
2001-12-15  Stig E Sandø <stig@users.sourceforge.net>
	* Removed parts of the C-code and moved simpler C-functions to
	lisp-side.
	* Added search-code, hackish but it works
	* Added improved activation info for dungeon/level
	* Several minor tweaks
	
2001-12-09  Stig E Sandø <stig@users.sourceforge.net>
	* Added verify-id to base.lisp
	* Made monster.lisp verify ids during define-*, also made it more
	picky and added a few keywords.
	* Better combat-message for misses
	* Quitters do not enter the high-score
	* Started on the help-code (core.lisp,print.lisp)
	* Minor tweaks

2001-12-08  Stig E Sandø <stig@users.sourceforge.net>
	* Enforced id-policy, ie all savable objects should have a
	lowercase string as id, not a symbol.  
	* Made sex a struct and a sexes-entry in the variant object for
	the variant to tailour the alternatives. Removed old +sexes+
	constant.  Edited all code that depended on this.
	* Updated id/symbol policy for class and race and altered the
	classes and helper-functions slightly to do things gracefully.
	The classes and races tables in variants are indexed both by
	symbol and string, so any attempts to get all entries should
	remove-duplicates.
	* Fixed several save/load issues that has been problematic and
	hidden, and now the saved code should not differ between
	lowercase/upcase and lisp-system.  Also needed to tune some parts
	to factories.
	* Updated id/symbol policy wrt levels
	* Updated some docs about id/policy
	* Fixed crash which prevented people from selling to shops.
	* Several small fixes
	
2001-12-07  Stig E Sandø <stig@users.sourceforge.net>
	* Improved repainting-code through active flag-use, borrowed
	heavily from angband.  Should give speedup. (may still have bugs)
	* Optimised dungeon-accesses and internal code in update-view
	through macros and inlining.  Seems to help a lot on ACL.
	* Updated several paint/update flags in constants.lisp
	* Fixed save/load of variant, and redid save/load of player-object
	to use factory on load and giving up binary-types.
	* Made variant-registration use strings for ids
	* Changed object.level to object.depth and monster.level to
	monster.depth, also affected vanilla-variant.
	* Added more deps to .system
	* Split update-player! into more separate functions.  The split is
	only half-done and there might be bugs
	* Fixed missile-selection repaint-bug
	* Other minor fixes.

2001-12-05  Stig E Sandø <stig@users.sourceforge.net>
	* Added to-hit, damage and killing to missile-combat. (project.lisp)
	* Added message on item-pickup (action.lisp)
	* Minor fixes
		
2001-12-04  Stig E Sandø <stig@users.sourceforge.net>
	* Updated debian/rules file to reflect changes in vanilla-variant
	file-organisation.
	* Split ChangeLog in two.. this one now reflects changes in engine
	and how things are organised.  The one in variants/vanilla/
	reflects changes to the vanilla variant.
	* Improved store-code with selling-list/restocking list and
	mass-production code.
	* Moved player struct/class to core.lisp to ease compilation in
	other files.
	* Added deduction of torch-charges if the object is not an
	artifact.
	* Can now display multihued monsters correctly, as well as not
	displaying see-htrough monsters.
	* Removed sorting-values from variant-code and variant-object,
	belonged in compatibility-code and is now in
	lib/compat/object.lisp
	* Added summon-monster hack to key-set for maintainer-use.
	* Improved safety in production of active-monsters (monsters.lisp)
	* Reinstated code to generate gold in dungeon (only copper with
	the hack now used though).
	* Several minor fixes and tweaks
		
2001-12-01  Stig E Sandø <stig@users.sourceforge.net>
	* Updated signatures to CREATE-AOBJ-* in object.lisp
	* Added simplifying PARSE-AND-ROLL-DICE in base.lisp
	* Extended syntax to specify starting equipment and improved
	birth.lisp to reflect this.  starting-equipment for vanilla also
	affected.
	* Added generics for arrow-shooting and missile-shooting.  Also
	added preliminary/non-functional code for shooting arrows in
	project.lisp
	* Updated GET-ITEM-TABLE method to take coordinates for :floor
	* Extended DEF-OBJ-TYPE macro with possibility to add slots
	* Added multipliers to bows
	* Added and improved some code for selecting items
	* Added key to fire arrows ('f')
	* Added some ids to the objects in var/van/config/objects.lisp
	* Fixed minor bugs 
	
2001-11-26  Stig E Sandø <stig@users.sourceforge.net>
	* Updated TODO-list and some web-docs
	* More reorganisation of code and changing of arguments.  More
	stable now I hope.
	* Moved all generics into generic.lisp
	* Simplified light-spot! and added print-relative!
	* Started to add dependencies to the .system file
	* Cleaned up death a bit and moved some of it from loop.lisp to
	death.lisp
	* Updated many objects in vanilla-variant to use proper
	identification call.
	* Added project.lisp for projection code and sys.lisp for
	system-dependent code.
	* Now saves highscores to ~/.langband/ when possible
	* Split up monster-file for variants into monsters, uniques and
	town-monsters.
	* Other minor fixes
		
2001-11-24  Stig E Sandø <stig@users.sourceforge.net>
	* Major reorganisation of function-names and generics.  Much more
	dependent and overridable by a variant.
	* Added birth re-roll and name-entering
	* Minor fixes
	
2001-11-22  Stig E Sandø <stig@users.sourceforge.net>
	* Added random name-generator (variants/vanilla/*lisp)
	* Added possibility to enter a player-name (or any string),
	currently in birth.lisp
	* Made birth-process use random name generator as default.
	* Improved death and high-score handling (death.lisp)
	* Various small fixes, added assertions and some bug-fixing
		
2001-10-29  Stig E Sandø <stig@users.sourceforge.net>
	* Improved 'use'-code in actions.lisp
	* Fixed repaint when wielding objects
	* Added queue-code to base.lisp (used by room-lightning code)
	* Added symbol-handling used by object-macros
	* Added inheritance of object-types and active-objects, works via
	an object-macro.  See object.lisp
	* Added dmg-bonus from weapon in combat
	* Added beginning of high-score code in death.lisp
	* Started to add magicification of objects
	* Improved object-identify/try/aware code greatly, uses generics
	* Lets active-objects use game-values as they should, removed old
	hack
	* Improved object-description-code in object.lisp but it is hardly
	finished.
	* Moved creation of object-kinds and active-objects into produce-*
	factories.
	* Revamped much of the code for object-effects
	* Added several scroll-effects
	* Start to add enchant, light and teleport spells
	* Added types to the objects in the vanilla-variant
	* Many many bug-fixes
		
2001-08-06  Stig E Sandø <stig@users.sourceforge.net>
	* Fixed a bug reported by Tijs about 'Q'uit behaviour.  Quit will
	now return to the Lisp-image for X11 and GCU.
	* Minor bug-fixing.
		
2001-08-05  Stig E Sandø <stig@users.sourceforge.net>
	* Ported to LispWorks on Linux and on Win32.  Both are fairly
	fragile ports.   They also made me uncover bugs in the source.
	* Cleaned up much in zterm/ and made main-win.c work as a
	shared-library too.  Removed unused files, and added some
	declarations for Win32 DLL-export
	* Provided a simple non-defsystem loading of the system for corman
	lisp and LWW
	* Added Lispworks support to the FFI-generator
	* Improved verification of some objects, and improved testing
	* Added win-keys and fonts for windows in config/
	* Improved the FAQ slightly
	
2001-07-31  Stig E Sandø <stig@users.sourceforge.net>
	* Improved testing-code and equality-checking considerably.
	* Added generic CONVERT-OBJ where new methods replace a few of the
	foo-to-bar methods that converted objects and structures.
	* Added dumping and reading of object-kinds and monsters.  Vanilla
	does not rely on any *_info.txt anymore, just lisp-definitions.
	* Updated binary-types from upstream, fixes binary-struct at
	toplevel bug
	* Other minor changes.
	
2001-07-23  Stig E Sandø <stig@users.sourceforge.net>
	* Upgraded the feature-class and made a convertor from f_info.txt
	to floors.lisp and installed new floors.lisp in vanilla
	* Moved key-defs to vanilla from lib/common
	* Minor bug-fixing
	
2001-07-22  Stig E Sandø <stig@users.sourceforge.net>
	* Improved shops, basic trading is now possible (everything
	functions as black-markets though, apart from prices where only
	black-market is of class black-market and have steep prices)
	* Added colours to equipment, shop-listings
	* Added a few helper-functions like GET-PRICE, GET-ATTRIBUTE, etc.
	* Added overlapping room, removed dummy shop-room
	* Minor changes elsewhere
	
2001-07-18  Stig E Sandø <stig@users.sourceforge.net>
	* Improved UI-handling considerably for zterm, including
	now-usable curses-support
	* Added better stack-handling
	* Added nutritious effect of food
	* Improved 'u'se code
	* Improved birth UI
	* Fixed a lot of minor technical issues
	* Improved object descriptions
	* Updated the included binary-types
	* Improved debian-packaging
	* Added quaff, eat and read-commands
	* Other minor issues
	
2001-05-24  Stig E Sandø <stig@users.sourceforge.net>
	* added some code to 'u'se objects, and started with potions.  
	
2001-05-22  Stig E Sandø <stig@users.sourceforge.net>
	* lots of changes, some of them summarised here, others are
	forgotten
	* reorganised directory-structure and depend more on
	logical-pathnames than earlier.
	* Rewrote part of the C-side code to not depend on DEFINEs for
	lisp-system.  To avoid linking-errors a dummycall shared-object is
	also linked for ACL and CLISP.
	* Tuned much of the FFI-code for ACL and slightly for CMUCL.  With
	an intricate system of WITH-FOREIGN-STR and string-conversions and
	even a non-consing LB-FORMAT (FORMAT-replacement) consing is down
	and strings are basically passed as addresses in ACL and most of
	CMUCL FFI.  I don't know for CLISP.
	* added tests for ffi and format
	* updated the clisp build to work with newer file-structure and
	ffi-system.
	* added Debian-packaging in three separate packages: the
	c-library, the engine and currently the vanilla variant.  The
	langband-engine depends on binary-types debian package.
	* updated README and some docs.
	* renamed packages to org.langband.engine, org.langband.ffi,
	org.langband.testing
	* fixed bug in xp-awarding/gain-level
	* moved around code in general..
	* added type-declarations in some places to please CMUCL, but
	there's still plenty to do.
	* ensured that build-system works when "developing", ie (load
	"game") and when loading it on a debian-system.
	* probably other minor things, but most importantly: reduced
	consing and new improved build-system with debian-package support
	directly. 
	
2001-04-25  Stig E Sandø <stig@users.sourceforge.net>
	* added preliminary tombstone
	* fixed bug which disallowed wearing of gloves
	
2001-04-21  Stig E Sandø <stig@users.sourceforge.net>
	* improving gradually save/load, now introducing the level-object
	* made level-constructions use a factory in the variant object,
	this is still ugly however
	* added more to verify.lisp
	* moved some equipment-implementation to util.lisp
	* ...
	
2001-04-21  Stig E Sandø <stig@users.sourceforge.net>
	* improving gradually the save/load process, which now mostly
	includes the player-object.
	* also refactored other parts of the code, though mostly related
	to the player-object.
	* improved test-set somewhat
	* minor bug-fixing
	* ...
	
2001-04-20  Stig E Sandø <stig@users.sourceforge.net>	
	* started to add save/load of both a source-based save/load and a
	binary version.  For the binary version I use binary-types made by
	Frode Vatvedt Fjeld which seems to work.
	* added a LANG-EQUAL function to be able to check that save/load
	is consistent and to allow XP-testing of the system.
	* Added in-game XP-testing of save/load of both binary and source.
	* added illegal x/y values to coordinates to ensure that
	safe-values are always put there.
	* added x/y coordinates to items-on-floor and a dungeon-pointer
	* tries to ensure that all id's of monsters/objects are strings,
	help in save/load process
	
	
	
2001-04-15  Stig E Sandø <stig@users.sourceforge.net>
	* added more or less the same speed-system as in Angband, which
	means that speed matters now.  Some actions have different
	energy-use though
	* added more generic functions to ensure that code for
	monsters/player is more or less shared.
	* ensured that the combat-system uses skill more or less
	* added a WITH-DUNGEON-MONSTERS macro to simplify code
	* improved WITH-NEW-SCREEN and use it in more places
	* added support for monsters that never move and random movers.
	* added primitive hp-regeneration
	* tried optimising project-path slightly
	* 
	
2001-04-14  Stig E Sandø <stig@users.sourceforge.net>
	* added PROJECT-PATH and made all monsters move towards the player
	to kill him off, which they can.. the town is tough right now.
	* added a few generic functions to ensure somewhat general ways to
	do combat between player and monsters, see combat.lisp
	* fixed bug of monsters walking through walls and a shift-mistake
	in view.lisp.  Added a fuzzy thing to make monsters move the right
	way even if something blocks their view.
	* added more lenient treatment of data when reading old-fashioned
	monster-file, and also ensured that dice for objects and monsters
	are parsed as such.
	* fixed monster creation, now gets correct number of hit-points
	* made attack-system use weapons and attacks from monster-file.
	Normal weapon-damage used as well.  50% chance to hit for everyone
	still.
	* added dice-rolling function.. really really complex thing :-)
	* started to add skills to the system.. a long trek with lots of
	mistakes
	* improved key-handling to not do anything stupid when a wrong key
	is entered
	* added skills to most races and classes
	* minor edits..
	
2001-04-13  Stig E Sandø <stig@users.sourceforge.net>
	* made generic functions LOCATION-X and LOCATION-Y to abstract
	away details of various things location
	* rewrote MAP-INFO to return two values instead of a cons
	* added LANG-WARN
	* rewrote much of the LOS-code.  it doesn't cons much anymore and
	it now uses 16-bit ints instead of 32-bit ints.  it has a bug
	though.
	* rewrote much of the print.lisp code to just pass numbers to C to
	avoid string-allocation.  added a couple of new C-functions for
	this, and their FFI-declarations. 
	* started to abstract somewhat on combat and started the long
	trek of monster-processing
	* Fixed buggy LOS from 16-bit change which also fixed an old bug
	in my old code.. whaddayaknow.
	* minor edits..
		
2001-03-15  Stig E Sandø <stig@users.sourceforge.net>
	* updated a lot of code to make things work with CLISP.  No actual
	changes to the game, but mostly system issues.
	
2001-02-19  Stig E Sandø <stig@users.sourceforge.net>
	* simplified lib/zterm/Makefile slightly
	* improved the activation protocol for objects, uses :around and
	checks for appropriate activation and returns appropriate value.
	Updated a few objects to ensure they're activated properly.
	* improved shop-code slightly, shops and houses now includes item
	containers and should specialise the appropriate functions
	* made cmucl use a callback, just like ACL.  this will hopefully
	make it easier later with the gtk-support which seems to work now.
	* added a small function to print out key-mappings
	* a few minor bugs fixed
		
2001-02-18  Stig E Sandø <stig@users.sourceforge.net>
	* Added Aerton's preliminary sound-support (a daemon) for Angband
	and Linux. The small sound-daemon is released in public domain.
	* Updated main-x11.c, Makefile and lisp-code to reflect this.  The
	sound-support seems to work.
	* added a FAQ-entry to explain how to use the sound-support
	
2001-02-12  Stig E Sandø <stig@users.sourceforge.net>
	* added activable mixin-class for being consistent with
	acticate-object state and later deactivation
	* activable objects: house, variant, active-object, level and
	active-monster 
	* removed reuse of dungeon arrays to allow easier saving of levels
	later.
	* added a hack to allow easy restart after a crash by saving state
	now and then.  the game-loop can be restarted with GAME-LOOP&.
	* added 'z' key to get a LISP-prompt, the restart function over
	can be used afterwards.
	* removed warnings from C-code
	* did some optimisations on UPDATE-VIEW!, need a real rewrite
	later to stop using bignums.
	* regenerated web/file-list.html
	* updated README and added COPYING to the fray
	
2001-02-10  Stig E Sandø <stig@users.sourceforge.net>
	* reduced cons'ing slightly and optimised UPDATE-VIEW! slightly.
	* added memoize.lisp and memoised a few string allocation
	functions in print.lisp (moved to base.lisp)
	* macrofied a few bit-twiddlers for allegro only
	* small adjustments elsewhere

2001-02-08  Stig E Sandø <stig@users.sourceforge.net>
	* made an improvement to the shuffle-array function and added a
	handy array-with-num thing to base.lisp
	* started placing stores/houses stuff in the variant object, not
	quite there yet
	* added a trigger-mechanism that can be set to a special
	coordinate in the dungeon and which will be triggered when the
	player moves atop the location  GET-COORD-TRIGGER and it's SETF
	* added XP testing framework, source gotten from onShore Inc.  See
	tools/xptest-COPYING for copying details.  Only simple tests added
	to code.  This testing imposes some overhead on the current
	cvs-tree code
	* Moved minor stuff around in the vanilla variant code
		
2001-02-02  Stig E Sandø <stig@users.sourceforge.net>
	* added support for numpad and arrowkeys and diagonal movement.
	* added code to allow key-macros to be set and loaded from lisp.
	Angband-pref-files are now plain LOADed lisp.
	* started writing a technical overview of Langband
	* Added lazy flavouring to Langband.  an object is flavoured the
	first time an object of a certain kind is created. 

		
2001-01-21  Stig E Sandø <stig@users.sourceforge.net>
	* Pretty drastic upgrade of a lot of the code, wrt to levels and
	possibly theming.  the town-level in vanilla is now a themed level
	with it's own set of monsters.  This change has updated functions
	to find monster- and object-types from accessing a variant table
	to depend on level.
	* Grouped obj-table, alloc-table and obj-table-by-level into one
	struct and should be used by all appropriate "types" in the game.
	* Added filters when reading monsters and objects to allow levels
	to pick out what they want.
	* disabled stores and flavouring, will enable flavours shortly,
	but stores should be done on a level-by-level basis.
	* disabled placement of gold, no (gold) rush to fix it
	* minor adjustments
	
2001-01-21  Stig E Sandø <stig@users.sourceforge.net>
	* moved *turn* into variant as variant.turn and added a
	turn-events (non-functional yet)
	* moved sort-values (equipment) into variant object and updated
	all corresponding functions
	* added some time-variables to variant object and vanilla-variant,
	and fixed time-of-day for town.. 

2001-01-20  Stig E Sandø <stig@users.sourceforge.net>
	* added a fun room, the shop-room :-)
	* moved monster-tables into the variant object
	* moved object-tables into the variant object
	* added generics for lazy init of objects, monsters and features.
	these are specialised on the variant object.  added corresponding
	methods for vanilla.  The ACTIVATE-OBJECT is important here
	* renamed a few compat-functions to have COMPAT- prefix
	* also separated the vanilla variant mostly from the rest of the
	code, very few dependencies left, and loading is simpler.
		
	

2001-01-19  Stig E Sandø <stig@users.sourceforge.net>
	* renamed dungeon.level to dungeon.depth
	* moved the constant +xp-table+ to be a property of the variant
	object and is now variant.xp-table
	* moved the constant +max-level+ to be a property of the variant
	object and is now variant.max-charlevel
	* moved +dungeon-rooms+ constant to be part of dungeon-settings as
	the slot room-number
	* tried to ensure the same random state when generating the town
	in vanilla
	* added low-level c-term-save and c-term-load which are used by
	screen-save and screen-load.  screen-save and screen-load are
	neatly hidden beneath WITH-NEW-SCREEN though.  This new macro is
	used for show-inventory and show-equipment.
	* Fixed bug with RNG to allow the town to remain constant.
	Hackish solution is limited to one function in the variant-code.
	* Fixed bug in map-info which displayed things in corridors it
	shouldn't display.  Also fixed bug in map-info which showed
	monsters on map even if they were out of torch-scope
	* fixed stair back to level where you came from, through a
	POST-INITIALISATION of a level, which allows customisation for
	individual levels.
	* added hack to OPEN-DOOR! to ensure that an opened door is
	relighted right away.
	* removed some more details, warnings and made the lisp
	environment more quiet.
	

2001-01-18  Stig E Sandø <stig@users.sourceforge.net>
	* revamped room-code to be CLOS and the actual control is put in
	the variant and the engine is simplified.
	* prettified code, removed warnings and ensured that things look
	kind of nice.  time to write real code again soon. 
		
2001-01-18  Stig E Sandø <stig@users.sourceforge.net>
	* removed vanilla/[races|classes] from system file and let them be
	loaded by variant init
	* made a variant class, and made a subclass for the vanilla
	variant.  this variant class contains more of the information
	which was kept globally earlier.  an active variant-object will be
	kept in *variant*.  the file for this is core.lisp
	* added a level class which is the start of theming of levels.
	the file for this is level.lisp and lib/vanilla/levels.lisp update
	this with variant-specifics (ie town).  town-code largely moved
	here. 
	* removed global *level-rating* variable
	* ensured that races and classes now access the variant-object
	* separated vanilla and compat-code from the core engine
	system-file.  The new vanilla system file is
	lib/var-vanilla.system.  game.lisp has been changed to reflect
	that.
	* common files now use the COMMON prefix
	* distributed room-code into lib/common and to variants, also
	removed global table and moved it into the variant
	* moved global floor-table into variant object and updated
	floor-code
	* made a common module in langband.system to pretty things up
	* moved max-sizes of dungeons into variant object and removed
	global variables.
	* Slight change on PRINT-DEPTH
	


2001-01-17  Stig E Sandø <stig@users.sourceforge.net>
        * fixed a bug which prevented the +cave-wall+ flag from being set
	correctly.  added this check into (SETF COORD-FEATURE) which is
	different from (SETF COORD.FEATURE), unfortunate I know.
	* added a WITH-DUNGEON macro
	* updated MAP-INFO to use +cave-seen+ and +cave-view+ flags
	* made PRINT-MAP-TO-FILE only print features, ie it ignores what
	has been seen
	* removed a bug in UPDATE-VIEW! where initial-elements for arrays
	were not explicitly set
	* removed bug in VINFO-INIT! where the grid-array was not in
	correct order.
	* added a temporary FORGET-VIEW!
	
	
        
