2001-02-12  Stig E Sandø <stig@users.sourceforge.net>
	* added activable mixin-class for being consistent with
	acticate-object state and later deactivation
	* activable objects: house, variant, active-object, level and
	active-monster 
	* removed reuse of dungeon arrays to allow easier saving of levels
	later.
	* added a hack to allow easy restart after a crash by saving state
	now and then.  the game-loop can be restarted with GAME-LOOP&.
	* added 'z' key to get a LISP-prompt, the restart function over
	can be used afterwards.
	* removed warnings from C-code
	* did some optimisations on UPDATE-VIEW!, need a real rewrite
	later to stop using bignums.
	* regenerated web/file-list.html
	* updated README and added COPYING to the fray
	
2001-02-10  Stig E Sandø <stig@users.sourceforge.net>
	* reduced cons'ing slightly and optimised UPDATE-VIEW! slightly.
	* added memoize.lisp and memoised a few string allocation
	functions in print.lisp (moved to base.lisp)
	* macrofied a few bit-twiddlers for allegro only
	* small adjustments elsewhere

2001-02-08  Stig E Sandø <stig@users.sourceforge.net>
	* made an improvement to the shuffle-array function and added a
	handy array-with-num thing to base.lisp
	* started placing stores/houses stuff in the variant object, not
	quite there yet
	* added a trigger-mechanism that can be set to a special
	coordinate in the dungeon and which will be triggered when the
	player moves atop the location  GET-COORD-TRIGGER and it's SETF
	* added XP testing framework, source gotten from onShore Inc.  See
	tools/xptest-COPYING for copying details.  Only simple tests added
	to code.  This testing imposes some overhead on the current
	cvs-tree code
	* Moved minor stuff around in the vanilla variant code
		
2001-02-02  Stig E Sandø <stig@users.sourceforge.net>
	* added support for numpad and arrowkeys and diagonal movement.
	* added code to allow key-macros to be set and loaded from lisp.
	Angband-pref-files are now plain LOADed lisp.
	* started writing a technical overview of Langband
	* Added lazy flavouring to Langband.  an object is flavoured the
	first time an object of a certain kind is created. 

		
2001-01-21  Stig E Sandø <stig@users.sourceforge.net>
	* Pretty drastic upgrade of a lot of the code, wrt to levels and
	possibly theming.  the town-level in vanilla is now a themed level
	with it's own set of monsters.  This change has updated functions
	to find monster- and object-types from accessing a variant table
	to depend on level.
	* Grouped obj-table, alloc-table and obj-table-by-level into one
	struct and should be used by all appropriate "types" in the game.
	* Added filters when reading monsters and objects to allow levels
	to pick out what they want.
	* disabled stores and flavouring, will enable flavours shortly,
	but stores should be done on a level-by-level basis.
	* disabled placement of gold, no (gold) rush to fix it
	* minor adjustments
	
2001-01-21  Stig E Sandø <stig@users.sourceforge.net>
	* moved *turn* into variant as variant.turn and added a
	turn-events (non-functional yet)
	* moved sort-values (equipment) into variant object and updated
	all corresponding functions
	* added some time-variables to variant object and vanilla-variant,
	and fixed time-of-day for town.. 

2001-01-20  Stig E Sandø <stig@users.sourceforge.net>
	* added a fun room, the shop-room :-)
	* moved monster-tables into the variant object
	* moved object-tables into the variant object
	* added generics for lazy init of objects, monsters and features.
	these are specialised on the variant object.  added corresponding
	methods for vanilla.  The ACTIVATE-OBJECT is important here
	* renamed a few compat-functions to have COMPAT- prefix
	* also separated the vanilla variant mostly from the rest of the
	code, very few dependencies left, and loading is simpler.
		
	

2001-01-19  Stig E Sandø <stig@users.sourceforge.net>
	* renamed dungeon.level to dungeon.depth
	* moved the constant +xp-table+ to be a property of the variant
	object and is now variant.xp-table
	* moved the constant +max-level+ to be a property of the variant
	object and is now variant.max-charlevel
	* moved +dungeon-rooms+ constant to be part of dungeon-settings as
	the slot room-number
	* tried to ensure the same random state when generating the town
	in vanilla
	* added low-level c-term-save and c-term-load which are used by
	screen-save and screen-load.  screen-save and screen-load are
	neatly hidden beneath WITH-NEW-SCREEN though.  This new macro is
	used for show-inventory and show-equipment.
	* Fixed bug with RNG to allow the town to remain constant.
	Hackish solution is limited to one function in the variant-code.
	* Fixed bug in map-info which displayed things in corridors it
	shouldn't display.  Also fixed bug in map-info which showed
	monsters on map even if they were out of torch-scope
	* fixed stair back to level where you came from, through a
	POST-INITIALISATION of a level, which allows customisation for
	individual levels.
	* added hack to OPEN-DOOR! to ensure that an opened door is
	relighted right away.
	* removed some more details, warnings and made the lisp
	environment more quiet.
	

2001-01-18  Stig E Sandø <stig@users.sourceforge.net>
	* revamped room-code to be CLOS and the actual control is put in
	the variant and the engine is simplified.
	* prettified code, removed warnings and ensured that things look
	kind of nice.  time to write real code again soon. 
		
2001-01-18  Stig E Sandø <stig@users.sourceforge.net>
	* removed vanilla/[races|classes] from system file and let them be
	loaded by variant init
	* made a variant class, and made a subclass for the vanilla
	variant.  this variant class contains more of the information
	which was kept globally earlier.  an active variant-object will be
	kept in *variant*.  the file for this is core.lisp
	* added a level class which is the start of theming of levels.
	the file for this is level.lisp and lib/vanilla/levels.lisp update
	this with variant-specifics (ie town).  town-code largely moved
	here. 
	* removed global *level-rating* variable
	* ensured that races and classes now access the variant-object
	* separated vanilla and compat-code from the core engine
	system-file.  The new vanilla system file is
	lib/var-vanilla.system.  game.lisp has been changed to reflect
	that.
	* common files now use the COMMON prefix
	* distributed room-code into lib/common and to variants, also
	removed global table and moved it into the variant
	* moved global floor-table into variant object and updated
	floor-code
	* made a common module in langband.system to pretty things up
	* moved max-sizes of dungeons into variant object and removed
	global variables.
	* Slight change on PRINT-DEPTH
	


2001-01-17  Stig E Sandø <stig@users.sourceforge.net>
        * fixed a bug which prevented the +cave-wall+ flag from being set
	correctly.  added this check into (SETF COORD-FEATURE) which is
	different from (SETF COORD.FEATURE), unfortunate I know.
	* added a WITH-DUNGEON macro
	* updated MAP-INFO to use +cave-seen+ and +cave-view+ flags
	* made PRINT-MAP-TO-FILE only print features, ie it ignores what
	has been seen
	* removed a bug in UPDATE-VIEW! where initial-elements for arrays
	were not explicitly set
	* removed bug in VINFO-INIT! where the grid-array was not in
	correct order.
	* added a temporary FORGET-VIEW!
	
	
        
