nl This is configure script for langband to get libraries et.al right
AC_INIT(player.lisp)

LBE_MAJOR_VERSION=0
LBE_MINOR_VERSION=1
LBE_MICRO_VERSION=6
LBE_VERSION="${LBE_MAJOR_VERSION}.${LBE_MINOR_VERSION}.${LBE_MICRO_VERSION}"
	
AC_CONFIG_HEADERS([zterm/autoconf.h])
AH_TOP([#ifndef LBE_AUTOHEADER_H
#define LBE_AUTOHEADER_H])
AH_BOTTOM([#endif /* LBE_AUTOHEADER_H*/])			

PACKAGE_BUGREPORT="stig@langband.org"
PACKAGE_NAME="langband"
PACKAGE_STRING="langband v${LBE_VERSION}"
PACKAGE_VERSION="${LBE_VERSION}"
PACKAGE_TARNAME="langband-${LBE_VERSION}.tar.gz"
		  			
LBE_CFLAGS=""	
LBE_OBJS="collected.o sound.o frame.o lisp_if.o tools.o"
LBE_LIBS=""
LBE_LINKFLAGS=""
LBUI_CFLAGS=""
LBUI_LIBS=""
LBSND_CFLAGS=""
LBSND_LIBS=""
LBSND_SRC="server.c sound.c tools.c"
		    
MAKE_EXTSOUND="no"  
DLLEXT="so"
PICFLAG="-fPIC"
DLLCOPY="true"
use_sdl="no"
use_gcu="no"

AC_CANONICAL_SYSTEM

AC_PROG_MAKE_SET
AC_PROG_CC
AC_PROG_INSTALL

AC_ARG_ENABLE(warn,
AC_HELP_STRING([--enable-warn],[Enable compiler warnings @<:@default=on@:>@]),
	enable_warn=$enableval, enable_warn=yes)
if test "x$enable_warn" = xyes; then
	LBE_CFLAGS="$LBE_CFLAGS -Wall -W"
fi

AC_ARG_ENABLE(debug,
AC_HELP_STRING([--enable-debug],[Enable debugging @<:@default=off@:>@]),
	enable_debug=$enableval, enable_debug=off)
if test "x$enable_debug" = xyes; then
	LBE_CFLAGS="$LBE_CFLAGS -g3 -DDEBUG -DEBUG"
fi

AC_ARG_ENABLE(sdl,
AC_HELP_STRING([--enable-sdl],[Enable SDL-interface @<:@default=on@:>@]),
	enable_sdl=$enableval, enable_sdl=yes)
if test "x$enable_sdl" = xyes; then
   use_sdl="yes"
fi	

AC_ARG_ENABLE(gcu,
AC_HELP_STRING([--enable-gcu],[Enable Curses/Ncurses-interface @<:@default=on@:>@]),
	enable_gcu=$enableval, enable_gcu=yes)
if test "x$enable_gcu" = xyes; then
   use_gcu="yes"
fi	

AC_ARG_ENABLE(sound,
AC_HELP_STRING([--enable-sound],[Enable sound-support in Langband @<:@default=on@:>@]),
	enable_sound=$enableval, enable_sound=yes)	
	
AC_ARG_ENABLE(extsound,
AC_HELP_STRING([--enable-extsound],[Enable sound through sound-daemon (safest on *nix) @<:@default=on@:>@]),
	enable_extsound=$enableval, enable_extsound=yes)
	
AC_ARG_ENABLE(openal,
AC_HELP_STRING([--enable-openal],[check for OpenAL and use if it exists @<:@default=on@:>@]),
	enable_openal=$enableval, enable_openal=yes)

AC_ARG_ENABLE(sdlmixer,
AC_HELP_STRING([--enable-sdlmixer],[check for SDL Mixer and use if it exists @<:@default=on@:>@]),
	enable_sdlmixer=$enableval, enable_sdlmixer=yes)

AC_ARG_ENABLE(onlyinstalled,
AC_HELP_STRING([--enable-onlyinstalled],[compile everything for installed-only use @<:@default=off@:>@]),
	enable_onlyinstalled=$enableval, enable_onlyinstalled=yes)
	
dnl echo "sdl: $use_sdl $enable_sdl $enable_warn"	

if test "x$enable_sound" != "xyes"; then
   enable_sound="no"
   enable_extsound="no"
   enable_openal="no"
   enable_sdlmixer="no"
fi
    
AC_CYGWIN

if test "x$CYGWIN" = "xyes"; then
  echo "Found cygwin, using cygwin-settings." 
  AC_DEFINE(WINDOWS,1,[are we on a windows box?])
  AC_DEFINE(USE_SDL,1,[Compile SDL frontend])
  LBE_LIBS="$LBE_LIBS -lwinmm"
  LBE_LINKFLAGS="$LBE_LINKFLAGS -shared -mno-cygwin"
  LBE_CFLAGS="$LBE_CFLAGS -DWIN_MAKEDLL -mno-cygwin"
  LBUI_OBJS="${LBUI_OBJS} sdl-extra.o main-sdl.o"
  LBUI_CFLAGS="$LBUI_CFLAGS -ISDL"
  LBUI_LIBS="$LBUI_LIBS SDL/SDL.dll SDL/SDL_image.dll"
  DLLEXT="dll"
  PICFLAG=""
  DLLCOPY="/bin/cp -f SDL/*.dll ../"
  enable_extsound="no"
  enable_openal="no"
  if test "x$enable_sound" = "xyes"; then
    LBUI_OBJS="$LBUI_OBJS sdl-sound.o"
    LBUI_LIBS="$LBUI_LIBS SDL/SDL_mixer.dll"
    LBUI_CFLAGS="$LBUI_CFLAGS -DUSE_SDL_MIXER"
    dnl we fix all settings here, let the rest of the file assume we're mad
    enable_sdlmixer="no" 
  fi
  enable_sdl="no"
  use_sdl="no"
  use_gcu="no"
fi
	
if test "x$use_gcu" = "xyes"; then
  dnl Check for ncurses, curses, or termcap
  dnl Try -lncurses, -lcurses, -lcurses -ltermcap, and finally plain -ltermcap
  use_ncurses=no
  AC_CHECK_LIB(ncurses, initscr,
    [AC_CHECK_HEADER(ncurses.h, use_ncurses=yes,
       [AC_CHECK_HEADER(/usr/include/ncurses/ncurses.h,
          [CFLAGS="-I/usr/include/ncurses $CFLAGS" use_ncurses=yes])])])
  if test "x$use_ncurses" = "xyes"; then
    AC_DEFINE(USE_GCU,1,[compile curses interface])
    AC_DEFINE(USE_NCURSES,1,[compile with ncurses for curses])
    use_gcu="yes"
    LBUI_LIBS="-lncurses $LBUI_LIBS"
dnl  else
dnl    AC_CHECK_LIB(curses, initscr,
dnl      [AC_DEFINE(USE_GCU) LBE_LIBS="-lcurses $LBE_LIBS"],
dnl      [AC_CHECK_LIB(curses, endwin,
dnl         [AC_DEFINE(USE_GCU) LBE_LIBS="-lcurses -ltermcap $LBE_LIBS"],
dnl         [AC_CHECK_LIB(termcap, tgetent,
dnl            [AC_DEFINE(USE_CAP) LBE_LIBS="-ltermcap $LBE_LIBS"])],
dnl         -ltermcap)])
  fi
fi

#echo "sdl: $use_sdl, gcu: $use_gcu"


if test "x$use_sdl" = "xyes"; then
    SDL_VERSION=1.2.5
    AM_PATH_SDL($SDL_VERSION,
            use_sdl="yes";
	    AC_DEFINE(USE_SDL,1,[Compile SDL frontend]),
            AC_WARN([*** SDL version $SDL_VERSION not found!])
    )
fi


if test "x$CYGWIN" != "xyes"; then    
  if test "x$use_sdl" != "xyes"; then
     if test "x$use_gcu" != "xyes"; then
	AC_MSG_ERROR([You need to select curses/gcu or sdl visuals.])
     fi
  fi
fi
	
ac_save_CFLAGS=${CFLAGS}
ac_save_LIBS=${LIBS}	
    
if test "x$use_sdl" = "xyes"; then      
  CFLAGS="${CFLAGS} ${SDL_CFLAGS}"
  LIBS="${LIBS} ${SDL_LIBS}"

  dnl Check for other sdl-related libs too

  AC_CHECK_LIB(SDL_image, IMG_Load,
	[LBUI_LIBS="$LBUI_LIBS -lSDL_image"],
	[AC_MSG_ERROR(SDL_image not found, this app is needed)])
      
  AC_CHECK_LIB(SDL_ttf,TTF_RenderText_Solid,
	[AC_DEFINE(ALLOW_TTF,1,[sdl_ttf]) LBUI_LIBS="$LBUI_LIBS -lSDL_ttf"],
	[AC_MSG_WARN(SDL_ttf not found, can only use basic fonts then)])
else
	if test "x$enable_sdlmixer" = "xyes"; then
	   AC_MSG_WARN([Can't use SDL-mixer for sound if SDL is not enabled.])
	fi
	dnl no sdl-mixer if we don't have sdl
	enable_sdlmixer="no"
fi

if test "x$enable_sdlmixer" = "xyes"; then
  AC_CHECK_LIB(SDL_mixer,Mix_Volume,
	[enable_sdlmixer="yes"],
	[enable_sdlmixer="no"; AC_MSG_WARN(SDL_mixer not found, can check for OpenAL)])
fi

if test "x$enable_openal" = "xyes"; then
  AC_CHECK_LIB(openal,alcOpenDevice,
	[enable_openal="yes"],
	[enable_openal="no"; AC_MSG_WARN(OpenAL not found, langband can work with no sound)])
fi

dnl if extsound is true, the wanted sound goes into lbsd
if test "x$enable_extsound" = "xyes"; then
   LBUI_CFLAGS="$LBUI_CFLAGS -DUSE_EXTERNAL_SOUND"
   if test "x$enable_onlyinstalled" = "xyes"; then
     LBUI_CFLAGS="$LBUI_CFLAGS -DEXTDAEMON_PATH=\"\\\"\${bindir}\"\\\" "
   fi  
   LBUI_OBJS="$LBUI_OBJS ext-sound.o"
   MAKE_EXTSOUND="yes"
      
  if test "x$enable_openal" = "xyes"; then
	LBSND_CFLAGS="$LBSND_CFLAGS -DUSE_OPENAL"
	LBSND_LIBS="$LBSND_LIBS -lopenal"
	LBSND_SRC="$LBSND_SRC al-sound.c"
  fi
  if test "x$enable_sdlmixer" = "xyes"; then
	LBSND_CFLAGS="$LBSND_CFLAGS $SDL_CFLAGS -DUSE_SDL_MIXER"
	LBSND_LIBS="$LBSND_LIBS -lSDL_mixer"
	LBSND_SRC="$LBSND_SRC sdl-sound.c"
  fi
else
  if test "x$enable_openal" = "xyes"; then
	LBUI_CFLAGS="$LBUI_CFLAGS -DUSE_OPENAL"
	LBUI_LIBS="$LBUI_LIBS -lopenal"
	LBUI_OBJS="$LBUI_OBJS al-sound.o"
  fi
  if test "x$enable_sdlmixer" = "xyes"; then
	LBUI_CFLAGS="$LBUI_CFLAGS -DUSE_SDL_MIXER"
	LBUI_LIBS="$LBUI_LIBS -lSDL_mixer"
	LBUI_OBJS="$LBUI_OBJS sdl-sound.o"
  fi
fi  
	
CFLAGS=${ac_save_CFLAGS}
LIBS=${ac_save_LIBS}

LBE_CFLAGS="$LBE_CFLAGS $PICFLAG"
	
if test "x$use_gcu" != "xno"; then
   LBUI_OBJS="$LBUI_OBJS main-gcu.o gcu-extra.o"
fi

if test "x$use_sdl" != "xno"; then
   LBUI_OBJS="$LBUI_OBJS sdl-extra.o main-sdl.o"
   LBUI_CFLAGS="${SDL_CFLAGS} ${LBUI_CFLAGS}"
   LBUI_LIBS="${SDL_LIBS} ${LBUI_LIBS}"
fi  

AC_SUBST(LBUI_LIBS)          	
AC_SUBST(LBUI_CFLAGS)
AC_SUBST(LBUI_OBJS)

AC_SUBST(LBE_OBJS)
AC_SUBST(LBE_LIBS)
AC_SUBST(LBE_CFLAGS)
AC_SUBST(LBE_LINKFLAGS)
AC_SUBST(LBE_VERSION)
	
AC_SUBST(LBSND_LIBS)
AC_SUBST(LBSND_CFLAGS)
AC_SUBST(LBSND_SRC)

AC_SUBST(MAKE_EXTSOUND)
AC_SUBST(DLLEXT)
AC_SUBST(DLLCOPY)
		
AC_OUTPUT([
	zterm/Makefile
	]
)
