;;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: cl-user -*-

#|

DESC: langband-engine.system - system-def for vanilla
Copyright (c) 2001 - Stig Erik Sandø

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

|#

(in-package :cl-user)

#-langband-development
(setf (logical-pathname-translations "langband")
      '(("**;*.*.*" "cl-library:;langband-engine;**;*.*.*")))

;; we need certain flags
(eval-when (:execute :load-toplevel :compile-toplevel)
  #+(or allegro cmu)
  (pushnew :use-callback-from-c *features*)

  #+(or cmu clisp)
  (pushnew :handle-char-as-num *features*)

  #+(or cmu allegro lispworks)
  (pushnew :enough-support-for-langband *features*)
  #+(and clisp langband-development) ;; clisp not ready in debian yet
  (pushnew :enough-support-for-langband *features*)

  #-langband-development
  (pushnew :hide-warnings *features*)
  
  #+cmu
  (pushnew :compiler-that-inlines *features*)
  #+(or allegro cmu)
  (push :use-callback-from-c *features*))


#+enough-support-for-langband
(mk:defsystem :langband-engine
    :source-pathname
  #-langband-development #p"langband:"
  #+langband-development (translate-logical-pathname #p"langband:")
  ;;    :source-pathname ""
    :source-extension "lisp"
    :components
    (
     (:module decl
              :source-pathname ""
              :components ((:file "pre-build")
			   #+langband-development
			   (:file "binary-types/binary-types")
			   (:file "package")
			   ))

     (:module foreign
	      :source-pathname "ffi/"
	      :components ((:file "ffi-load")
			   (:file "ffi-sys")
			   #+cmu
			   (:file "ffi-cmu")
			   #+allegro
			   (:file "ffi-acl")
			   #+lispworks
			   (:file "ffi-lw")
			   #+clisp
			   (:file "ffi-clisp"))
	      :depends-on (decl))

     ;; fix all dependencies later
     (:module basic
              :source-pathname ""
              :components ((:file "memoize")
			   (:file "base")
			   (:file "constants")
			   (:file "dyn-vars")
			   (:file "generics")
			   (:file "sys")
			   (:file "event" :depends-on ("generics"))
			   (:file "core" :depends-on ("generics"))
			   (:file "parameters")
			   (:file "global" :depends-on ("core" "generics" "base"))
			   (:file "settings")
			   (:file "level" :depends-on ("global" "core"))
			   (:file "floor" :depends-on ("core"))
			   (:file "sound")
			   (:file "stat")
			   (:file "race" :depends-on ("core"))
			   (:file "class" :depends-on ("core"))
			   (:file "object" :depends-on ("core" "generics" "global"))
			   (:file "equipment" :depends-on ("global"))
			   (:file "player" :depends-on ("core" "global" "stat" "race" "class"))
			   (:file "flavours" :depends-on ("core"))
			   (:file "monster" :depends-on ("core" "global"))
			   (:file "dungeon" :depends-on ("base" "monster" "core"))
			   (:file "building" :depends-on ("generics" "base" "global"))
			   (:file "stores" :depends-on ("building" "generics"))
			   (:file "allocate" :depends-on ("generics" "dungeon" "constants"))
			   (:file "rooms" :depends-on ("core" "generics"))
			   (:file "generate" :depends-on ("dungeon" "allocate" "core" "generics"))
			   (:file "print" :depends-on ("generics" "player"))
			   (:file "util" :depends-on ("dungeon" "core" "global" "generics"))
			   (:file "combat" :depends-on ("generics" "base" "sound" "global" "core"))
			   (:file "keys" :depends-on ("base" "dungeon" "constants"))
			   (:file "actions" :depends-on ("generics" "util"))
			   (:file "view" :depends-on ("dungeon" "generics" "constants"))
			   (:file "project" :depends-on ("base" "generics" "player" "object" "dungeon"))
			   (:file "save" :depends-on ("player" "dungeon" "core" "global" "generics" "stat"))
			   (:file "load" :depends-on ("save"))
			   (:file "death" :depends-on ("global" "player" "sys" "race" "class"))
			   (:file "birth" :depends-on ("generics" "constants" "core" "player"))
			   (:file "loop" :depends-on ("core" "player" "sys" "death" "project"))
			   (:file "init" :depends-on ("flavours" "core" "monster" "object" "loop"))
			   (:file "verify" :depends-on ("player" "global" "base" "level" "monster" "race"))
			   
			   
			   ;; hack
;;			   (:file "variants/vanilla/base")
			   )
	      :depends-on (foreign))

     #||
     ;; compatibility with classic angband, remove later
     
     (:module compatibility
	      :source-pathname "lib/compat/"
              :components (;;(:file "monster")
			   (:file "obj-kind")
			   ;;(:file "floor")
			   ))
     ||#
     )
    
    :depends-on (#-langband-development
		 binary-types))

#-enough-support-for-langband
(warn "Langband-Engine has not been tested with '~a ~a', skips compilation."
      (lisp-implementation-type)
      (lisp-implementation-version))

