# File: Makefile.std

# This is not a very "nice" Makefile, but it usually works.

#
# Note that you may have to make modifications below according
# to your machine, available libraries, compilation options,
# and your "visual module" of choice.  This Makefile is intended
# for use with Unix machines running X11, gtk, (n)curses, termcap,
# or VT100, Slang, Linux VCS or SVGA library,
# or possibly for "Atari" or "Amiga" computers with "Curses" ports,
# see below for more information.
#
# Note that "main-mac.c", the visual module for the Macintosh,
# must be compiled in a special way, see elsewhere.
#
# Note that "main-win.c", the visual module for Windows,
# must be compiled in a special way, see elsewhere.
#
# Note that "main-ibm.c", "main-dos.c", and "main-emx.c",
# the visual modules for various types of IBM-PC computers,
# must be compiled with special Makefiles, see elsewhere.
#
# Note that "main-ros.c", the visual module for RISC OS,
# must be compiled with "Makefile.ros", see elsewhere.
#
# Note that "main-ami.c", the visual module for the Amiga,
# must be compiled with "Makefile.ami", see elsewhere.
#
# If you are able to construct "main-xxx.c" and/or "Makefile.xxx"
# files for a currently unsupported system, please send them to
# Robert Ruehlmann < rr9@angband.org > for inclusion in future versions.
#
# This Makefile comes with "default" dependencies that may be obsolete.
#

#
# The "source" and "object" files.
#

include ./Srcobj.make

##
## Following are some "system" definitions
##
## No changes are needed to compile a version that will run on both
## X11 and Curses, in debugging mode, with maximal warnings, on many
## normal Unix machines of the Sun OS variety (non-solaris).
##
## To use an "alternative" definition, simply "modify" (or "replace")
## the definition below with one that you like.  For example, you can
## change the compiler to "cc", or remove the "debugging" options, or
## remove the X11 or Curses support, etc, as desired.
##
## With X11, XAW or GTK, you can add -D"USE_XPJ" to CFLAGS to get the
## 3d-projection module "xpj".
##
## See also "config.h" and "h-config.h" for important information.
##
## Some "examples" are given below, they can be used by simply
## removing the FIRST column of "#" signs from the "block" of lines
## you wish to use, and commenting out "standard" block below.
##
## This is not intended to be a "good" Makefile, just a "simple" one.
##


#
# This is my compiler of choice, it seems to work most everywhere.
#
CC = gcc


#
# Standard version (see main-x11.c and main-gcu.c)
#
# This version supports both "X11" and "curses" in a single executable.
#
# You may have to add various X11 include/library directories to the
# "CFLAGS", if your machine places files in a weird location.
#
# You may be able to remove "-ltermcap" on some machines (ex: Solaris).
#
# You may have to replace "-lcurses" with "-lncurses" to use the
# "new curses" library instead of the "old curses" library, and
# you may have to add "-I/usr/include/ncurses" to the "CFLAGS".
#
# See "main-gcu.c" and "config.h" for some optional "curses" defines,
# including "USE_GETCH" and "USE_CURS_SET".  Note that "config.h" will
# attempt to "guess" at many of these flags based on your system.
#
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_GCU"
#LIBS = -lX11 -lcurses -ltermcap


##
## Variation -- Only support "main-x11.c" (not "main-gcu.c")
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11"
#LIBS = -lX11


##
## Variation -- Only support "main-gcu.c" (not "main-x11.c")
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_GCU"
#LIBS = -lcurses -ltermcap


##
## Variation -- Use "main-xaw.c" instead of "main-x11.c"
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_XAW" -D"USE_GCU"
#LIBS = -lXaw -lXmu -lXt -lX11 -lcurses -ltermcap


##
## Variation -- Use "main-gtk.c" instead of "main-x11.c"
## Note: gtk-config adds GTK and X11 includes and libraries as appropriate.
##
#CFLAGS = -Wall -O `gtk-config --cflags` -g -D"USE_GTK" -D"USE_GCU"
#LIBS = `gtk-config --libs` -lcurses -ltermcap


##
## Variation -- Use "main-cap.c" instead of "main-gcu.c"
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_CAP"
#LIBS = -lX11 -ltermcap


##
## Variation -- Only work on simple vt100 terminals
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_CAP" -D"USE_HARDCODE"


##
## Variation -- compile for Linux
##
## Allows the use of Angband in the console using ncurses,
## as well as under X11.
##
#CFLAGS = -I/usr/X11R6/include -I/usr/include/ncurses -Wall \
#         -O2 -fno-strength-reduce \
#         -D"USE_X11" -D"USE_GCU" -D"USE_NCURSES"
#LIBS = -L/usr/X11R6/lib -lXaw -lXext -lSM -lICE -lXmu -lXt -lX11 -lncurses


##
## Variation -- compile for Linux
##
## Allows the use of Angband in the console using curses.
##
CFLAGS = -Wall -O2 -fno-strength-reduce -pipe -D"USE_GCU"
LIBS = -lncurses


##
## Variation -- compile for Linux
##
## Allows the use of Angband in X11 using the Athena Widget set.
##
#CFLAGS = -Wall -O2 -fno-strength-reduce -pipe -g -D"USE_XAW"
#LIBS = -L/usr/X11R6/lib -lXaw -lXext -lSM -lICE -lXmu -lXt -lX11


##
## Variation -- this might work better than the suggestion above
##
#CFLAGS = -I/usr/include/ncurses \
#         -Wall -O2 -fno-strength-reduce -fomit-frame-pointer \
#         -D"USE_X11" -D"USE_GCU" \
#         -D"USE_TPOSIX" -D"USE_CURS_SET"
#LIBS = -lX11 -lncurses
#LDFLAGS = -s


##
## Variation -- compile for Solaris
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_GCU" -D"SOLARIS"
#LIBS = -lX11 -lsocket -lcurses


##
## Variation -- compile for SGI Indigo runnig Irix
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_GCU" -D"SGI"
#LIBS = -lX11 -lcurses -ltermcap -lsun


##
## Variation -- compile for Dec ALPHA OSF/1 v2.0
##
#CC     = cc
##CFLAGS = -std -O -g3 -Olimit 4000 -D"USE_X11" -D"USE_GCU"
#CFLAGS = -std -g -D"USE_X11" -D"USE_GCU"
#LIBS   = -lX11 -lcurses -ltermcap -lrpcsvc


##
## Variation -- compile for Interactive Unix (ISC) systems
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_GCU" -D"ISC"
#LIBS = -lX11 -lcurses -lnsl_s -linet -lcposix


##
## Variation -- Support fat binaries under NEXTSTEP
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_GCU" -arch m68k -arch i386
#LIBS = -lcurses -ltermcap


##
## Variation -- Support Linux + SVGA library
##
#CFLAGS = -Wall -O2 -fno-strength-reduce -D"USE_LSL"
#LIBS = -lz -lvgagl -lvga


##
## Variation -- Support Linux "vcs" (Virtual Console memory) module
##
#CFLAGS = -Wall -O2 -fno-strength-reduce -D"USE_VCS"
#LIBS =


##
## Variation -- Support S-Lang library
##
#CFLAGS = -Wall -O2 -fno-strength-reduce -D"USE_SLA" -I/usr/include/slang
#LIBS = -lslang


#
# Default target.
#
all: angband


#
# Install the game.
#

install: angband
	cp angband ..


#
# Build the "Angband" program
#

angband: $(OBJS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o angband $(OBJS) $(LIBS)


#
# Clean up old junk
#

clean:
	-rm -f *.o angband
	-rm -f ./lua/*.o ./lua/tolua


#
# Generate dependencies automatically
#

depend:
	makedepend -D__MAKEDEPEND__ $(SRCS)


#
# Lua stuff
#

#lua/tolua: $(TOLUAOBJS)
#	$(CC) -o lua/tolua $(TOLUAOBJS) $(LDFLAGS) $(LIBS)


#
# Hack -- some file dependencies
#

include ./Dep.make