# File: Makefile

#
# The "source" and "object" files.
#

SRCS = \
	z-util.c z-virt.c z-form.c z-rand.c z-term.c \
	variable.c tables.c util.c cave.c \
	object1.c object2.c monster1.c monster2.c \
	xtra1.c xtra2.c spells1.c spells2.c \
	melee1.c melee2.c save.c files.c fields.c\
	cmd1.c cmd2.c cmd3.c cmd4.c cmd5.c cmd6.c \
	store.c birth.c load.c \
	wizard1.c wizard2.c grid.c streams.c rooms.c \
	generate.c dungeon.c init1.c init2.c \
	effects.c racial.c \
	artifact.c mutation.c flavor.c spells3.c \
	mspells1.c mspells2.c scores.c mind.c \
	bldg.c obj_kind.c wild1.c wild2.c avatar.c notes.c\
	main-cap.c main-gcu.c main-x11.c main-xaw.c main-xpj.c main.c

OBJS = \
  z-util.o z-virt.o z-form.o z-rand.o z-term.o \
  variable.o tables.o util.o cave.o \
  object1.o object2.o monster1.o monster2.o \
  xtra1.o xtra2.o spells1.o spells2.o spells3.o \
  melee1.o melee2.o load1.o load2.o save.o files.o \
  cmd1.o cmd2.o cmd3.o cmd4.o cmd5.o cmd6.o \
  store.o birth.o wizard1.o wizard2.o \
  generate.o dungeon.o init1.o init2.o \
  quest.o mindcrft.o mutation.o artifact.o \
  main-ibm.o main-gcu.o main-x11.o main.o


#
# This is my compiler of choice, it seems to work most everywhere
#
CC = gcc


##
## Graphics under X11 in linux.  (Run with the -g option)
## Note: Get the 16x16.bmp file, and put in Zdirectory/lib/xtra/graf
##       to get 256 colours.
##
CFLAGS = -Wall -O2 -fno-strength-reduce -pipe -g \
         -D"USE_X11" -D"USE_GCU" -D"USE_TRANSPARENCY"
LIBS = -lX11 -lcurses -ltermcap -L/usr/X11R6/lib

#CFLAGS = -Wall -O2 -fno-strength-reduce -pipe -g \
#          -D"USE_XAW" -D"USE_GCU" -D"USE_TRANSPARENCY"
#LIBS = -L/usr/X11R6/lib -lXaw -lXext -lSM -lICE -lXmu -lXt -lX11 -lcurses
##
## Variation -- Compile for Linux
##
#CFLAGS = -Wall -O2 -fno-strength-reduce -pipe -g -D"USE_XAW" -D"USE_GCU"
#LIBS = -L/usr/X11R6/lib -lXaw -lXext -lSM -lICE -lXmu -lXt \
#	-lX11 -lcurses


## Variation - Debian 
#
#CFLAGS = -Wall -W -O2 -fno-strength-reduce -m486 -pipe -g \
#         -D"USE_GCU" -D"USE_TRANSPARENCY" -D"USE_XPJ" -D"USE_X11"
#LIBS = -lX11 -lcurses -lncurses -L/usr/X11R6/lib


## Variation - OpenBSD 
#
#CFLAGS = -Wall -O2 -fno-strength-reduce -pipe -g -I/usr/x11r6/include \
#         -D"USE_X11" -D"USE_GCU" -D"USE_TRANSPARENCY"
#LIBS = -lX11 -lcurses -ltermcap -L/usr/X11R6/lib


##
## Variation -- Only support "main-x11.c" (not "main-gcu.c")
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11"
#LIBS = -lX11


##
## Variation -- Only support "main-gcu.c" (not "main-x11.c")
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_GCU"
#LIBS = -lcurses -ltermcap


##
## Variation -- Use "main-xaw.c" instead of "main-x11.c"
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_XAW" -D"USE_GCU"
#LIBS = -lXaw -lXmu -lXt -lX11 -lcurses -ltermcap


##
## Variation -- Use "main-cap.c" instead of "main-gcu.c"
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_CAP"
#LIBS = -lX11 -ltermcap


##
## Variation -- Only work on simple vt100 terminals
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_CAP" -D"USE_HARDCODE"


##
## Variation -- this might work for Linux 1.1.93 using ncurses-1.8.7.
##
#CFLAGS = -I/usr/X11R6/include -I/usr/include/ncurses \
#         -Wall -O2 -fno-strength-reduce -fomit-frame-pointer \
#         -D"USE_X11" -D"USE_GCU"
#LIBS = -L/usr/X11R6/lib -lX11 -lncurses -ltermcap

##
## Variation -- this might work better than the suggestion above
##
#CFLAGS = -I/usr/include/ncurses \
#         -Wall -O2 -fno-strength-reduce -fomit-frame-pointer \
#         -D"USE_X11" -D"USE_GCU" \
#         -D"USE_TPOSIX" -D"USE_CURS_SET"
#LIBS = -lX11 -lncurses
#LDFLAGS = -s


##
## Variation -- compile for Solaris
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_GCU" -D"SOLARIS"
#LIBS = -lX11 -lsocket -lcurses


##
## Variation -- compile for SGI Indigo runnig Irix
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_GCU" -D"SGI"
#LIBS = -lX11 -lcurses -ltermcap -lsun



##
## Variation -- compile for Dec ALPHA OSF/1 v2.0
##
#CC     = cc
##CFLAGS = -std -O -g3 -Olimit 4000 -D"USE_X11" -D"USE_GCU"
#CFLAGS = -std -g -D"USE_X11" -D"USE_GCU"
#LIBS   = -lX11 -lcurses -ltermcap -lrpcsvc


##
## Variation -- compile for Interactive Unix (ISC) systems
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_GCU" -D"ISC"
#LIBS = -lX11 -lcurses -lnsl_s -linet -lcposix


##
## Variation -- Support fat binaries under NEXTSTEP
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_GCU" -arch m68k -arch i386
#LIBS = -lcurses -ltermcap


##
## Variation -- compile for AIX 4.2.1 systems
## (Tested on an IBM SP2)
##
#
#CC = cc
#CFLAGS = -bnoquiet -O2  -D"USE_X11" -D"SYS_V"
#LIBS = -lX11 -ltermcap -lcurses -lbsd -lXm -lXmu -lXaw -lXt



##
## Variation -- compile for Linux + SVGA Library.
## Do not use this unless you wnat to play as root in a console.
## The graphics is really out of date - this combination probably
## should not be used.  Does anyone feel like fixing main_lsl.c to
## use the normal scaled graphics?
#
#CFLAGS = -Wall -D"USE_LSL"
#LIBS = -lz -lvgagl -lvga



#
# Hack -- "install" as the base target
#

install: gumband
	cp gumband ..


#
# Build the "Angband" program
#

gumband: $(OBJS)
	$(CC) $(CFLAGS) -o gumband $(OBJS) $(LDFLAGS) $(LIBS)


#
# Clean up old junk
#

clean:
	rm -f *.bak *.o


#
# Generate dependencies automatically
#

depend:
	makedepend -D__MAKEDEPEND__ $(SRCS)


#
# Hack -- some file dependencies
#

HDRS = \
	h-basic.h \
	h-define.h h-type.h h-system.h h-config.h

INCS = \
	angband.h \
	defines.h types.h externs.h \
	z-term.h z-rand.h z-util.h z-virt.h z-form.h $(HDRS)


artifact.o: artifact.c $(INCS)
avatar.o: avatar.c $(INCS)
bldg.o: bldg.c $(INCS)
birth.o: birth.c $(INCS)
cave.o: cave.c $(INCS)
cmd1.o: cmd1.c $(INCS)
cmd2.o: cmd2.c $(INCS)
cmd3.o: cmd3.c $(INCS)
cmd4.o: cmd4.c $(INCS)
cmd5.o: cmd5.c $(INCS)
cmd6.o: cmd6.c $(INCS)
dungeon.o: dungeon.c $(INCS)
effects.o: effects.c $(INCS)
fields.o: fields.c $(INCS)
files.o: files.c $(INCS)
flavor.o: flavor.c $(INCS)
generate.o: generate.c $(INCS) 
init1.o: init1.c $(INCS)
init2.o: init2.c $(INCS)
load.o: load.c $(INCS)
main-cap.o: main-cap.c $(INCS)
main-gcu.o: main-gcu.c $(INCS)
main-x11.o: main-x11.c $(INCS)
main-xaw.o: main-xaw.c $(INCS)
main-xpj.o: main-xpj.c $(INCS)
main.o: main.c $(INCS)
melee1.o: melee1.c $(INCS)
melee2.o: melee2.c $(INCS)
mind.o: mind.c $(INCS)
monster1.o: monster1.c $(INCS)
monster2.o: monster2.c $(INCS)
mspells1.o: mspells1.c $(INCS)
mspells2.o: mspells2.c $(INCS)
mutation.o: mutation.c $(INCS)
notes.o: notes.c $(INCS)
object1.o: object1.c $(INCS)
object2.o: object2.c $(INCS)
obj_kind.o: obj_kind.c $(INCS)
racial.o: racial.c $(INCS)
scores.o: scores.c $(INCS)
save.o: save.c $(INCS)
spells1.o: spells1.c $(INCS)
spells2.o: spells2.c $(INCS)
spells3.o: spells3.c $(INCS)
store.o: store.c $(INCS)
tables.o: tables.c $(INCS)
util.o: util.c $(INCS)
variable.o: variable.c $(INCS)
wizard1.o: wizard1.c $(INCS)
wizard2.o: wizard2.c $(INCS)
xtra1.o: xtra1.c $(INCS)
xtra2.o: xtra2.c $(INCS)
z-form.o: z-form.c $(HDRS) z-form.h z-util.h z-virt.h
z-rand.o: z-rand.c $(HDRS) z-rand.h
z-term.o: z-term.c $(HDRS) z-term.h z-virt.h
z-util.o: z-util.c $(HDRS) z-util.h
z-virt.o: z-virt.c $(HDRS) z-virt.h z-util.h

