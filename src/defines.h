/* File: defines.h */

/*
 * Copyright (c) 1997 Ben Harrison, James E. Wilson, Robert A. Koeneke
 *
 * This software may be copied and distributed for educational, research,
 * and not for profit purposes provided that this copyright and statement
 * are included in all such copies.  Other copyrights may also apply.
 */


/*
 * Do not edit this file unless you know *exactly* what you are doing.
 *
 * Some of the values in this file were chosen to preserve game balance,
 * while others are hard-coded based on the format of old save-files, the
 * definition of arrays in various places, mathematical properties, fast
 * computation, storage limits, or the format of external text files.
 *
 * Changing some of these values will induce crashes or memory errors or
 * savefile mis-reads.  Most of the comments in this file are meant as
 * reminders, not complete descriptions, and even a complete knowledge
 * of the source may not be sufficient to fully understand the effects
 * of changing certain definitions.
 *
 * Lastly, note that the code does not always use the symbolic constants
 * below, and sometimes uses various hard-coded values that may not even
 * be defined in this file, but which may be related to definitions here.
 * This is of course bad programming practice, but nobody is perfect.
 *
 * For example, there are MANY things that depend on the screen being
 * 80x24, with the top line used for messages, the bottom line being
 * used for status, and exactly 22 lines used to show the dungeon.
 * Just because your screen can hold 46 lines does not mean that the
 * game will work if you try to use 44 lines to show the dungeon.
 *
 * You have been warned.
 */


/*
 * Name of the version/variant
 */
#define VERSION_NAME "Ironband"


/*
 * Current version string
 */
#define VERSION_STRING	"Third beta release"


/*
 * Current version numbers
 */
#define VERSION_MAJOR	0
#define VERSION_MINOR	1
#define VERSION_PATCH	3
#define VERSION_EXTRA	0


/*
 * Oldest version number that can still be imported
 */
#define OLD_VERSION_MAJOR	0
#define OLD_VERSION_MINOR	1
#define OLD_VERSION_PATCH	1


/*
 * Version of random artifact code.
 */
#define RANDART_VERSION	62

/*
 * Number of grids in each block (vertically)
 * Probably hard-coded to 11, see "generate.c"
 */
#define BLOCK_HGT	11

/*
 * Number of grids in each block (horizontally)
 * Probably hard-coded to 11, see "generate.c"
 */
#define BLOCK_WID	11


/*
 * Number of grids in each panel (vertically)
 * Must be a multiple of BLOCK_HGT
 */
#define PANEL_HGT	11

/*since dungeon generation uses PANEL wid to generate dungeons,
 *the width there can't be dependent on bigtile mode.
 */

#define PANEL_WID_FIXED	33
/*
 * Number of grids in each panel (horizontally)
 * Must be a multiple of BLOCK_WID
 */
#define PANEL_WID	(use_bigtile ? 16 : PANEL_WID_FIXED)



#define ROW_MAP			1
#define COL_MAP			13


/*
 * Number of grids in each screen (vertically)
 * Must be a multiple of PANEL_HGT (at least 2x)
 */
#define SCREEN_HGT	(Term->hgt - ROW_MAP - 1)

/*
 * Number of grids in each screen (horizontally)
 * Must be a multiple of PANEL_WID (at least 2x)
 */
#define SCREEN_WID	((Term->wid - COL_MAP - 1) / (use_bigtile ? 2 : 1))


/*
 * Number of grids in each dungeon (horizontally)
 * Must be a multiple of PANEL_HGT
 * Must be less or equal to 256
 */
#define MAX_DUNGEON_HGT		66

/*
 * Number of grids in each dungeon (vertically)
 * Must be a multiple of PANEL_WID
 * Must be less or equal to 256
 */
#define MAX_DUNGEON_WID		198

/*
 * Number of rooms to attempt to generate in dungeon.
 *
 */
#define DUN_ROOMS	50

/*
 * Maximum amount of Angband windows.
 */
#define ANGBAND_TERM_MAX 8


/*
 * Total number of stores (see "store.c", etc)
 */
#define MAX_STORES	10

/*
 * Total number of stores (see "store.c", etc)
 */
#define MAX_INVENTORY_HOME	24


/*
 * Store index definitions (see "store.c", etc)
 */
#define STORE_GENERAL	0
#define STORE_ARMOR		1
#define STORE_WEAPON	2
#define STORE_TEMPLE	3
#define STORE_ALCHEMY	4
#define STORE_MAGIC		5
#define STORE_B_MARKET	6
#define STORE_HOME		7
#define STORE_GUILD		8
#define STORE_BOOKSHOP	9

/*
 * Maximum number of player "sex" types (see "table.c", etc)
 */
#define MAX_SEXES            2

/*
 * Player sex constants (hard-coded by save-files, arrays, etc)
 */
#define SEX_FEMALE		0
#define SEX_MALE		1



/*
 * Maximum amount of starting equipment
 */
#define MAX_START_ITEMS	200


/*
 * Number of tval/min-sval/max-sval slots per ego_item
 */
#define EGO_TVALS_MAX 3

/*
 * Maximum number of high scores in the high score file
 */
#define MAX_HISCORES	100


/*
 * Maximum dungeon level.  The player can never reach this level
 * in the dungeon, and this value is used for various calculations
 * involving object and monster creation.  It must be at least 100.
 * Setting it below 128 may prevent the creation of some objects.
 */
#define MAX_DEPTH	128


/*
 * Maximum size of the "view" array (see "cave.c")
 * Note that the "view radius" will NEVER exceed 20, and even if the "view"
 * was octagonal, we would never require more than 1520 entries in the array.
 */
#define VIEW_MAX 1536

/*
 * Maximum size of the "temp" array (see "cave.c")
 * Note that we must be as large as "VIEW_MAX" for proper functioning
 * of the "update_view()" function, and we must also be as large as the
 * largest illuminatable room, but no room is larger than 800 grids.  We
 * must also be large enough to allow "good enough" use as a circular queue,
 * to calculate monster flow, but note that the flow code is "paranoid".
 */
#define TEMP_MAX 1536

/*
 * Maximum size of the "dyna_g" array.
 */
#define DYNA_MAX 1536

/* Flags for the "dynamic_grid_type" data type */
#define DF1_OCCUPIED 0x01	/* The entry is being used */
#define DF1_NEW_BORN 0x02	/* The dynamic feature was created recently */



/* The flows */
enum {
       FLOW_NO_DOORS = 0,
       FLOW_PASS_DOORS,
       FLOW_FLYING,
       /* This one is a copy of FLOW_FLYING without support for doors */
       FLOW_FLYING_NO_DOORS,
       FLOW_PASS_WALLS,
       FLOW_LAVA,
       FLOW_ICE,
       FLOW_OIL,
       FLOW_FIRE,
       FLOW_SAND,
       FLOW_FOREST,
       FLOW_WATER,
       FLOW_ACID,
       FLOW_MUD,
       /* These ones are copies of the elemental flows without support for doors */
       FLOW_LAVA_NO_DOORS,
       FLOW_ICE_NO_DOORS,
       FLOW_OIL_NO_DOORS,
       FLOW_FIRE_NO_DOORS,
       FLOW_SAND_NO_DOORS,
       FLOW_FOREST_NO_DOORS,
       FLOW_WATER_NO_DOORS,
       FLOW_ACID_NO_DOORS,
       FLOW_MUD_NO_DOORS,
       MAX_FLOWS
};

#define NEED_FLOW		MAX_FLOWS

#define ELEM_FLOW_BASE FLOW_LAVA
#define ELEM_FLOW_TAIL FLOW_MUD

#define ELEM_FLOW_BASE_NO_DOORS FLOW_LAVA_NO_DOORS
#define ELEM_FLOW_TAIL_NO_DOORS FLOW_MUD_NO_DOORS

#define ELEMENT_LAVA 	(0x00000001L)
#define ELEMENT_ICE  	(0x00000002L)
#define ELEMENT_OIL   	(0x00000004L)
#define ELEMENT_FIRE   	(0x00000008L)
#define ELEMENT_SAND 	(0x00000010L)
#define ELEMENT_FOREST	(0x00000020L)
#define ELEMENT_WATER 	(0x00000040L)
#define ELEMENT_ACID   	(0x00000080L)
#define ELEMENT_MUD 	(0x00000100L)

#define ELEM_BASE ELEMENT_LAVA
#define ELEM_TAIL ELEMENT_MUD


#define TERRAIN_MASK (ELEMENT_LAVA | ELEMENT_ICE | ELEMENT_OIL | ELEMENT_FIRE | \
	  ELEMENT_SAND | ELEMENT_FOREST | ELEMENT_WATER | ELEMENT_ACID | ELEMENT_MUD)

/*
 * These are shortcuts to the multi-element terrain features.
 * Use with care, there aren't specific flows to support them.
 */
#define ELEMENT_BWATER (ELEMENT_LAVA | ELEMENT_WATER)
#define ELEMENT_BMUD (ELEMENT_LAVA | ELEMENT_MUD)

/*
 * Maximum distance from the character to store flow (noise) information
 */
#define FLOW_LENGTH_FULL   55

#define FLOW_LENGTH_PARTIAL   5

#define BASE_FLOW_CENTER 10000

#define BASE_FLOW_MAX	 35000

#define MAX_DISTANCE_BETWEEN_UPDATES 12



#ifdef MONSTER_SMELL
/*
 * Character turns it takes for smell to totally dissipate
 */
#define SMELL_STRENGTH   50

#endif /*MONSTER_SMELL*/

#define ENERGY_TO_MOVE  	200
#define BASE_ENERGY_MOVE 	100
#define BASE_ENERGY_FLYING 	BASE_ENERGY_MOVE

/*
 * OPTION: Maximum number of macros (see "util.c")
 * Default: assume at most 256 macros are used
 */
#define MACRO_MAX	256

/*
 * OPTION: Maximum number of "quarks" (see "util.c")
 * Default: assume at most 512 different inscriptions are used
 */
#define QUARK_MAX	512

/*
 * OPTION: Maximum number of autoinscriptions(see "object1.c")
 */
#define AUTOINSCRIPTIONS_MAX 216

/*
 * OPTION: Maximum number of messages to remember (see "util.c")
 * Default: assume maximal memorization of 2048 total messages
 */
#define MESSAGE_MAX	2048

/*
 * OPTION: Maximum space for the message text buffer (see "util.c")
 * Default: assume that each of the 2048 messages is repeated an
 * average of three times, and has an average length of 48
 */
#define MESSAGE_BUF	32768


/*
 * Maximum value storable in a "byte" (hard-coded)
 */
#define MAX_UCHAR       255

/*
 * Maximum value storable in a "s16b" (hard-coded)
 */
#define MAX_SHORT       	32767

/*
 * Maximum value storable in a "u16b" (hard-coded)
 */
#define MAX_SHORT_UNSIGNED	65535

/*
 * Store constants
 */
#define STORE_INVEN_MAX	24		/* Max number of discrete objs in inven */
#define STORE_OBJ_LEVEL	5		/* Magic Level for normal stores */
#define STORE_TURNOVER	12		/* Normal shop turnover, per day */
#define STORE_MIN_KEEP	6		/* Min slots to "always" keep full */
#define STORE_MAX_KEEP	18		/* Max slots to "always" keep full */
#define STORE_SHUFFLE	25		/* 1/Chance (per day) of an owner changing */
#define STORE_TURNS		1000	/* Number of turns between turnovers */

/*
 * Misc constants
 */
#define TOWN_DAWN		10000	/* Number of turns from dawn to dawn XXX */
#define BREAK_GLYPH		400		/* Rune of protection resistance */
#define BTH_PLUS_ADJ    3       /* Adjust BTH per plus-to-hit */
#define MON_MULT_ADJ	8		/* High value slows multiplication */
#define QUEST_TURNS	    1200	/* Number of turns between quest failure checks */
#define MON_DRAIN_LIFE	2		/* Percent of player exp drained per hit */
#define USE_DEVICE      3		/* x> Harder devices x< Easier devices */
#define INTEREST_OFFSET 10              /* Amount of levels OOD before a history is interesting */


/*
 * Percentage of maximum noise you can make just walking around, given a
 * stealth of zero.
 */
#define WAKEUP_ADJ      30



/*
 * There is a 1/20 (5%) chance of inflating the requested object_level
 * during the creation of an object (see "get_obj_num()" in "object.c").
 * Lower values yield better objects more often.
 */
#define GREAT_OBJ	20

/*
 * There is a 1/20 (5%) chance that ego-items with an inflated base-level are
 * generated when an object is turned into an ego-item (see make_ego_item()
 * in object2.c). As above, lower values yield better ego-items more often.
 */
#define GREAT_EGO	20


/*
 * Refueling constants
 */
#define FUEL_TORCH	1000	/* Maximum amount of fuel in a torch */
#define FUEL_LAMP	5000   /* Maximum amount of fuel in a lantern */


/*
 * More maximum values
 */
#define MAX_SIGHT	20	/* Maximum view distance */
#define MAX_RANGE	20	/* Maximum range (spells, etc) */



/*
 * There is a 1/160 chance per round of creating a new monster
 */
#define MAX_M_ALLOC_CHANCE	160

/*
 * Normal levels get at least 14 monsters
 */
#define MIN_M_ALLOC_LEVEL	14

/*
 * The town starts out with 4 residents during the day
 */
#define MIN_M_ALLOC_TD		4

/*
 * The town starts out with 8 residents during the night
 */
#define MIN_M_ALLOC_TN		8


/*
 * A monster can only "multiply" (reproduce) if there are fewer than 100
 * monsters on the level capable of such spontaneous reproduction.  This
 * is a hack which prevents the "mon_list[]" array from exploding due to
 * reproducing monsters.  Messy, but necessary.
 */
#define MAX_REPRO	100


/*
 * Player constants
 */
#define PY_MAX_EXP	99999999L	/* Maximum exp */
#define PY_MAX_GOLD	999999999L	/* Maximum gold */
#define PY_MAX_LEVEL	36		/* Maximum level */

/*
 * Player "food" crucial values
 */
#define PY_FOOD_MAX		15000	/* Food value (Bloated) */
#define PY_FOOD_FULL	10000	/* Food value (Normal) */
#define PY_FOOD_ALERT	2000	/* Food value (Hungry) */
#define PY_FOOD_WEAK	1000	/* Food value (Weak) */
#define PY_FOOD_FAINT	500		/* Food value (Fainting) */
#define PY_FOOD_STARVE	100		/* Food value (Starving) */

/*
 * Player regeneration constants
 */
#define PY_REGEN_NORMAL		197		/* Regen factor*2^16 when full */
#define PY_REGEN_WEAK		98		/* Regen factor*2^16 when weak */
#define PY_REGEN_FAINT		33		/* Regen factor*2^16 when fainting */
#define PY_REGEN_HPBASE		1442	/* Min amount hp regen*2^16 */
#define PY_REGEN_MNBASE		524		/* Min amount mana regen*2^16 */


/*Player Native Flags*/
#define P_NATIVE_LAVA 	ELEMENT_LAVA
#define P_NATIVE_ICE 	ELEMENT_ICE
#define P_NATIVE_OIL 	ELEMENT_OIL
#define P_NATIVE_FIRE 	ELEMENT_FIRE
#define P_NATIVE_SAND 	ELEMENT_SAND
#define P_NATIVE_FOREST ELEMENT_FOREST
#define P_NATIVE_WATER 	ELEMENT_WATER
#define P_NATIVE_ACID 	ELEMENT_ACID
#define P_NATIVE_MUD 	ELEMENT_MUD

#define NUM_NATIVE 9

/*
 * Maximum number of players spells
 */
#define PY_MAX_SPELLS 65

/*
 * Number of spells per book
 */
#define SPELLS_PER_BOOK 6

#define BOOKS_PER_REALM 9
#define MAGE_REALM		0
#define PRIEST_REALM	1
#define DRUID_REALM		2

/*Define the spell slot for the various classes*/
#define SPELL_STAT_SLOT \
		((cp_ptr->spell_book == TV_DRUID_BOOK) ? \
		 ((p_ptr->stat_ind[A_INT] + p_ptr->stat_ind[A_WIS]) / 2) : \
		 ((cp_ptr->spell_book == TV_MAGIC_BOOK) ? p_ptr->stat_ind[A_INT] : p_ptr->stat_ind[A_WIS]))

/* New spells */

/* book 0 */
#define NEWSPELL_BLESS                  0
#define NEWSPELL_CLW                    1
#define NEWSPELL_MAGIC_MISSILE          2
#define NEWSPELL_LIGHT                  3
#define NEWSPELL_DETECT_ANIMALS         4
#define NEWSPELL_SLEEP                  5

/* book 1 */
#define NEWSPELL_CREATE_FOOD		    6
#define NEWSPELL_DETECT_EVIL            7
#define NEWSPELL_BARKSKIN               8
#define NEWSPELL_SLOW                   9
#define NEWSPELL_REMOVE_FEAR	 		10
#define NEWSPELL_FIRE_BOLT              11

/* book 2 */
#define NEWSPELL_MAGELIGHT              12
#define NEWSPELL_REMOVE_CURSE			13
#define NEWSPELL_DETECT_TREASURE        14
#define NEWSPELL_CSW                    15
#define NEWSPELL_CONFUSION   			16
#define NEWSPELL_MANA_BOLT              17

/* book 3 */
#define NEWSPELL_IDENTIFY               18
#define NEWSPELL_DETECT_TRAPS_AND_DOORS 19
#define NEWSPELL_PHASE_DOOR             20
#define NEWSPELL_RESIST_HEAT_AND_COLD   21
#define NEWSPELL_FROST_BOLT  			22
#define NEWSPELL_DETECT_MONSTERS        23

/* book 4 */
#define NEWSPELL_RESTORE_LIFE_LEVELS    24
#define NEWSPELL_TELEPORT_AWAY          25
#define NEWSPELL_MASS_IDENTIFY          26
#define NEWSPELL_RESIST_POISON          27
#define NEWSPELL_CCW					28
#define NEWSPELL_FIREBALL               29

/* book 5 */
#define NEWSPELL_STARIDENTIFYSTAR       30
#define NEWSPELL_STARREMOVE_CURSESTAR   31
#define NEWSPELL_SEE_INVISIBLE          32
#define NEWSPELL_DETECT_OBJECTS         33
#define NEWSPELL_PORTAL      			34
#define NEWSPELL_ACID_BALL              35

/* book 6 */
#define NEWSPELL_SANDSTORM		        36
#define NEWSPELL_MAGIC_MAPPING			37
#define NEWSPELL_NEUTRALIZE_POISON      38
#define NEWSPELL_ENCHANT_ARMOR          39
#define NEWSPELL_STONE_TO_MUD			40
#define NEWSPELL_CREATE_MISSILES        41

/* book 7 */
#define NEWSPELL_DETECTION              42
#define NEWSPELL_TELEPORTATION          43
#define NEWSPELL_HEALING                44
#define NEWSPELL_MANA_STORM             45
#define NEWSPELL_PROTECTION_FROM_EVIL   46
#define NEWSPELL_GLOBE_OF_INVULNERABILITY 47

/* book 8 */
#define NEWSPELL_CREATE_STAIRS          48
#define NEWSPELL_RESTORATION            49
#define NEWSPELL_HASTE_SELF             50
#define NEWSPELL_RIFT                   51
#define NEWSPELL_RESISTANCE  			52
#define NEWSPELL_NATIVITY               53

#define N_NEWSPELLS                     54

/* and the schools */
#define SCHOOL_DETECTION                0
#define SCHOOL_IDENTIFICATION           1
#define SCHOOL_HEALING                  2
#define SCHOOL_BLESSINGS                3
#define SCHOOL_ENCHANTMENT              4
#define SCHOOL_BATTLE                   5
#define SCHOOL_TELEPORTATION            6
#define SCHOOL_RESISTANCE               7
#define SCHOOL_FIRE_AND_LIGHT           8
#define SCHOOL_BUFFS                    9
#define SCHOOL_CONJURATIONS             10
#define SCHOOL_FORCE                    11
#define SCHOOL_NATURE                   12
#define SCHOOL_TIME                     13

#define N_SCHOOLS                       14

/*Magic for Beginners*/
#define SPELL_MAGIC_MISSILE             0
#define SPELL_DETECT_MONSTERS           1
#define SPELL_PHASE_DOOR                2
#define SPELL_LIGHT_AREA                3
#define SPELL_TREASURE_DETECTION        4
#define SPELL_CURE_LIGHT_WOUNDS         5
#define SPELL_OBJECT_DETECTION          6
#define SPELL_FIND_TRAPS_DOORS          7
#define SPELL_STINKING_CLOUD            8

/* Conjurings and Tricks */
#define SPELL_CONFUSE_MONSTER           9
#define SPELL_LIGHTNING_BOLT            10
#define SPELL_TRAP_DOOR_DESTRUCTION     11
#define SPELL_CURE_POISON               12
#define SPELL_SLEEP_MONSTER             13
#define SPELL_TELEPORT_SELF             14
#define SPELL_SPEAR_OF_LIGHT            15
#define SPELL_FROST_BOLT                16
#define SPELL_WONDER                    17

/* Incantations and Illusions */
#define SPELL_SATISFY_HUNGER            18
#define SPELL_RECHARGE_ITEM_I           19
#define SPELL_TURN_STONE_TO_MUD         20
#define SPELL_FIRE_BOLT                 21
#define SPELL_POLYMORPH_OTHER           22
#define SPELL_IDENTIFY                  23
#define SPELL_DETECT_INVISIBLE          24
#define SPELL_ACID_BOLT                 25
#define SPELL_SLOW_MONSTER              26

/* Sorcery and Evocations */
#define SPELL_FROST_BALL                27
#define SPELL_TELEPORT_OTHER            28
#define SPELL_HASTE_SELF                29
#define SPELL_MASS_SLEEP                30
#define SPELL_FIRE_BALL                 31
#define SPELL_DETECT_ENCHANTMENT        32
#define SPELL_MASS_IDENTIFY				64

/* Resistances of Scarabtarices */
#define SPELL_RESIST_COLD               33
#define SPELL_RESIST_FIRE               34
#define SPELL_RESIST_POISON             35
#define SPELL_RESISTANCE                36
#define SPELL_SHIELD                    37

/* Raal's Tome of Destruction */
#define SPELL_SHOCK_WAVE                38
#define SPELL_EXPLOSION                 39
#define SPELL_CLOUD_KILL                40
#define SPELL_ACID_BALL                 41
#define SPELL_ICE_STORM                 42
#define SPELL_METEOR_SWARM              43
#define SPELL_RIFT                      44

/* Mordenkainen's Escapes */
#define SPELL_DOOR_CREATION             45
#define SPELL_STAIR_CREATION            46
#define SPELL_TELEPORT_LEVEL            47
#define SPELL_WORD_OF_RECALL            48
#define SPELL_RUNE_OF_PROTECTION        49
#define SPELL_FLIGHT					50

/* Tenser's transformations */
#define SPELL_BERSERKER                 51
#define SPELL_ENCHANT_ARMOR             52
#define SPELL_ENCHANT_WEAPON            53
#define SPELL_RECHARGE_ITEM_II          54
#define SPELL_ELEMENTAL_BRAND           55


/* Kelek's Grimoire of Power */
#define SPELL_EARTHQUAKE                56
#define SPELL_BEDLAM                    57
#define SPELL_REND_SOUL                 58
#define SPELL_BANISHMENT                59
#define SPELL_WORD_OF_DESTRUCTION       60
#define SPELL_MASS_BANISHMENT           61
#define SPELL_CHAOS_STRIKE              62
#define SPELL_MANA_STORM                63

/* Beginners Handbook */
#define PRAYER_DETECT_EVIL              0
#define PRAYER_CURE_LIGHT_WOUNDS        1
#define PRAYER_BLESS                    2
#define PRAYER_REMOVE_FEAR              3
#define PRAYER_CALL_LIGHT               4
#define PRAYER_FIND_TRAPS_DOORS_STAIRS  5
#define PRAYER_BOLT_OF_DRAINING	        6
#define PRAYER_SLOW_POISON              7

/* Words of Wisdom */
#define PRAYER_SCARE_MONSTER            8
#define PRAYER_PORTAL                   9
#define PRAYER_CURE_SERIOUS_WOUNDS     10
#define PRAYER_CHANT                   11
#define PRAYER_SANCTUARY               12
#define PRAYER_SATISFY_HUNGER          13
#define PRAYER_REMOVE_CURSE            14
#define PRAYER_RESIST_HEAT_COLD        15

/* Chants and Blessings */
#define PRAYER_NEUTRALIZE_POISON       16
#define PRAYER_ORB_OF_DRAINING         17
#define PRAYER_CURE_CRITICAL_WOUNDS    18
#define PRAYER_SENSE_INVISIBLE         19
#define PRAYER_PROTECTION_FROM_EVIL    20
#define PRAYER_EARTHQUAKE              21
#define PRAYER_SENSE_SURROUNDINGS      22
#define PRAYER_CURE_MORTAL_WOUNDS      23
#define PRAYER_TURN_UNDEAD             24

/* Exorcism and Dispelling */
#define PRAYER_PRAYER                  25
#define PRAYER_DISPEL_UNDEAD           26
#define PRAYER_HEAL                    27
#define PRAYER_DISPEL_EVIL             28
#define PRAYER_GLYPH_OF_WARDING        29
#define PRAYER_HOLY_WORD               30

/* Godly Insights */
#define PRAYER_DETECT_MONSTERS         31
#define PRAYER_DETECTION               32
#define PRAYER_PERCEPTION              33
#define PRAYER_PROBING                 34
#define PRAYER_CLAIRVOYANCE            35
#define PRAYER_MASS_IDENTIFY		   58

/* Purifications and Healing */
#define PRAYER_CURE_SERIOUS_WOUNDS2    36
#define PRAYER_CURE_MORTAL_WOUNDS2     37
#define PRAYER_HEALING                 38
#define PRAYER_RESTORATION             39
#define PRAYER_REMEMBRANCE             40

/* Wrath of God */
#define PRAYER_DISPEL_UNDEAD2          41
#define PRAYER_DISPEL_EVIL2            42
#define PRAYER_BANISH_EVIL             43
#define PRAYER_WORD_OF_DESTRUCTION     44
#define PRAYER_ANNIHILATION            45

/* Holy Infusions */
#define PRAYER_UNBARRING_WAYS          46
#define PRAYER_RECHARGING              47
#define PRAYER_DISPEL_CURSE            48
#define PRAYER_ENCHANT_WEAPON          49
#define PRAYER_ENCHANT_ARMOUR          50
#define PRAYER_ELEMENTAL_BRAND         51

/* Ethereal openings */
#define PRAYER_BLINK                   52
#define PRAYER_TELEPORT_SELF           53
#define PRAYER_TELEPORT_OTHER          54
#define PRAYER_TELEPORT_LEVEL          55
#define PRAYER_WORD_OF_RECALL          56
#define PRAYER_ALTER_REALITY           57


/* Call of the Wild */
#define DRUID_ACID_BOLT                  0
#define DRUID_CURE_LIGHT_WOUNDS          1
#define DRUID_DETECT_LIFE              	 2
#define DRUID_CALL_LIGHT               	 3
#define DRUID_FIND_TRAPS_DOORS         	 4
#define DRUID_SLOW_POISON                5
#define DRUID_POISON_CLOUD             	 6
#define DRUID_LIGHTNING_BEAM           	 7
#define DRUID_BARKSKIN		             8

/* Environmental Adjurations */
#define DRUID_NOURISHMENT	             9
#define DRUID_TURN_STONE_TO_MUD        	10
#define DRUID_FROST_BEAM               	11
#define DRUID_CURE_POISON              	12
#define DRUID_TRAP_DOOR_DESTRUCTION    	13
#define DRUID_RESIST_HEAT_COLD         	14
#define DRUID_SPEAR_OF_LIGHT           	15
#define DRUID_FIRE_BEAM               	16
#define DRUID_STERILIZE					17

/* Commanding Nature */
#define DRUID_EXTINGUISH		       	18
#define DRUID_CLEAR_AREA		       	19
#define DRUID_CURE_CRITICAL_WOUNDS    	20
#define DRUID_IDENTIFY             		21
#define DRUID_CLEAR_AIR              	22
#define DRUID_DETECT_TERRAIN	      	23
#define DRUID_CURE_MORTAL_WOUNDS      	24
#define DRUID_BEAM_LIGHT	         	25
#define DRUID_LIFE_DRAIN_BURST		 	26

/* Lore of Engagement */
#define DRUID_ELEMENTAL_BRAND          	28
#define DRUID_FROST_BALL              	29
#define DRUID_HEAL                    	30
#define DRUID_DISPEL_LIFE				31
#define DRUID_FIRE_BALL               	32
#define DRUID_DRAIN_LIFE_ARC			33
#define DRUID_MASS_IDENTIFY				34

/* Radagast's Protections */
#define DRUID_RESIST_ELEC               35
#define DRUID_RESIST_ACID               36
#define DRUID_RESIST_POISON             37
#define DRUID_RESISTANCE                38
#define DRUID_HASTE_SELF          		39
#define DRUID_GLACIER			        40

/* Melian's Reformations */
#define DRUID_FLICKER			    	41
#define DRUID_WORD_OF_RECALL	     	42
#define DRUID_HEALING                 	43
#define DRUID_RESTORATION             	44
#define DRUID_REMEMBRANCE             	45

/* Arda's Habitats */
#define DRUID_NATIVE_SAND				46
#define DRUID_NATIVE_MUD				47
#define DRUID_NATIVE_WATER				48
#define DRUID_NATIVE_OIL				49
#define DRUID_NATIVE_LAVA				50

/* Natural Infusions */
#define DRUID_DISPEL_CURSE              52
#define DRUID_RECHARGE_ITEM             53
#define DRUID_BRAND_AMMUNITION          54
#define DRUID_ENCHANT_ARMOUR            55
#define DRUID_BRAND_WEAPON              56

/* Nature's Fury */
#define DRUID_WATER_BALL				58
#define DRUID_SANDSTORM					59
#define DRUID_ICICLE					60
#define DRUID_GEYSER					61
#define DRUID_BMUDBALL					62
#define DRUID_LAVA_BALL					63


/*
 * Flags for player_type.spell_flags[]
 */
#define PY_SPELL_LEARNED    0x01 /* Spell has been learned */
#define PY_SPELL_WORKED     0x02 /* Spell has been successfully tried */
#define PY_SPELL_FORGOTTEN  0x04 /* Spell has been forgotten */
#define PY_SPELL_IRONMAN	0x08 /* Spell is for ironman games only. */


/*
 * Maximum number of "normal" pack slots, and the index of the "overflow"
 * slot, which can hold an item, but only temporarily, since it causes the
 * pack to "overflow", dropping the "last" item onto the ground.  Since this
 * value is used as an actual slot, it must be less than "INVEN_WIELD" (below).
 * Note that "INVEN_PACK" is probably hard-coded by its use in savefiles, and
 * by the fact that the screen can only show 23 items plus a one-line prompt.
 */
#define INVEN_PACK		23

/*
 * Indexes used for various "equipment" slots (hard-coded by savefiles, etc).
 */
#define INVEN_WIELD	24
#define INVEN_BOW       25
#define INVEN_LEFT      26
#define INVEN_RIGHT     27
#define INVEN_NECK      28
#define INVEN_LITE      29
#define INVEN_BODY      30
#define INVEN_OUTER     31
#define INVEN_ARM       32
#define INVEN_HEAD      33
#define INVEN_HANDS     34
#define INVEN_FEET      35

/* The end of the equipment (old INVEN_TOTAL, before quiver) */
#define END_EQUIPMENT	36

/*
 * Blank line between equipment and quiver
 */
#define INVEN_BLANK	36

/*
 * First slot of the quiver
 */
#define INVEN_QUIVER	37

/*
 * The number of quiver slots
 */
#define MAX_QUIVER	10

/*
 * The end of the quiver
 */
#define END_QUIVER	(INVEN_QUIVER + MAX_QUIVER)

/*
 * Total number of inventory slots (hard-coded).
 */
#define INVEN_TOTAL	END_QUIVER

/*
 * Used to determine if a slot is a quiver slot.
 */
#define IS_QUIVER_SLOT(slot) \
(((slot) >= INVEN_QUIVER) && ((slot) < INVEN_QUIVER + MAX_QUIVER))

/*
 * defines disturbance behavior. (All moves, or visible, passwall, killwall.)
 */
#define DISTURB(M_ptr, R_ptr) \
	((M_ptr)->ml && (disturb_move || (disturb_near && \
		(((M_ptr)->mflag & (MFLAG_VIEW)) || \
		(((R_ptr)->flags2 & (RF2_PASS_WALL | RF2_KILL_WALL)) && \
			(cave_cost[FLOW_PASS_WALLS][(M_ptr)->fy][(M_ptr)->fx] > 0))))))



/*
 * A "stack" of items is limited to less than 100 items (hard-coded).
 */
#define MAX_STACK_SIZE			100


/*
 * Maximum number of objects allowed in a single dungeon grid.
 *
 * The main-screen has a minimum size of 24 rows, so we can always
 * display 23 objects + 1 header line.
 */
#define MAX_FLOOR_STACK			23


/*
 * Indexes of the various "stats" (hard-coded by savefiles, etc).
 */
#define A_STR	0
#define A_INT	1
#define A_WIS	2
#define A_DEX	3
#define A_CON	4
#define A_AGI	5
#define A_STE	6
#define A_PER	7
#define A_LUC	8

/*
 * Total number of stats.
 */
#define A_MAX	9


/*** Screen Locations ***/

/*
 * Some screen locations for various display routines
 * Currently, row 8 and 15 are the only "blank" rows.
 * That leaves a "border" around the "stat" values.
 */

#define ROW_RACE		1
#define COL_RACE		0	/* <race name> */

#define ROW_CLASS		2
#define COL_CLASS		0	/* <class name> */

#define ROW_TITLE		3
#define COL_TITLE		0	/* <title> or <mode> */

#define ROW_LEVEL		4
#define COL_LEVEL		0	/* "LEVEL xxxxxx" */

#define ROW_EXP			5
#define COL_EXP			0	/* "EXP xxxxxxxx" */

#define ROW_GOLD		6
#define COL_GOLD		0	/* "AU xxxxxxxxx" */

#define ROW_EQUIPPY		7
#define COL_EQUIPPY		0	/* equippy chars */

#define ROW_STAT		8
#define COL_STAT		0	/* "xxx   xxxxxx" */

#define ROW_RESIST		17
#define COL_RESIST		0	/* "Resistances " */

#define ROW_AC			18
#define COL_AC			0	/* "Cur AC xxxxx" */

#define ROW_HP			19
#define COL_HP			0	/* "HP xxxxxxxxx" */

#define ROW_SP			20
#define COL_SP			0	/* "SP xxxxxxxxx" */

#define ROW_INFO		21
#define COL_INFO		0	/* "xxxxxxxxxxxx" monster health bar*/

#define ROW_MON_MANA	22
#define COL_MON_MANA	0	/* "xxxxxxxxxxxx" monster mana bar*/

#define ROW_CUT			23
#define COL_CUT			0	/* <cut> */

#define ROW_STUN		24
#define COL_STUN		0	/* <stun> */

#define ROW_HUNGRY		(Term->hgt - 1)
#define COL_HUNGRY		0	/* "Weak" / "Hungry" / "Full" / "Gorged" */

#define ROW_BLIND		(Term->hgt - 1)
#define COL_BLIND		7	/* "Blind" */

#define ROW_CONFUSED	(Term->hgt - 1)
#define COL_CONFUSED	13	/* "Confused" */

#define ROW_AFRAID		(Term->hgt - 1)
#define COL_AFRAID		22	/* "Afraid" */

#define ROW_POISONED	(Term->hgt - 1)
#define COL_POISONED	29	/* "Poisoned" */

#define ROW_STATE		(Term->hgt - 1)
#define COL_STATE		38	/* <state> */

#define ROW_SPEED		(Term->hgt - 1)
#define COL_SPEED		49	/* "Slow (-NN)" or "Fast (+NN)" */

#define ROW_STUDY		(Term->hgt - 1)
#define COL_STUDY		60	/* "Study" */

#define ROW_DEPTH		(Term->hgt - 1)
#define COL_DEPTH		71	/* "Lev NNN" / "NNNN ft" */

#define ROW_OPPOSE_ELEMENTS	(Term->hgt - 1)
#define COL_OPPOSE_ELEMENTS	80	/* "Acid Elec Fire Cold Pois Conf" */




/*** General index values ***/

/*used as values for the "object_generation_mode variable*/

#define OB_GEN_MODE_NORMAL		0
#define OB_GEN_MODE_GEN_ST		1
#define OB_GEN_MODE_ARMOURY		2
#define OB_GEN_MODE_WEAPONSMITH	3
#define OB_GEN_MODE_TEMPLE		4
#define OB_GEN_MODE_ALCHEMY		5
#define OB_GEN_MODE_MAGIC_SHOP	6
#define OB_GEN_MODE_BLACK_MARK  7
#define OB_GEN_MODE_BOOKSHOP	8
#define OB_GEN_MODE_CHEST		11
#define OB_GEN_MODE_QUEST		12
#define OB_GEN_STORE_HEAD		1
#define OB_GEN_STORE_TAIL		8
#define OB_GEN_MODE_RANDART		13


#define CHEST_LEVEL			130
#define QUEST_LEVEL			131



/*
 * Quest types
 */
#define QUEST_FIXED			1	/* A fixed quest from quest.txt for a non-unique*/
#define QUEST_FIXED_U		2	/* A fixed quest from quest.txt for a unique*/
#define QUEST_MONSTER		3	/* Kill a non-unique*/
#define QUEST_UNIQUE		4	/* Kill a unique*/
#define QUEST_VAULT			5	/* retrieve a artifact from a vault and return it to the guild*/
#define QUEST_PIT			6	/* clear out an entire monster pit*/
#define QUEST_NEST			7	/* clear out a monster next*/
#define QUEST_THEMED_LEVEL	8	/* clear out an entire level of creatures*/

#define MON_RARE_FREQ	15
#define MON_LESS_FREQ	50

#define QUEST_THEMED_LEVEL_NUM  275


/*
 * Quest reward types
 */
#define REWARD_GOLD			1
#define REWARD_GOOD_ITEM	2
#define REWARD_GREAT_ITEM	3
#define REWARD_TAILORED		4
#define REWARD_RANDART		5
#define REWARD_INC_HP		6
#define REWARD_INC_SPEED	7


/*Quest description Modes*/
#define QMODE_HALF_1 1
#define QMODE_HALF_2 2
#define QMODE_SHORT  3
#define QMODE_FULL   4

/*artifact slot reserved for vault quest artifact*/
#define QUEST_ART_SLOT	z_info->art_norm_max

#define GUILD_QUEST_SLOT	0


/*
 * Legal restrictions for "summon_specific()"
 */
#define SUMMON_ANT	        11
#define SUMMON_SPIDER       12
#define SUMMON_HOUND        13
#define SUMMON_HYDRA        14
#define SUMMON_AINU	        15
#define SUMMON_DEMON        16
#define SUMMON_UNDEAD       17
#define SUMMON_DRAGON       18
/* xxx */
#define SUMMON_HI_DEMON     26
#define SUMMON_HI_UNDEAD    27
#define SUMMON_HI_DRAGON    28
/* xxx */
#define SUMMON_WRAITH       31
#define SUMMON_UNIQUE       32
#define SUMMON_HI_UNIQUE    33
#define SUMMON_KIN          34

#define SUMMON_ANIMAL      50
#define SUMMON_BERTBILLTOM 51
#define SUMMON_THIEF       53

#define SUMMON_INDEX       60


/*
 * Spell types used by project(), and related functions.
 */
#define GF_XXX1			1
#define GF_ARROW        2
#define GF_MISSILE      3
#define GF_MANA         4
#define GF_HOLY_ORB     5
#define GF_LITE_WEAK	6
#define GF_DARK_WEAK	7
#define GF_WATER        8
#define GF_PLASMA       9
#define GF_METEOR       10
#define GF_ICE          11
#define GF_GRAVITY      12
#define GF_INERTIA      13
#define GF_FORCE        14
#define GF_TIME         15
#define GF_ACID         16
#define GF_ELEC         17
#define GF_FIRE         18
#define GF_COLD         19
#define GF_POIS         20
#define GF_STATIC		21
#define GF_LITE         22
#define GF_DARK         23
#define GF_EXTINGUISH	24
#define GF_CONFUSION    25
#define GF_SOUND        26
#define GF_SHARD        27
#define GF_NEXUS        28
#define GF_NETHER       29
#define GF_CHAOS        30
#define GF_DISENCHANT   31
#define GF_CLEAR_AIR	32
#define GF_KILL_WALL	33
#define GF_KILL_DOOR	34
#define GF_KILL_TRAP	35
#define GF_MAKE_WALL	36
#define GF_MAKE_DOOR	37
#define GF_MAKE_TRAP	38
#define GF_STERILIZE	39
#define GF_SAND			40
#define GF_AWAY_UNDEAD	41
#define GF_AWAY_EVIL	42
#define GF_AWAY_ALL		43
#define GF_TURN_UNDEAD	44
#define GF_TURN_EVIL	45
#define GF_TURN_ALL		46
#define GF_DISP_UNDEAD	47
#define GF_DISP_EVIL	48
#define GF_DISP_ALL		49
#define GF_MAKE_WARY	50

#define GF_OLD_CLONE	51
#define GF_OLD_POLY		52
#define GF_OLD_HEAL		53
#define GF_OLD_SPEED	54
#define GF_OLD_SLOW		55
#define GF_OLD_CONF		56
#define GF_OLD_SLEEP	57
#define GF_LIFE_DRAIN	58
#define GF_SPORE		59
#define GF_MASS_IDENTIFY 60
#define GF_BRIDGE       61
#define GF_LAVA  		62
#define GF_BWATER  		63
#define GF_BMUD  		64
#define GF_LOCK_DOOR	92

#define GF_FEATURE		95
#define GF_VAPOUR		96
#define GF_STEAM		97
#define GF_SMOKE		98
#define GF_FOG			99


/*
 * Some constants for the "learn" code.  These generalized from the
 * old DRS constants.
 */
#define LRN_FREE_SAVE     14
#define LRN_MANA          15
#define LRN_ACID          16
#define LRN_ELEC          17
#define LRN_FIRE          18
#define LRN_COLD          19
#define LRN_POIS          20
#define LRN_FEAR_SAVE     21
#define LRN_LITE          22
#define LRN_DARK          23
#define LRN_BLIND         24
#define LRN_CONFU         25
#define LRN_SOUND         26
#define LRN_SHARD         27
#define LRN_NEXUS         28
#define LRN_NETHR         29
#define LRN_CHAOS         30
#define LRN_DISEN         31
#define LRN_SAVE          39
#define LRN_ARCH          40
#define LRN_PARCH         41
#define LRN_ICE           42
#define LRN_PLAS          43
#define LRN_SOUND2        44 /* attacks which aren't resisted, but res sound prevent stun */
#define LRN_STORM         45
#define LRN_WATER         46
#define LRN_NEXUS_SAVE    47 /* Both resist Nexus and Saves apply */
#define LRN_BLIND_SAVE    48 /* Both resist Blind and Saves apply */
#define LRN_CONFU_SAVE    49 /* Both resist Confusion and Saves apply */
#define LRN_DARK_SAVE     50
#define LRN_HOLY_SAVE     51

#define LRN_MAX           60



/*
 * Number of keymap modes
 */
#define KEYMAP_MODES	2

/*
 * Mode for original keyset commands
 */
#define KEYMAP_MODE_ORIG	0

/*
 * Mode for roguelike keyset commands
 */
#define KEYMAP_MODE_ROGUE	1



/*
 * Maximum length of artifact names
 */
#define MAX_LEN_ART_NAME 30

#define S_WORD 26
#define E_WORD S_WORD

/*themed drops*/
#define DROP_TYPE_UNTHEMED				0
#define DROP_TYPE_GOLD					1
#define DROP_TYPE_POTION				2
#define DROP_TYPE_ROD_WAND_TALISMAN		3
#define DROP_TYPE_SCROLL				4
#define DROP_TYPE_SHIELD				5
#define DROP_TYPE_WEAPON				6
#define DROP_TYPE_ARMOR					7
#define DROP_TYPE_BOOTS					8
#define DROP_TYPE_BOW					9
#define DROP_TYPE_CLOAK					10
#define DROP_TYPE_GLOVES				11
#define DROP_TYPE_HAFTED				12
#define DROP_TYPE_HEADGEAR				13
#define DROP_TYPE_JEWELRY				14
#define DROP_TYPE_DRAGON_ARMOR			15
#define DROP_TYPE_CHEST					16
#define DROP_TYPE_DUNGEON_MAGIC_BOOK	17
#define DROP_TYPE_DUNGEON_PRAYER_BOOK	18
#define DROP_TYPE_DUNGEON_DRUID_BOOK	19
#define DROP_TYPE_EDGED					20
#define DROP_TYPE_POLEARM				21
#define DROP_TYPE_DIGGING				22
#define DROP_TYPE_ARROWS				23
#define DROP_TYPE_BOLTS					24
#define DROP_TYPE_SHOT					25


/*** Object "tval" and "sval" codes ***/


/*
 * The values for the "tval" field of various objects.
 *
 * This value is the primary means by which items are sorted in the
 * player inventory, followed by "sval" and "cost".
 *
 * Note that a "BOW" with tval = 19 and sval S = 10*N+P takes a missile
 * weapon with tval = 16+N, and does (xP) damage when so combined.  This
 * fact is not actually used in the source, but it kind of interesting.
 *
 * Note that as of 2.7.8, the "item flags" apply to all items, though
 * only armor and weapons and a few other items use any of these flags.
 */

#define TV_SKELETON      1	/* Skeletons ('s') */
#define TV_BOTTLE		 2	/* Empty bottles ('!') */
#define TV_JUNK          3	/* Sticks, Pottery, etc ('~') */
#define TV_SPIKE         5	/* Spikes ('~') */
#define TV_CHEST         7	/* Chests ('~') */
#define TV_SHOT			16	/* Ammo for slings */
#define TV_ARROW        17	/* Ammo for bows */
#define TV_BOLT         18	/* Ammo for x-bows */
#define TV_BOW          19	/* Slings/Bows/Xbows */
#define TV_DIGGING      20	/* Shovels/Picks */
#define TV_HAFTED       21	/* Priest Weapons */
#define TV_POLEARM      22	/* Axes and Pikes */
#define TV_SWORD        23	/* Edged Weapons */
#define TV_BOOTS        30	/* Boots */
#define TV_GLOVES       31	/* Gloves */
#define TV_HELM         32	/* Helms */
#define TV_CROWN        33	/* Crowns */
#define TV_SHIELD       34	/* Shields */
#define TV_CLOAK        35	/* Cloaks */
#define TV_SOFT_ARMOR   36	/* Soft Armor */
#define TV_HARD_ARMOR   37	/* Hard Armor */
#define TV_DRAG_ARMOR	38	/* Dragon Scale Mail */
#define TV_LITE         39	/* Lites (including Specials) */
#define TV_AMULET       40	/* Amulets (including Specials) */
#define TV_DRAG_SHIELD	41	/* Dragon Scale Shield*/
#define TV_RING         45	/* Rings (including Specials) */
#define TV_TALISMAN     55
#define TV_WAND         65
#define TV_ROD          66
#define TV_SCROLL       70
#define TV_POTION       75
#define TV_FLASK        77
#define TV_FOOD         80
#define TV_MAGIC_BOOK   90
#define TV_PRAYER_BOOK  91
#define TV_DRUID_BOOK	92
#define TV_GOLD         100	/* Gold can only be picked up by players */



/* The "sval" codes for TV_SHOT/TV_ARROW/TV_BOLT */
#define SV_AMMO_LIGHT		0	/* pebbles */
#define SV_AMMO_NORMAL		1	/* shots, arrows, bolts */
#define SV_AMMO_HEAVY		2	/* seeker arrows and bolts */
#define SV_AMMO_SILVER		3	/* silver arrows and bolts */

/* The "sval" codes for TV_BOW (note information in "sval") */
#define SV_SLING			2	/* (x2) */
#define SV_SHORT_BOW		12	/* (x2) */
#define SV_LONG_BOW			13	/* (x3) */
#define SV_LIGHT_XBOW		23	/* (x3) */
#define SV_HEAVY_XBOW		24	/* (x4) */

/* The "sval" codes for TV_DIGGING */
#define SV_SHOVEL			1
#define SV_PICK				4
#define SV_MATTOCK			7

/* The "sval" values for TV_HAFTED */
#define SV_WHIP					2	/* 1d6 */
#define SV_QUARTERSTAFF			3	/* 1d9 */
#define SV_MACE					5	/* 2d4 */
#define SV_BALL_AND_CHAIN		6	/* 2d4 */
#define SV_WAR_HAMMER			8	/* 3d3 */
#define SV_LUCERN_HAMMER		10	/* 2d5 */
#define SV_THROWING_HAMMER		11	/* 2d5 */
#define SV_MORNING_STAR			12	/* 2d6 */
#define SV_FLAIL				13	/* 2d6 */
#define SV_LEAD_FILLED_MACE		15	/* 3d4 */
#define SV_MACE_OF_DISRUPTION	20	/* 5d8 */

/* The "sval" values for TV_POLEARM */
#define SV_SPEAR				2	/* 1d6 */
#define SV_AWL_PIKE				4	/* 1d8 */
#define SV_TRIDENT				5	/* 1d9 */
#define SV_PIKE					8	/* 2d5 */
#define SV_BEAKED_AXE			10	/* 2d6 */
#define SV_BROAD_AXE			11	/* 2d6 */
#define SV_THROWING_AXE			12	/* 2d4 */
#define SV_GLAIVE				13	/* 2d6 */
#define SV_HALBERD				15	/* 3d4 */
#define SV_SCYTHE				17	/* 5d3 */
#define SV_BATTLE_AXE			22	/* 2d8 */
#define SV_GREAT_AXE			25	/* 4d4 */
#define SV_LOCHABER_AXE			28	/* 3d8 */
#define SV_SCYTHE_OF_SLICING	30	/* 8d4 */

/* The "sval" codes for TV_SWORD */
#define SV_BROKEN_DAGGER		1	/* 1d1 */
#define SV_BROKEN_SWORD			2	/* 1d2 */
#define SV_DAGGER				4	/* 1d4 */
#define SV_MAIN_GAUCHE			5	/* 1d5 */
#define SV_RAPIER				7	/* 1d6 */
#define SV_SMALL_SWORD			8	/* 1d6 */
#define SV_SHORT_SWORD			10	/* 1d7 */
#define SV_SABRE				11	/* 1d7 */
#define SV_CUTLASS				12	/* 1d7 */
#define SV_BROAD_SWORD			16	/* 2d5 */
#define SV_LONG_SWORD			17	/* 2d5 */
#define SV_SCIMITAR				18	/* 2d5 */
#define SV_KATANA				20	/* 3d4 */
#define SV_BASTARD_SWORD		21	/* 3d4 */
#define SV_TWO_HANDED_SWORD		25	/* 3d6 */
#define SV_EXECUTIONERS_SWORD	28	/* 4d5 */
#define SV_BLADE_OF_CHAOS		30	/* 6d5 */
#define SV_WARLOCK_SWORD		31	/* 2d7 */

/* The "sval" codes for TV_SHIELD */
#define SV_SMALL_LEATHER_SHIELD		2
#define SV_SMALL_METAL_SHIELD		3
#define SV_LARGE_LEATHER_SHIELD		4
#define SV_LARGE_METAL_SHIELD		5
#define SV_SHIELD_OF_DEFLECTION		10

/* The "sval" codes for TV_HELM */
#define SV_HARD_LEATHER_CAP		2
#define SV_METAL_CAP			3
#define SV_IRON_HELM			5
#define SV_STEEL_HELM			6
#define SV_IRON_CROWN			10
#define SV_GOLDEN_CROWN			11
#define SV_JEWELED_CROWN		12
#define SV_WIZARD_HAT			13

/* The "sval" codes for TV_BOOTS */
#define SV_PAIR_OF_SOFT_LEATHER_BOOTS	2
#define SV_PAIR_OF_HARD_LEATHER_BOOTS	3
#define SV_PAIR_OF_METAL_SHOD_BOOTS		6

/* The "sval" codes for TV_CLOAK */
#define SV_CLOAK					1
#define SV_SHADOW_CLOAK				6
#define SV_DISPLACER_CLOAK			7

/* The "sval" codes for TV_GLOVES */
#define SV_SET_OF_LEATHER_GLOVES	1
#define SV_SET_OF_GAUNTLETS			2
#define SV_SET_OF_CESTI				5

/* The "sval" codes for TV_SOFT_ARMOR */
#define SV_FILTHY_RAG				1
#define SV_ROBE						2
#define SV_SOFT_LEATHER_ARMOR		4
#define SV_SOFT_STUDDED_LEATHER		5
#define SV_HARD_LEATHER_ARMOR		6
#define SV_HARD_STUDDED_LEATHER		7
#define SV_LEATHER_SCALE_MAIL		11
#define SV_TROLL_HIDE				12

/* The "sval" codes for TV_HARD_ARMOR */
#define SV_RUSTY_CHAIN_MAIL			1	/* 14- */
#define SV_METAL_SCALE_MAIL			3	/* 13 */
#define SV_CHAIN_MAIL				4	/* 14 */
#define SV_DOUBLE_CHAIN_MAIL		7	/* 16 */
#define SV_METAL_BRIGANDINE_ARMOUR	9	/* 19 */
#define SV_PARTIAL_PLATE_ARMOUR		12	/* 22 */
#define SV_METAL_LAMELLAR_ARMOUR	13	/* 23 */
#define SV_FULL_PLATE_ARMOUR		15	/* 25 */
#define SV_RIBBED_PLATE_ARMOUR		18	/* 28 */
#define SV_MITHRIL_CHAIN_MAIL		20	/* 28+ */
#define SV_MITHRIL_PLATE_MAIL		25	/* 35+ */
#define SV_ADAMANTITE_PLATE_MAIL	30	/* 40+ */

/* The "sval" codes for TV_DRAG_ARMOR and SHIELDS*/
#define SV_DRAG_YOUNG		1
#define SV_DRAG_MEDIUM		2
#define SV_DRAG_ANCIENT		3
#define SV_DRAG_WYRM		4


/* The "ego" codes for TV_DRAG_ARMOR and TV_DRAG_SHIELD*/
#define EGO_DRAGON_POWER		18
#define EGO_DRAGON_MULTIHUED	19
#define EGO_DRAGON_BALANCE		20
#define EGO_DRAGON_LAW			21
#define EGO_DRAGON_CHAOS		22
#define EGO_DRAGON_GREEN		23
#define EGO_DRAGON_PSEUDO		24
#define EGO_DRAGON_BLACK		25
#define EGO_DRAGON_BLUE			26
#define EGO_DRAGON_WHITE		27
#define EGO_DRAGON_RED			28
#define EGO_DRAGON_BRONZE		29
#define EGO_DRAGON_GOLD			30





/* The sval codes for TV_LITE */
#define SV_LITE_TORCH		0
#define SV_LITE_GALADRIEL	4
#define SV_LITE_ELENDIL		5
#define SV_LITE_THRAIN		6
#define SV_LITE_PALANTIR	7
#define SV_LITE_GEM			8
#define SV_LITE_LANTERN		9
#define SV_LITE_GLOW1		10
#define SV_LITE_GLOW2		11
#define SV_LITE_GLOW3		12
#define SV_LITE_MAGELIGHT	13

/* The "sval" codes for TV_AMULET */
#define SV_AMULET_STEALTH       0
#define SV_AMULET_TELEPORT		1
#define SV_AMULET_ADORNMENT		2
#define SV_AMULET_SLOW_DIGEST	3
#define SV_AMULET_RESIST_ACID	4
#define SV_AMULET_SEARCHING		5
#define SV_AMULET_WISDOM		6
#define SV_AMULET_LUCK   		7
#define SV_AMULET_THE_MAGI		8
#define SV_AMULET_SUSTENANCE	9
#define SV_AMULET_CARLAMMAS		10
#define SV_AMULET_INGWE			11
#define SV_AMULET_DWARVES		12
#define SV_AMULET_ESP			13
#define SV_AMULET_RESIST		14
#define SV_AMULET_REGEN			15
#define SV_AMULET_ELESSAR		16
#define SV_AMULET_EVENSTAR		17
#define SV_AMULET_DEVOTION		18
#define SV_AMULET_WEAPONMASTERY	19
#define SV_AMULET_TRICKERY		20
#define SV_AMULET_INFRAVISION		21
#define SV_AMULET_RESIST_LIGHTNING  22


/* The sval codes for TV_RING */
#define SV_RING_WOE				0
#define SV_RING_AGGRAVATION		1
#define SV_RING_TELEPORTATION	4
/* xxx */
#define SV_RING_SLOW_DIGESTION	6
#define SV_RING_FEATHER_FALL	7
#define SV_RING_RESIST_FIRE		8
#define SV_RING_RESIST_COLD		9
#define SV_RING_SUSTAIN_STRCON	10
#define SV_RING_SUSTAIN_INTWISPER	11
#define SV_RING_SUSTAIN_DEXAGI	12
#define SV_RING_SEARCHING		13
#define SV_RING_PROTECTION		16
#define SV_RING_ACID			17
#define SV_RING_FLAMES			18
#define SV_RING_ICE				19
#define SV_RING_RESIST_POIS		20
#define SV_RING_FREE_ACTION		21
#define SV_RING_SEE_INVIS		22
#define SV_RING_STR				24
#define SV_RING_INT				25
#define SV_RING_DEX				26
#define SV_RING_CON				27
#define SV_RING_ACCURACY		28
#define SV_RING_DAMAGE			29
#define SV_RING_SLAYING			30
#define SV_RING_AGI				31
#define SV_RING_BARAHIR			32
#define SV_RING_TULKAS			33
#define SV_RING_NARYA			34
#define SV_RING_NENYA			35
#define SV_RING_VILYA			36
#define SV_RING_POWER			37
#define SV_RING_LIGHTNING		38
#define SV_RING_RESIST_NETHER	39



/* The "sval" codes for TV_SCROLL */

#define SV_SCROLL_DARKNESS				0
#define SV_SCROLL_AGGRAVATE_MONSTER		1
#define SV_SCROLL_CURSE_ARMOR			2
#define SV_SCROLL_CURSE_WEAPON			3
#define SV_SCROLL_SUMMON_MONSTER		4
#define SV_SCROLL_SUMMON_UNDEAD			5
#define SV_SCROLL_SUMMON_UNIQUE			6
#define SV_SCROLL_TRAP_CREATION			7
#define SV_SCROLL_PHASE_DOOR			8
#define SV_SCROLL_TELEPORT				9
#define SV_SCROLL_IDENTIFY				12
#define SV_SCROLL_STAR_IDENTIFY			13
#define SV_SCROLL_REMOVE_CURSE			14
#define SV_SCROLL_STAR_REMOVE_CURSE		15
#define SV_SCROLL_ENCHANT_ARMOR			16
#define SV_SCROLL_ENCHANT_WEAPON_TO_HIT	17
#define SV_SCROLL_ENCHANT_WEAPON_TO_DAM	18
/* xxx enchant missile? */
#define SV_SCROLL_STAR_ENCHANT_ARMOR	20
#define SV_SCROLL_STAR_ENCHANT_WEAPON	21
#define SV_SCROLL_MASS_SLEEP			22
#define SV_SCROLL_MASS_CONF				23
#define SV_SCROLL_LIGHT					24
#define SV_SCROLL_MAPPING				25
#define SV_SCROLL_DETECT_GOLD			26
#define SV_SCROLL_DETECT_ITEM			27
#define SV_SCROLL_DETECT_TRAP			28
#define SV_SCROLL_DETECT_DOOR			29
#define SV_SCROLL_DETECT_INVIS			30
/* xxx (detect evil?) */
#define SV_SCROLL_SATISFY_HUNGER		32
#define SV_SCROLL_BLESSING				33
#define SV_SCROLL_HOLY_CHANT			34
#define SV_SCROLL_HOLY_PRAYER			35
#define SV_SCROLL_MONSTER_CONFUSION		36
#define SV_SCROLL_PROTECTION_FROM_EVIL	37
#define SV_SCROLL_RUNE_OF_PROTECTION	38
#define SV_SCROLL_TRAP_DOOR_DESTRUCTION	39
#define SV_SCROLL_CREATE_MONSTER_TRAP	40
#define SV_SCROLL_STAR_DESTRUCTION		41
#define SV_SCROLL_DISPEL_UNDEAD			42
#define SV_SCROLL_CREATE_RANDART		43
#define SV_SCROLL_BANISHMENT			44
#define SV_SCROLL_MASS_BANISHMENT		45
#define SV_SCROLL_ACQUIREMENT			46

/* The "sval" codes for TV_POTION */
#define SV_POTION_WATER				0
#define SV_POTION_APPLE_JUICE		1
#define SV_POTION_SLIME_MOLD		2
/* xxx (fixed color) */
#define SV_POTION_SLOWNESS			4
#define SV_POTION_SALT_WATER		5
#define SV_POTION_POISON			6
#define SV_POTION_BLINDNESS			7
/* xxx */
#define SV_POTION_CONFUSION			9
/* xxx */
#define SV_POTION_SLEEP				11
/* xxx */
#define SV_POTION_LOSE_MEMORIES		13
#define SV_POTION_DRAIN_MANA		14
#define SV_POTION_RUINATION			15
#define SV_POTION_EXCH_1			16
#define SV_POTION_EXCH_2			17
#define SV_POTION_EXCH_3 			18
#define SV_POTION_EXCH_4			19
#define SV_POTION_EXCH_5			20
#define SV_POTION_EXCH_6			64
#define SV_POTION_EXCH_7			65
#define SV_POTION_EXCH_8			66
#define SV_POTION_EXCH_9			67
#define SV_POTION_CLARITY			22
#define SV_POTION_DISAPPEARANCE		23
#define SV_POTION_INFRAVISION		24
#define SV_POTION_DETECT_INVIS		25
#define SV_POTION_SLOW_POISON		26
#define SV_POTION_CURE_POISON		27
#define SV_POTION_BOLDNESS			28
#define SV_POTION_SPEED				29
#define SV_POTION_RESIST_HEAT		30
#define SV_POTION_RESIST_COLD		31
#define SV_POTION_HEROISM			32
#define SV_POTION_BERSERK_STRENGTH	33
#define SV_POTION_CURE_LIGHT		34
#define SV_POTION_CURE_SERIOUS		35
#define SV_POTION_CURE_CRITICAL		36
#define SV_POTION_HEALING			37
#define SV_POTION_STAR_HEALING		38
#define SV_POTION_LIFE				39
#define SV_POTION_RESTORE_MANA		40
#define SV_POTION_RESTORE_EXP		41
#define SV_POTION_RES_STR			42
#define SV_POTION_RES_INT			43
#define SV_POTION_RES_WIS			44
#define SV_POTION_RES_DEX			45
#define SV_POTION_RES_CON			46
#define SV_POTION_RES_AGI			47
#define SV_POTION_RES_STE			48
#define SV_POTION_RES_PER			49
#define SV_POTION_RES_LUC			50
/* xxx */
#define SV_POTION_ENLIGHTENMENT			56
#define SV_POTION_SELF_KNOWLEDGE		58
#define SV_POTION_RESTORING				59
#define SV_POTION_RESIST_ACID			60
#define SV_POTION_RESIST_ELECTRICITY	61
#define SV_POTION_RESIST_POISON			62
#define SV_POTION_RESISTANCE			63

/* The "sval" codes for TV_FOOD */

#define SV_FOOD_APPLE			34
#define SV_FOOD_RATION			35
#define SV_FOOD_JERKY			36
#define SV_FOOD_WAYBREAD		37


/*gold, incomplete list defined primarily for the mimics*/

#define SV_GOLD_COPPER			3
#define SV_GOLD_SILVER			6
#define SV_GOLD_GOLD			11
#define SV_GOLD_OPALS			12
#define SV_GOLD_SAPPHIRES		13
#define SV_GOLD_RUBIES			14
#define SV_GOLD_DIAMOND			15
#define SV_GOLD_MITHRIL			17
#define SV_GOLD_ADAMANTITE		18


/*
 * Special "sval" limit -- first "normal" food
 */
#define SV_FOOD_MIN_FOOD	32

/*
 * Special "sval" limit -- first "large" chest
 */
#define SV_CHEST_MIN_SMALL	1

/*
 * Special "sval" limit -- first "large" chest
 */
#define SV_CHEST_MIN_LARGE	5

/*
 * Special "sval" for jeweled chest
 */
#define SV_CHEST_JEWELED_LARGE	8

/*
 * Special "sval" limit -- first "good" magic/prayer book
 */
#define SV_BOOK_MIN_GOOD	1



/*
 * Special "k_info" hard coded values -
 */
#define MAX_GOLD		18	/* Number of "gold" entries */



/*Squelch Modes for k_info->squelch*/


#define SQUELCH_NEVER   			0 /*allow pickup, but defer to OPT_always_pickup*/
#define NO_SQUELCH_NEVER_PICKUP		1 /*never pickup, override OPT_always_pickup*/
#define NO_SQUELCH_ALWAYS_PICKUP 	2/*always pickup, override pickup and floor query options*/
#define SQUELCH_ALWAYS  			3 /*destroy when player walks over*/
#define SQUELCH_HEAD				0
#define SQUELCH_TAIL				3


/*
 * These are the various levels of quality squelching supported by the game.
 * Less concisely:
 * 0 ---> No squelching
 * 1 ---> Squelch cursed items
 * 2 ---> Squelch average and worse items
 * 3 ---> Squelch good and worse items
 * 4 ---> squelch all but artifacts
 * 5 ---> squelch open chests
 */

#define SQUELCH_NONE     		0
#define SQUELCH_CURSED   		1
#define SQUELCH_AVERAGE  		2
#define SQUELCH_GOOD_STRONG     3
#define SQUELCH_GOOD_WEAK		4
#define SQUELCH_ALL      		5
#define SQUELCH_OPENED_CHESTS	6 /*chests*/

/*others are defines in squelch.c, static int do_qual_squelch,
 *but this one is used in chest opening. JG*/
#define CHEST_INDEX 	20

/*number of bytes used in squelch sub-quality array*/
#define SQUELCH_BYTES    24




/*
 * Special "sval" value -- unknown "sval"
 */
#define SV_UNKNOWN			255



/*** Function flags ***/

#define PROJECT_NO          0
#define PROJECT_NOT_CLEAR   1
#define PROJECT_CLEAR       2


/*
 * Bit flags for the "project()", the "projectable()", and/or the
 * "project_path()" functions.
 *
 *   BEAM:  Work as a beam weapon (affect every grid passed through)
 *   ARC:   Act as an arc spell (a portion of a caster-centered ball)
 *   STAR:  Act as a starburst - a randomized ball
 *   BOOM:  Explode in some way
 *   WALL:  Affect one layer of any wall, even if not passable
 *   PASS:  Ignore walls entirely
 *   GRID:  Affect each grid in the "blast area" in some way
 *   ITEM:  Affect each object in the "blast area" in some way
 *   KILL:  Affect each monster in the "blast area" in some way
 *   PLAY:  Explicitly affect the player
 *   EFFECT Set Effects based on this projection
 *   HIDE:  Hack -- disable graphical effects of projection
 *   STOP:  Stop as soon as we hit a monster
 *   JUMP:  Jump directly to the target location
 *   THRU:  Continue "through" the target (used for projectiles)
 *   CHCK:  Note occupied grids, but do not stop at them
 *   ORTH:  Projection cannot move diagonally (used for wall spells)
 */

/* Projection types */
#define PROJECT_BEAM         0x00000001
#define PROJECT_ARC          0x00000002
#define PROJECT_STAR         0x00000004
#define PROJECT_XXX1         0x00000008
#define PROJECT_XXX2         0x00000010
#define PROJECT_XXX3         0x00000020

/* What projections do */
#define PROJECT_BOOM         0x00000040
#define PROJECT_WALL         0x00000080
#define PROJECT_PASS         0x00000100  /*Ignore walls*/
#define PROJECT_XXX4         0x00000200
#define PROJECT_XXX5         0x00000400

/* What projections affect */
#define PROJECT_GRID         0x00000800
#define PROJECT_ITEM         0x00001000
#define PROJECT_KILL         0x00002000 /* Hurt the monsters*/
#define PROJECT_PLAY         0x00004000 /* Hurt the player*/
#define PROJECT_EFCT		 0x00008000 /* Use Effects*/
#define PROJECT_CLOUD		 0x00010000 /* Always set the effect regardless of damage*/
#define PROJECT_XXX7         0x00020000

/* Graphics */
#define PROJECT_HIDE         0x00040000
#define PROJECT_NO_REDRAW    0x00080000
#define PROJECT_XXX9         0x00100000

/* How projections travel */
#define PROJECT_STOP         0x00200000
#define PROJECT_JUMP         0x00400000
#define PROJECT_THRU         0x00800000
#define PROJECT_CHCK         0x01000000
#define PROJECT_ORTH         0x02000000 /*(unused)*/
#define PROJECT_XX10         0x04000000

/* Projection blockage indicators */
#define PATH_G_FULL          0
#define PATH_G_BLCK          1
#define PATH_G_WALL          2
#define PATH_G_NONE        100

/*Who caused the projection? */
#define SOURCE_PLAYER			-1  /*player is the source of projection*/
#define SOURCE_TRAP				-2	/*Trap*/
#define SOURCE_EFFECT			-3  /*Effect*/
#define SOURCE_OTHER			-4	/*Terrain, something other than player or monster*/
#define SOURCE_MONSTER_START	0 /*Greater than 0 monster is the source*/


/*Mode whether to descrive traps/spells or set off/cast them*/
#define MODE_DESCRIBE	1
#define MODE_ACTION		2
#define MODE_FLAGS		3

/*
 * An arc with a width (in degrees) less than this value will lose less
 * power over distance.
 */
#define ARC_STANDARD_WIDTH     90


/*
 * Bit flags for the "enchant()" function
 */
#define ENCH_TOHIT   0x01
#define ENCH_TODAM   0x02
#define ENCH_TOAC    0x04


/*
 * Bit flags for the "target_set" function
 *
 *	KILL: Target monsters
 *	LOOK: Describe grid fully
 *	XTRA: Currently unused flag
 *	GRID: Select from all grids
 */
#define TARGET_KILL		0x01
#define TARGET_LOOK		0x02
#define TARGET_TRAP		0x04
#define TARGET_GRID		0x08


/*
 * Bit flags for the "monster_desc" function
 */
#define MDESC_OBJE		0x01	/* Objective (or Reflexive) */
#define MDESC_POSS		0x02	/* Possessive (or Reflexive) */
#define MDESC_IND1		0x04	/* Indefinites for hidden monsters */
#define MDESC_IND2		0x08	/* Indefinites for visible monsters */
#define MDESC_PRO1		0x10	/* Pronominalize hidden monsters */
#define MDESC_PRO2		0x20	/* Pronominalize visible monsters */
#define MDESC_HIDE		0x40	/* Assume the monster is hidden */
#define MDESC_SHOW		0x80	/* Assume the monster is visible */


/*
 * Bit flags for the "get_item" function
 */
#define USE_EQUIP		0x01	/* Allow equip items */
#define USE_INVEN		0x02	/* Allow inven items */
#define USE_FLOOR		0x04	/* Allow floor items */
#define USE_QUIVER		0x08	/* Allow quiver items, forbid classic equipment */

/*
 * Modes for the "do_spell" function
 */
#define MODE_SPELL_CAST    1
#define MODE_SPELL_NAME    2
#define MODE_SPELL_DESC    3


/*
 * Effect index defines
 */
#define EFFECT_LINGERING_CLOUD	 1	    /* A radiating explosion */
#define EFFECT_SHIMMERING_CLOUD  2      /* A standard lingering cloud */
#define EFFECT_PERMANENT_CLOUD   3		/* Permanent Cloud */
#define EFFECT_TRAP_SMART	     4      /* A trap that casts spells at the player. */
#define EFFECT_TRAP_DUMB	     5      /* A passive trap. */
#define EFFECT_TRAP_PLAYER	     6		/* A trap set by the player for the monsters */
#define EFFECT_GLYPH		     7		/* A glyph of warding */
#define EFFECT_GLACIER			 8		/* A glacier */
#define EFFECT_INSCRIPTION		 9		/* An inscription  */



/*
 * Effect flags (reorder them later)
 */
#define EF1_HURT_PLAY       0x0001  /* Effect can hurt the character */
#define EF1_HURT_EVIL       0x0002  /* Effect hurts only evil monsters */
#define EF1_CHARACTER       0x0004  /* Effect is cast by the character */
#define EF1_SKIP			0x0008  /* This effect doesn't need processing. */
#define EF1_SM_TRAP_ORB		0x0010  /* This effect should not go away*/
#define EF1_SM_TRAP_BALL	0x0020  /* Smart Trap Ball spell */
#define EF1_SM_TRAP_BEAM	0x0040  /* Smart Trap Beam spell */
#define EF1_SM_TRAP_BOLT	0x0080  /* Smart Trap Bolt spell */
#define EF1_SM_TRAP_LOS     0x0100  /* Smart Trap Line of sight spell */
#define EF1_TRAP_SMART     	0x0200  /* Smart Trap*/
#define EF1_TRAP_DUMB     	0x0400  /* Passive Trap */
#define EF1_TRAP_PLAYER    	0x0800  /* Player Trap */
#define EF1_GLYPH	    	0x1000  /* Glpyh set by the player */
#define EF1_HIDDEN	    	0x2000  /* The effect can't be seen */
#define EF1_PERMANENT    	0x4000  /* This effect should not go away*/
/*Unused*/

/*Put a cap on effect damage*/
#define EFFECT_POWER_MAX    200
/*** Player flags ***/


/*
 * Bit flags for the "p_ptr->notice" variable
 */
#define PN_COMBINE		0x00000001L	/* Combine the pack */
#define PN_REORDER		0x00000002L	/* Reorder the pack */
#define PN_AUTOINSCRIBE	0x00000004L	/* Autoinscribe items */
/* xxx (many) */


/*
 * Bit flags for the "p_ptr->update" variable
 */

#define PU_FLOW_LAVA	ELEMENT_LAVA	/* Update flow through ice */
#define PU_FLOW_ICE		ELEMENT_ICE		/* Update flow through ice */
#define PU_FLOW_OIL		ELEMENT_OIL		/* Update flow through oil */
#define PU_FLOW_FIRE	ELEMENT_FIRE	/* Update flow up to fire */
#define PU_FLOW_SAND	ELEMENT_SAND	/* Update flow through sand */
#define PU_FLOW_FOREST	ELEMENT_FOREST	/* Update flow through forest */
#define PU_FLOW_WATER	ELEMENT_WATER	/* Update flow through water */
#define PU_FLOW_ACID	ELEMENT_ACID	/* Update flow up to acid */
#define PU_FLOW_MUD		ELEMENT_MUD		/* Update flow up to acid */
#define PU_FLOW_DOORS		0x00000400L			/* Update flow through doors */
#define PU_FLOW_NO_DOORS	0x00000800L	/* Update flow up to doors */
#define PU_FLOW_FLYING		0x00001000L	/* Update flow for flying creatures */
#define PU_FLOW_PASS_WALLS     0x00002000L     /* Update flow for creatures who pass through or kill walls */
#define PU_FLOW_NO_DOORS_SPECIAL       0x00004000L /* Update the "doorless" versions of the flows */

#define PU_NATIVE		0x00100000L	/* Calculate nativity */
#define PU_STEALTH		0x00200000L	/* Calculate bonuses */
#define PU_BONUS		0x00400000L	/* Calculate bonuses */
#define PU_TORCH		0x00800000L	/* Calculate torch radius */
#define PU_HP			0x01000000L	/* Calculate chp and mhp */
#define PU_MANA			0x02000000L	/* Calculate csp and msp */
#define PU_SPELLS		0x04000000L	/* Calculate spells */
#define PU_FORGET_VIEW	0x08000000L	/* Forget field of view */
#define PU_UPDATE_VIEW	0x10000000L	/* Update field of view */
#define PU_MONSTERS		0x20000000L	/* Update monsters */
#define PU_DISTANCE		0x40000000L	/* Update distances */
#define PU_PANEL		0x80000000L	/* Update panel */

#define PU_FLOW_MASK


/*
 * Bit flags for the "p_ptr->redraw" variable
 */
#define PR_MISC			0x00000001L	/* Display Race/Class */
#define PR_TITLE		0x00000002L	/* Display Title */
#define PR_LEV			0x00000004L	/* Display Level */
#define PR_EXP			0x00000008L	/* Display Experience */
#define PR_STATS		0x00000010L	/* Display Stats */
#define PR_ARMOR		0x00000020L	/* Display Armor */
#define PR_HP			0x00000040L	/* Display Hitpoints */
#define PR_MANA			0x00000080L	/* Display Mana */
#define PR_GOLD			0x00000100L	/* Display Gold */
#define PR_DEPTH		0x00000200L	/* Display Depth */
#define PR_EQUIPPY		0x00000400L	/* Display Equippy chars */
#define PR_HEALTH		0x00000800L	/* Display Monster Health Bar */
#define PR_CUT			0x00001000L	/* Display Extra (Cut) */
#define PR_STUN			0x00002000L	/* Display Extra (Stun) */
#define PR_HUNGER		0x00004000L	/* Display Extra (Hunger) */
#define PR_MON_MANA		0x00008000L	/* Display Monster Mana Bar */
#define PR_BLIND		0x00010000L	/* Display Extra (Blind) */
#define PR_CONFUSED		0x00020000L	/* Display Extra (Confused) */
#define PR_AFRAID		0x00040000L	/* Display Extra (Afraid) */
#define PR_POISONED		0x00080000L	/* Display Extra (Poisoned) */
#define PR_STATE		0x00100000L	/* Display Extra (State) */
#define PR_SPEED		0x00200000L	/* Display Extra (Speed) */
#define PR_STUDY		0x00400000L	/* Display Extra (Study) */
#define PR_RESIST		0X00800000L	/* Display Resistances */
/* xxx */
/* xxx */
/* xxx */
#define PR_MAP			0x08000000L	/* Display Map */
/* xxx (many) */
/* Display Basic Info */
#define PR_BASIC \
	(PR_MISC | PR_TITLE | PR_STATS | PR_LEV |\
	 PR_EXP | PR_GOLD | PR_ARMOR | PR_HP |\
	 PR_MANA | PR_DEPTH | PR_HEALTH)

/* Display Extra Info */
#define PR_EXTRA \
	(PR_CUT | PR_STUN | PR_HUNGER | PR_BLIND |\
	 PR_CONFUSED | PR_AFRAID | PR_POISONED | PR_STATE |\
	 PR_SPEED | PR_STUDY | PR_EQUIPPY | PR_RESIST | PR_STATS | PR_EXP)

/*Number of possible display options*/
#define	 MAX_DISPLAY_OPTIONS 17

/*
 * Bit flags for the "p_ptr->window" variable (etc)
 */
#define PW_INVEN            0x00000001L /* Display inven/equip */
#define PW_EQUIP            0x00000002L /* Display equip/inven */
#define PW_PLAYER_0         0x00000004L /* Display player (basic) */
#define PW_PLAYER_1         0x00000008L /* Display player (extra) */
#define PW_PLAYER_2         0x00000010L /* Display player (compact) */
#define PW_MAP              0x00000020L /* Display dungeon map */
#define PW_MESSAGE          0x00000040L /* Display messages */
#define PW_OVERHEAD         0x00000080L /* Display overhead view */
#define PW_MONSTER          0x00000100L /* Display monster recall */
#define PW_OBJECT           0x00000200L /* Display object recall */
#define PW_MONLIST          0x00000400L /* Display monster list */
#define PW_STATUS           0x00000800L /* Display status */
#define PW_SCRIPT_VARS      0x00001000L /* Display script variables */
#define PW_SCRIPT_SOURCE    0x00002000L /* Display script source */
#define PW_BORG_1           0x00004000L /* Display borg messages */
#define PW_BORG_2           0x00008000L /* Display borg status */
#define PW_FEATURE          0x00010000L /* Display feature status */

/*
 * Number of feats we change to (Excluding default). Used in f_info.txt.
 */
#define MAX_FEAT_STATES	 8


/*** Feature Indexes (see "lib/edit/feature.txt") ***/

/* Nothing */
#define FEAT_NONE		0

/* Various */
#define FEAT_FLOOR		1

#define FEAT_GLYPH		3

#define FEAT_TRAP_DOOR		14
#define FEAT_TRAP_SUMMON	18

/* Extra */
#define FEAT_RUBBLE		48

/* Seams */
#define FEAT_MAGMA		49
#define FEAT_QUARTZ		50
#define FEAT_MAGMA_H	51
#define FEAT_QUARTZ_H	52

/*stairs moved to make way for adventurers guild*/
#define FEAT_LESS		71
#define FEAT_MORE		72

#define FEAT_LESS_SHAFT	73
#define FEAT_MORE_SHAFT	74


/* Walls */
#define FEAT_WALL_EXTRA	53
#define FEAT_WALL_INNER 54
#define FEAT_WALL_OUTER	55
#define FEAT_WALL_SOLID	56
#define FEAT_PERM_EXTRA	57
#define FEAT_PERM_INNER	58
#define FEAT_PERM_OUTER	59
#define FEAT_PERM_SOLID	60

/* Specials trap that only effects monsters.  Created only by rogues. */
#define FEAT_MTRAP_BASE			61 /* Level 1 */
#define FEAT_MTRAP_STURDY		62 /* Level 1 */
#define FEAT_MTRAP_SLOWING		63 /* Level 6 */
#define FEAT_MTRAP_CONFUSION	64 /* Level 12 */
#define FEAT_MTRAP_POISON		65 /* Level 18 */
#define FEAT_MTRAP_DRAIN_LIFE	66 /* Level 24 */
#define FEAT_MTRAP_ELEC			67 /* Level 30 */
#define FEAT_MTRAP_EXPLOSIVE	68 /* Level 36 */
#define FEAT_MTRAP_PORTAL		69 /* Level 42 */
#define FEAT_MTRAP_DISPEL_M		70 /* Level 48 */

/* More wall types */
/* Can't be bothered counting in hex */

#define FEAT_LIMESTONE  75
#define FEAT_SANDSTONE  76
#define FEAT_GRANITE_C	77
#define FEAT_EARTH_WALL 78
#define FEAT_ICE_WALL_C	79
#define FEAT_SHALE      80
#define FEAT_COAL       81
#define FEAT_BCOAL      82

#define FEAT_L_ROCK	83

#define FEAT_TRAP_MAGIC_MISSILE	160
#define FEAT_TRAP_HOLY_ORB		161

/* More floor types */

#define FEAT_FLOOR_EARTH 84

/* Bridges and terrain */

#define FEAT_ICE 		85
#define FEAT_ICE_WALL		86
#define FEAT_WATER      87
#define FEAT_WATER_H    88
#define FEAT_ACID       89
#define FEAT_ACID_H     90
#define FEAT_OIL_BURN	94

/* More terrain */
#define FEAT_SAND       95
#define FEAT_SAND_H     96
#define FEAT_MUD 		97
#define FEAT_MUD_H      98
#define FEAT_BMUD       99
#define FEAT_BWATER     100
#define FEAT_LAVA       101
#define FEAT_LAVA_H     102
#define FEAT_OIL 		103
#define FEAT_OIL_H 		104
#define FEAT_WALL_FIRE	105

#define FEAT_FLOOR_WET 107
#define FEAT_FLOOR_MUD	108
#define FEAT_EARTH	110

#define FEAT_ROCK	111
#define FEAT_PEBBLES	112

#define FEAT_FIRE	113
#define FEAT_THICKET	114
#define FEAT_BUSH	118
#define FEAT_THORNS	119
#define FEAT_BRAMBLES	121

#define FEAT_CREST	124
#define FEAT_CREST_H	125
#define FEAT_WAVE	126
#define FEAT_WAVE_H	127

#define FEAT_TREE	115
#define FEAT_DUNE	130
#define FEAT_FSOIL	134
#define FEAT_FSOIL_D	135

#define FEAT_GEYSER	137
#define FEAT_LAVA_W	138
#define FEAT_BURNT_S	139

#define FEAT_RUBBLE_H	148
#define FEAT_SMOKE	175
#define FEAT_FOG	176
#define FEAT_POISON_CLOUD		177
#define FEAT_STATIC				178
#define FEAT_STEAM				179
#define FEAT_GRAVITY			180
#define FEAT_SPARKS				181
#define FEAT_LITE				182
#define FEAT_DARK				183
#define FEAT_NETHER				184
#define FEAT_CHAOS				185
#define FEAT_DISENCHANTMENT		186
#define FEAT_NEXUS				187
#define FEAT_TIME				188
#define FEAT_CONFUSION			189
#define FEAT_FSOIL_DYNAMIC		190
#define FEAT_LIFE_DRAIN			191
#define FEAT_GLACIER			192

#define FEAT_WALL_INSCRIPTION          193
#define FEAT_PUTRID_FLOWER             194
#define FEAT_BWATER_WALL               196
#define FEAT_BMUD_WALL                 197
#define FEAT_SCORCHED_WALL             198
#define FEAT_ELVISH_WALL               199
#define FEAT_VINES                     200
#define FEAT_SILENT_WATCHER            201
#define FEAT_ETHEREAL_WALL             202


/* Level flags - extracted from feature flags */
#define LF1_LAVA 	ELEMENT_LAVA
#define LF1_ICE  	ELEMENT_ICE
#define LF1_OIL   	ELEMENT_OIL
#define LF1_FIRE   	ELEMENT_FIRE
#define LF1_SAND 	ELEMENT_SAND
#define LF1_FOREST	ELEMENT_FOREST
#define LF1_WATER 	ELEMENT_WATER
#define LF1_ACID   	ELEMENT_ACID
#define LF1_MUD 	ELEMENT_MUD
#define LF1_UNUSED0 0x0200
#define LF1_UNUSED1	0x0400
#define LF1_UNUSED2	0x0800
#define LF1_UNUSED3	0x1000
#define LF1_UNUSED4	0x2000
#define LF1_UNUSED5	0x4000
#define LF1_UNUSED6	0x8000



/*** Cave flags ***/

/*
 * Special cave grid flags
 */
#define CAVE_MARK		0x0001 	/* memorized feature */
#define CAVE_GLOW		0x0002 	/* self-illuminating */
#define CAVE_ICKY		0x0004 	/* part of a vault */
#define CAVE_ROOM		0x0008 	/* part of a room */
#define CAVE_G_VAULT    0x0010  /* part of a greater vault */
#define CAVE_MARKED		0x0020 	/* used to occasionally allow unusual things to happen */
#define CAVE_TEMP		0x0040 	/* temporary flag (hard-coded position) */
#define CAVE_LOS		0x0080 	/* grid allows LOS */
#define CAVE_FIRE       0x0100  /* is in line of fire */
#define CAVE_SEEN     	0x0200  /* seen flag */
#define CAVE_VIEW       0x0400  /* view flag */
#define CAVE_HALO		0x0800	/* glowing grid (FF2_GLOW), or adjacent to glowing grid */

#define CAVE_PROJECT	0x1000  /* grid allows projections */
#define CAVE_FLOW       0x2000  /* temporary flag to mark a square flow to be updated during the next cycle. */
#define CAVE_MOVE       0x4000  /* grid allows movement */
#define CAVE_ATT4       0x8000  /* unused */

#define FF1_LOS  		0x00000001  /*allow LOS to pass*/
#define FF1_PROJECT     0x00000002  /*allow projections/spells to pass*/
#define FF1_MOVE 		0x00000004  /*allow movement*/
#define FF1_PLACE       0x00000008  /*square suitable for monsters*/
#define FF1_DROP 		0x00000010  /*square suitable for object drops*/
#define FF1_SECRET      0x00000020  /*Terrain is a secret*/
#define FF1_NOTICE      0x00000040  /*Notice this feature*/
#define FF1_REMEMBER    0x00000080  /*Remember this feature*/
#define FF1_CAN_OPEN	0x00000100  /*Can open this feature*/
#define FF1_CAN_CLOSE  	0x00000200  /*Can close this feature*/
#define FF1_CAN_BASH	0x00000400  /*Can bash this feature*/
#define FF1_CAN_SPIKE  	0x00000800  /*Can spike this feature*/
#define FF1_CAN_DISARM 	0x00001000  /*Can disarm this feature*/
#define FF1_SHOP        0x00002000  /*Feature is a shop*/
#define FF1_CAN_TUNNEL 	0x00004000  /*Can tunnel this feature*/
#define FF1_F1XXX_1	0x00008000  /*Unused*/
#define FF1_HAS_GOLD    0x00010000  /*Feature has gold*/
#define FF1_HAS_ITEM    0x00020000  /*Feature has an item*/
#define FF1_DOOR 	0x00040000  /*Detected by detect doors/destroyed by destroy doors*/
#define FF1_TRAP 	0x00080000  /*Detected by detect traps/destroyed by destroy traps*/
#define FF1_STAIRS      0x00100000  /*Detected by detect doors/destroyed by destroy stairs*/
#define FF1_GLYPH       0x00200000  /*Destroyed by powerful creatures*/
#define FF1_LESS 	0x00400000  /*Not allowed in town*/
#define FF1_MORE 	0x00800000  /*Not allowed on quest levels*/
#define FF1_RUN  	0x01000000  /*Can run over*/
#define FF1_FLOOR       0x02000000  /*Can create doors, stairs, rubble here.*/
#define FF1_WALL 	0x04000000  /*Blocks flow and treated as WALL by magic mapping/enlightenment.*/
#define FF1_PERMANENT   0x08000000  /*Never destroy/modify this location.*/
#define FF1_INNER       0x10000000  /*Inner wall of room - don't overwrite with corridor.*/
#define FF1_OUTER       0x20000000  /*Outer wall of room - OK to overwrite with corridor/turn to door*/
#define FF1_SOLID       0x40000000  /*Outer wall of room - not OK to overwrite with corridor/turn to door.*/
#define FF1_HIT_TRAP	0x80000000  /*Replace with another feature when moved into*/

#define FF1_OBVIOUS_MASK \
		(FF1_LOS | FF1_PROJECT | FF1_MOVE | FF1_SHOP | \
			FF1_DOOR | FF1_TRAP | FF1_STAIRS | FF1_GLYPH | FF1_LESS | FF1_RUN | \
			FF1_FLOOR | FF1_WALL | FF1_PERMANENT | FF1_MORE | FF1_LESS)

#define FF2_BRIDGE      0x00000001  /*Bridge this feature when generating a corridor here.*/
#define FF2_RIVER       0x00000002  /*Place as river through dungeon.*/
#define FF2_LAKE 	0x00000004  /*Place as lake in dungeon.*/
#define FF2_BRIDGED	0x00000008  /* Feature has been bridged */
#define FF2_COVERED     0x00000010  /* Terrain provides coverage for monster */
#define FF2_GLOW 	0x00000020  /*Spot is self illuminating*/
#define FF2_ATTR_LITE   0x00000040  /*Attribute is modified by torchlight/blindness/not seen.*/
#define FF2_EFFECT     0x00000080  /* Feature is an effect, rather than a true floor feature */
#define FF2_F2XXX_3  	0x00000100  /* Unused */
#define FF2_SHALLOW     0x00000200  /*Double weight of load. Chance of sinking in feature and losing move*/
#define FF2_DEEP 	0x00000400  /*Triple weight of load. Chance of sinking in feature and losing move*/
#define FF2_F2XXX_13     0x00000800  /*Unused*/
#define FF2_HURT_ROCK   0x00001000  /*Destroyed by transmute rock to mud/rock remover.*/
#define FF2_HURT_FIRE   0x00002000  /*Destroyed by fire balls/bolts/breath*/
#define FF2_HURT_COLD   0x00004000  /*Destroyed by frost balls/bolts/breath*/
#define FF2_HURT_ACID   0x00008000  /*Destroyed by acid balls/bolts/breath*/
#define FF2_HURT_ELEC   0x00010000  /*Destroyed by electricity balls/bolts/breath*/
#define FF2_HURT_WATER 	0x00020000  /*Hurt by water*/
#define FF2_F2XXX_4	0x00040000  /*Unused*/
#define FF2_F2XXX_5	0x00080000  /*Unused*/
#define FF2_F2XXX_6	0x00100000  /*Unused*/
#define FF2_F2XXX_7	0x00200000  /*Unused*/
#define FF2_CAN_FLY	0x00400000  /*Creatures with CAN_FLY/MUST_FLY may enter and treated as flying*/
#define FF2_F2XXX_8    0x00800000  /*Unused*/
#define FF2_F2XXX_9   0x01000000  /*Unused*/
#define FF2_F2XXX_10     0x02000000  /*Unused*/
#define FF2_TRAP_PASSIVE 0x04000000 /* Feature is a passive trap set off by player*/
#define FF2_TRAP_SMART	0x08000000  /* Feature is an active trap that casts spells at the player*/
#define FF2_TRAP_MON   	0x10000000  /* Trap for the monsters to set off*/
#define FF2_F2XXX_11   	0x20000000  /* Unused */
#define FF2_F2XXX_12 	0x40000000  /* Unused */
#define FF2_SHAFT   	0x80000000  /* Shaft (goes up or down 2 levels)*/

#define FF2_OBVIOUS_MASK \
		(FF2_GLOW | FF2_EFFECT | FF2_TRAP_MON | FF2_TRAP_PASSIVE | FF2_TRAP_SMART | FF2_SHAFT)

#define FF3_LAVA		ELEMENT_LAVA  /*Never generate on water, acid, oil or ice level. Mark level as lava level*/
#define FF3_ICE			ELEMENT_ICE  /*Never generate on water, acid, oil or lava level. Mark level as water level.*/
#define FF3_OIL			ELEMENT_OIL  /*Never generate on ice, acid, water or lava level. Mark level as oil level*/
#define FF3_FIRE		ELEMENT_FIRE  /*Mark level as a fire level*/
#define FF3_SAND  		ELEMENT_SAND  /*Mark level as a sand level*/
#define FF3_FOREST 		ELEMENT_FOREST  /*Mark level as a forest level*/
#define FF3_WATER  		ELEMENT_WATER  /*Never generate on ice, lava, oil or acid level. Mark level as a water level*/
#define FF3_ACID 		ELEMENT_ACID  /*Never generate on ice, water, oil or lava level. Mark level as acid level*/
#define FF3_MUD	  		ELEMENT_MUD  /*Mark level as a mud level*/
#define FF3_F3XXX_0 	0x00000200  /*Unused*/
#define FF3_F3XXX_1		0x00000400  /* Reserved for level type */
#define FF3_F3XXX_2 	0x00000800  /* Reserved for level type */
#define FF3_F3XXX_3		0x00001000  /* Reserved for level type */
#define FF3_F3XXX_4  	0x00002000  /* Reserved for level type */
#define FF3_F3XXX_5     0x00004000  /* Reserved for level type */
#define FF3_F3XXX_6     0x00008000  /* Reserved for level type */
#define FF3_HURT_BOIL_WATER     0x00010000  /* Hurt by Boiling Water */
#define FF3_HURT_POIS		0x00020000  /* Hurt by Poison */
#define FF3_DOOR_JAMMED		0x00040000  /* Jammed Door*/
#define FF3_DOOR_CLOSED		0x00080000  /* Closed Door*/
#define FF3_DOOR_OPEN   	0x00100000  /* Open Door */
#define FF3_DOOR_BROKEN		0x00200000  /* Broken Door */
#define FF3_DOOR_LOCKED		0x00400000  /*Locked Door*/
#define FF3_PICK_TRAP	0x00800000  /* A trap needs to be picked*/
#define FF3_PICK_DOOR	0x01000000  /* A door needs to be picked*/
#define FF3_F3XXX_17    0x02000000  /* Unused*/
#define FF3_F3XXX_18    0x04000000  /* Unused*/
#define FF3_F3XXX_19    0x08000000  /* Unused*/
#define FF3_TREE	0x10000000  /* Feature is a tree*/
#define FF3_NEED_TREE	0x20000000  /* Feature needs a adjacent tree */
#define FF3_F3XXX_21    0x40000000  /* Unused*/
#define FF3_DYNAMIC		0x80000000  /* Dynamic feature */

#define FF3_OBVIOUS_MASK \
		(TERRAIN_MASK | FF3_DOOR_JAMMED | FF3_DOOR_CLOSED | FF3_DOOR_OPEN | \
	     FF3_DOOR_BROKEN | FF3_DOOR_LOCKED | FF3_TREE)



 /*
  * Feature actions -- used to define actions performed on features.
  *
  * Note that there is a one-to-one relationship between FS_* flags and FFx_*
  * flags. These values are formed with the position of a FFx flag inside
  * its group added to a base value.
  * See grab_one_feature_action (init1.c) and do_cmd_test (cmd2.c) for details.
  */
#define FS_FLAGS1       0
#define FS_SECRET       (FS_FLAGS1 + 5)
#define FS_OPEN		(FS_FLAGS1 + 8)
#define FS_CLOSE	(FS_FLAGS1 + 9)
#define FS_BASH		(FS_FLAGS1 + 10)
#define FS_SPIKE	(FS_FLAGS1 + 11)
#define FS_TUNNEL       (FS_FLAGS1 + 14)
#define FS_TRAP		(FS_FLAGS1 + 19)
#define FS_GLYPH	(FS_FLAGS1 + 21)
#define FS_FLOOR	(FS_FLAGS1 + 25)
#define FS_HIT_TRAP     (FS_FLAGS1 + 31)

#define FS_FLAGS2       32
#define FS_BRIDGE       (FS_FLAGS2 + 0)
#define FS_HURT_ROCK    (FS_FLAGS2 + 12)
#define FS_HURT_FIRE    (FS_FLAGS2 + 13)
#define FS_HURT_COLD    (FS_FLAGS2 + 14)
#define FS_HURT_ACID    (FS_FLAGS2 + 15)
#define FS_HURT_ELEC	(FS_FLAGS2 + 16)
#define FS_HURT_WATER	(FS_FLAGS2 + 17)

#define FS_FLAGS3       64
#define FS_HURT_BWATER	(FS_FLAGS3 + 16)
#define FS_HURT_POIS	(FS_FLAGS3 + 17)
#define FS_TREE			(FS_FLAGS3 + 28)
#define FS_NEED_TREE	(FS_FLAGS3 + 29)

#define FS_FLAGS_END    96


#define _feat_ff1_match(f_ptr, flags) ((f_ptr)->f_flags1 & (flags))

#define feat_ff1_match(f_idx, flags) _feat_ff1_match(f_info + (f_idx), flags)

#define cave_ff1_match(y, x, flags) \
_feat_ff1_match(f_info + cave_feat[y][x], flags)


#define _feat_ff2_match(f_ptr, flags) ((f_ptr)->f_flags2 & (flags))

#define feat_ff2_match(f_idx, flags) _feat_ff2_match(f_info + (f_idx), flags)

#define cave_ff2_match(y, x, flags) \
_feat_ff2_match(f_info + cave_feat[y][x], flags)

#define _feat_ff3_match(f_ptr, flags) ((f_ptr)->f_flags3 & (flags))

#define feat_ff3_match(f_idx, flags) _feat_ff3_match(f_info + (f_idx), flags)

#define cave_ff3_match(y, x, flags) \
_feat_ff3_match(f_info + cave_feat[y][x], flags)

/*** Object flags ***/


/*
 * Chest trap flags (see "tables.c")
 */
#define CHEST_LOSE_STR	0x01
#define CHEST_LOSE_CON	0x02
#define CHEST_POISON	0x04
#define CHEST_PARALYZE	0x08
#define CHEST_EXPLODE	0x10
#define CHEST_SUMMON	0x20


/*
 * Special object flags
 */
#define IDENT_SENSE     		0x00000001	/* Item has been "sensed" */
#define IDENT_FIXED     		0x00000002	/* Item has been "haggled" */
#define IDENT_EMPTY     		0x00000004	/* Item charges are known */
#define IDENT_KNOWN     		0x00000008	/* Item abilities are known */
#define IDENT_STORE     		0x00000010	/* Item is in the inventory of a store */
#define IDENT_MENTAL    		0x00000020	/* Item information is known */
#define IDENT_CURSED    		0x00000040	/* Item is temporarily cursed */
#define IDENT_BROKEN    		0x00000080	/* Item is permanently worthless */
#define IDENT_QUEST     		0x00000100	/* Item is a quest artifact */
#define IDENT_PERFECT_BALANCE   0x00000200	/* Item has perfect balance */
#define IDENT_HIDE_CARRY		0x00000400	/* Don't reveal the object is being carried by a creature*/
#define IDENT_WIELDED		    0x00000800	/* Has ever been wielded */
#define IDENT_UNUSED_XXXX1XXX   0x00001000	/* Unused */
#define IDENT_UNUSED_XXXX2XXX   0x00002000	/* Unused */
#define IDENT_UNUSED_XXXX4XXX   0x00004000	/* Unused */
#define IDENT_UNUSED_XXXX8XXX   0x00008000	/* Unused */
#define IDENT_UNUSED_XXX1XXXX   0x00010000	/* Unused */
#define IDENT_UNUSED_XXX2XXXX   0x00020000	/* Unused */
#define IDENT_UNUSED_XXX4XXXX   0x00040000	/* Unused */
#define IDENT_UNUSED_XXX8XXXX   0x00080000	/* Unused */
#define IDENT_UNUSED_XX1XXXXX   0x00100000	/* Unused */
#define IDENT_UNUSED_XX2XXXXX   0x00200000	/* Unused */
#define IDENT_UNUSED_XX4XXXXX   0x00400000	/* Unused */
#define IDENT_UNUSED_XX8XXXXX   0x00800000	/* Unused */
#define IDENT_UNUSED_X1XXXXXX   0x01000000	/* Unused */
#define IDENT_UNUSED_X2XXXXXX   0x02000000	/* Unused */
#define IDENT_UNUSED_X4XXXXXX   0x04000000	/* Unused */
#define IDENT_UNUSED_X8XXXXXX   0x08000000	/* Unused */
#define IDENT_UNUSED_1XXXXXXX   0x10000000	/* Unused */
#define IDENT_UNUSED_2XXXXXXX   0x20000000	/* Unused */
#define IDENT_UNUSED_4XXXXXXX   0x40000000	/* Unused */
#define IDENT_UNUSED_8XXXXXXX   0x80000000	/* Unused */


/*
 * The special inscriptions.
 */
#define INSCRIP_NULL            100
#define INSCRIP_TERRIBLE        100+1
#define INSCRIP_WORTHLESS       100+2
#define INSCRIP_CURSED          100+3
#define INSCRIP_BROKEN          100+4
#define INSCRIP_AVERAGE         100+5
#define INSCRIP_GOOD_STRONG     100+6
#define INSCRIP_GOOD_WEAK		100+7
#define INSCRIP_EXCELLENT       100+8
#define INSCRIP_SPECIAL         100+9
#define INSCRIP_UNCURSED        100+10
#define INSCRIP_INDESTRUCTIBLE  100+11

/*
 * Number of special inscriptions, plus one.
 */
#define MAX_INSCRIP			12


/*
 * Some bit-flags for the "smart" field".
 *
 * Most of these map to the "TR2_xxx" flags.
 */
#define SM_OPP_ACID		0x00000001
#define SM_OPP_ELEC		0x00000002
#define SM_OPP_FIRE		0x00000004
#define SM_OPP_COLD		0x00000008
#define SM_OPP_POIS		0x00000010
#define SM_OPP_XXX1		0x00000020
#define SM_OPP_XXX2		0x00000040
#define SM_GOOD_SAVE	0x00000080
#define SM_PERF_SAVE	0x00000100
#define SM_IMM_FREE		0x00000200
#define SM_IMM_MANA		0x00000400
#define SM_IMM_ACID		0x00000800
#define SM_IMM_ELEC		0x00001000
#define SM_IMM_FIRE		0x00002000
#define SM_IMM_COLD		0x00004000
#define SM_IMM_POIS		0x00008000
#define SM_RES_ACID		0x00010000
#define SM_RES_ELEC		0x00020000
#define SM_RES_FIRE		0x00040000
#define SM_RES_COLD		0x00080000
#define SM_RES_POIS		0x00100000
#define SM_RES_FEAR		0x00200000
#define SM_RES_LITE		0x00400000
#define SM_RES_DARK		0x00800000
#define SM_RES_BLIND	0x01000000
#define SM_RES_CONFU	0x02000000
#define SM_RES_SOUND	0x04000000
#define SM_RES_SHARD	0x08000000
#define SM_RES_NEXUS	0x10000000
#define SM_RES_NETHR	0x20000000
#define SM_RES_CHAOS	0x40000000
#define SM_RES_DISEN	0x80000000


/*
 * As of 2.7.8, the "object flags" are valid for all objects, and as
 * of 2.7.9, these flags are not actually stored with the object, but
 * rather in the object_kind, ego_item, and artifact structures.
 *
 * Note that "flags1" contains all flags dependant on "pval" (including
 * stat bonuses, but NOT stat sustainers), plus all "extra attack damage"
 * flags (SLAY_XXX and BRAND_XXX).
 *
 * Note that "flags2" contains all "resistances" (including "sustain" flags,
 * immunity flags, and resistance flags).  Note that "free action" and "hold
 * life" are no longer considered to be "immunities".
 *
 * Note that "flags3" contains everything else (including eight good flags,
 * seven unused flags, four bad flags, four damage ignoring flags, six weird
 * flags, and three cursed flags).

 * Kills need to come right after slays for the randart code to work right
 */

#define TR1_STR             0x00000001L /* STR += "pval" */
#define TR1_INT             0x00000002L /* INT += "pval" */
#define TR1_WIS             0x00000004L /* WIS += "pval" */
#define TR1_DEX             0x00000008L /* DEX += "pval" */
#define TR1_CON             0x00000010L /* CON += "pval" */
#define TR1_AGI             0x00000020L /* AGI += "pval" */
#define TR1_STE				0x00000040L /* STE += "pval" */
#define TR1_PER			    0x00000080L /* PER += "pval" */
#define TR1_LUC		        0x00000100L /* LUC += "pval" */
#define TR1_SEARCH          0x00000200L /* Search += "pval" */
#define TR1_INFRA           0x00000400L /* Infra += "pval" */
#define TR1_TUNNEL          0x00000800L /* Tunnel += "pval" */
#define TR1_SPEED           0x00001000L /* Speed += "pval" */
#define TR1_BLOWS           0x00002000L /* Blows += "pval" */
#define TR1_SHOTS           0x00004000L /* Shots += "pval" */
#define TR1_MIGHT           0x00008000L /* Might += "pval" */
#define TR1_SLAY_ANIMAL     0x00010000L /* Weapon slays animals */
#define TR1_SLAY_EVIL       0x00020000L /* Weapon slays evil */
#define TR1_SLAY_UNDEAD     0x00040000L /* Weapon slays undead */
#define TR1_SLAY_DEMON      0x00080000L /* Weapon slays demon */
#define TR1_SLAY_ORC        0x00100000L /* Weapon slays orc */
#define TR1_SLAY_TROLL      0x00200000L /* Weapon slays troll */
#define TR1_SLAY_GIANT      0x00400000L /* Weapon slays giant */
#define TR1_SLAY_DRAGON     0x00800000L /* Weapon slays dragon */
#define TR1_KILL_DRAGON     0x01000000L /* Weapon kills dragon */
#define TR1_KILL_DEMON      0x02000000L /* Weapon kills demon */
#define TR1_KILL_UNDEAD     0x04000000L /* Weapon "kills" undead */
#define TR1_BRAND_ACID      0x08000000L /* Weapon has poison brand */
#define TR1_BRAND_ELEC      0x10000000L /* Weapon has acid brand */
#define TR1_BRAND_FIRE      0x20000000L /* Weapon has elec brand */
#define TR1_BRAND_COLD      0x40000000L /* Weapon has fire brand */
#define TR1_BRAND_POIS      0x80000000L /* Weapon has cold brand */


/*TR1 Uber-Flags*/
#define TR1_ALL_STATS	(TR1_STR | TR1_INT | TR1_WIS | TR1_DEX | TR1_CON | TR1_AGI | TR1_STE | TR1_PER | TR1_LUC)



#define TR2_SUST_STR        0x00000001L /* Sustain STR */
#define TR2_SUST_INT        0x00000002L /* Sustain INT */
#define TR2_SUST_WIS        0x00000004L /* Sustain WIS */
#define TR2_SUST_DEX        0x00000008L /* Sustain DEX */
#define TR2_SUST_CON        0x00000010L /* Sustain CON */
#define TR2_SUST_AGI        0x00000020L /* Sustain AGI */
#define TR2_SUST_STE        0x00000040L /* Sustain STE */
#define TR2_SUST_PER        0x00000080L /* Sustain PER */
#define TR2_SUST_LUC        0x00000100L /* Sustain LUC */
#define TR2_2H              0x00000200L /* (reserved) */
#define TR2_NO_2H         0x00000400L /* (reserved) */
#define TR2_IM_ACID         0x00000800L /* Immunity to acid */
#define TR2_IM_ELEC         0x00001000L /* Immunity to elec */
#define TR2_IM_FIRE         0x00002000L /* Immunity to fire */
#define TR2_IM_COLD         0x00004000L /* Immunity to cold */
#define TR2_IM_POIS         0x00008000L /* Immunity to poison */
#define TR2_RES_ACID        0x00010000L /* Resist acid */
#define TR2_RES_ELEC        0x00020000L /* Resist elec */
#define TR2_RES_FIRE        0x00040000L /* Resist fire */
#define TR2_RES_COLD        0x00080000L /* Resist cold */
#define TR2_RES_POIS        0x00100000L /* Resist poison */
#define TR2_RES_FEAR        0x00200000L /* Resist fear */
#define TR2_RES_LITE        0x00400000L /* Resist lite */
#define TR2_RES_DARK        0x00800000L /* Resist dark */
#define TR2_RES_BLIND       0x01000000L /* Resist blind */
#define TR2_RES_CONFU       0x02000000L /* Resist confusion */
#define TR2_RES_SOUND       0x04000000L /* Resist sound */
#define TR2_RES_SHARD       0x08000000L /* Resist shards */
#define TR2_RES_NEXUS       0x10000000L /* Resist nexus */
#define TR2_RES_NETHR       0x20000000L /* Resist nether */
#define TR2_RES_CHAOS       0x40000000L /* Resist chaos */
#define TR2_RES_DISEN       0x80000000L /* Resist disenchant */

/*TR2 Uber-Flags*/
#define TR2_SUST_STATS	(TR2_SUST_STR | TR2_SUST_INT | TR2_SUST_WIS | TR2_SUST_DEX | \
						 TR2_SUST_CON | TR2_SUST_AGI | TR2_SUST_STE | TR2_SUST_PER | TR2_SUST_LUC)
#define TR2_RESISTANCE (TR2_RES_ACID | TR2_RES_ELEC | TR2_RES_FIRE | TR2_RES_COLD)
#define TR2_IMMUNE_ALL (TR2_IM_ACID | TR2_IM_ELEC | TR2_IM_FIRE | TR2_IM_COLD | TR2_IM_POIS)



#define TR3_SLOW_DIGEST     0x00000001L /* Slow digest */
#define TR3_FEATHER         0x00000002L /* Feather Falling */
#define TR3_LITE            0x00000004L /* Perma-Lite */
#define TR3_REGEN           0x00000008L /* Regeneration */
#define TR3_TELEPATHY       0x00000010L /* Telepathy */
#define TR3_SEE_INVIS       0x00000020L /* See Invis */
#define TR3_FREE_ACT        0x00000040L /* Free action */
#define TR3_HOLD_LIFE       0x00000080L /* Hold life */
#define TR3_NEVER_PICKUP    0x00000100L /* monsters can't pickup*/
#define TR3_IRONMAN_ONLY    0x00000200L	/* Ironman object */
#define TR3_LO_STEALTH	    0x00000400L
#define TR3_LO_PERCEPTION   0x00000800L
#define TR3_IMPACT          0x00001000L /* Earthquake blows */
#define TR3_TELEPORT        0x00002000L /* Random teleportation */
#define TR3_AGGRAVATE       0x00004000L /* Aggravate monsters */
#define TR3_DRAIN_EXP       0x00008000L /* Experience drain */
#define TR3_IGNORE_ACID     0x00010000L /* Item ignores Acid Damage */
#define TR3_IGNORE_ELEC     0x00020000L /* Item ignores Elec Damage */
#define TR3_IGNORE_FIRE     0x00040000L /* Item ignores Fire Damage */
#define TR3_IGNORE_COLD     0x00080000L /* Item ignores Cold Damage */
#define TR3_THROWING        0x00100000L /* Can be thrown for additional damage */
#define TR3_PERFECT_BALANCE	0x00200000L /* item with perfect balance  */
#define TR3_BLESSED         0x00400000L /* Item has been blessed */
#define TR3_ACTIVATE        0x00800000L /* Item can be activated */
#define TR3_INSTA_ART       0x01000000L /* Item makes an artifact */
#define TR3_EASY_KNOW       0x02000000L /* Item is known if aware */
#define TR3_HIDE_TYPE       0x04000000L /* Item hides description */
#define TR3_SHOW_MODS       0x08000000L /* Item shows Tohit/Todam */
#define TR3_VAMPIRE         0x10000000L /* (weapon gives vampirism) */
#define TR3_LIGHT_CURSE     0x20000000L /* Item has Light Curse */
#define TR3_HEAVY_CURSE     0x40000000L /* Item has Heavy Curse */
#define TR3_PERMA_CURSE     0x80000000L /* Item has Perma Curse */

/*TR3 Uber-Flags*/
#define TR3_IGNORE_ALL (TR3_IGNORE_ACID | TR3_IGNORE_ELEC | TR3_IGNORE_FIRE | TR3_IGNORE_COLD)



/* Native flags - extracted from feature flags */
#define TN1_NATIVE_LAVA 	ELEMENT_LAVA
#define TN1_NATIVE_ICE  	ELEMENT_ICE
#define TN1_NATIVE_OIL   	ELEMENT_OIL
#define TN1_NATIVE_FIRE   	ELEMENT_FIRE
#define TN1_NATIVE_SAND 	ELEMENT_SAND
#define TN1_NATIVE_FOREST	ELEMENT_FOREST
#define TN1_NATIVE_WATER 	ELEMENT_WATER
#define TN1_NATIVE_ACID   	ELEMENT_ACID
#define TN1_NATIVE_MUD 		ELEMENT_MUD
#define TN1_NATIVE_UNUSED 	0x0200




/*
 * Hack -- flag set 1 -- mask for "pval-dependant" flags.
 * Note that all "pval" dependant flags must be in "flags1".
 */
#define TR1_PVAL_MASK \
	(TR1_STR | TR1_INT | TR1_WIS | TR1_DEX | \
	 TR1_CON | TR1_AGI | TR1_STE | TR1_PER | \
	 TR1_LUC | TR1_SEARCH | TR1_INFRA | TR1_TUNNEL | \
	 TR1_SPEED | TR1_BLOWS | TR1_SHOTS | TR1_MIGHT)

/*
 * Flag set 3 -- mask for "ignore element" flags.
 */
#define TR3_IGNORE_MASK \
	(TR3_IGNORE_ACID | TR3_IGNORE_ELEC | TR3_IGNORE_FIRE | \
	 TR3_IGNORE_COLD )

/*
 * Stat sustain flags
 */
#define TR1_STAT_MOD_MASK \
	(0L)

#define TR2_STAT_MOD_MASK \
	(TR2_SUST_STR | TR2_SUST_INT | TR2_SUST_WIS | TR2_SUST_DEX | \
		  TR2_SUST__CON | TR2_SUST_AGI | TR2_SUST_STE | TR2_SUST_PER | TR2_SUST_LUC)

#define TR3_STAT_MOD_MASK \
	(0L)

#define TN1_STAT_MOD_MASK \
		(0L)

/*
 * Stat add flags
 */
#define TR1_STAT_SUST_MASK \
	(TR1_STR | TR1_INT | TR1_WIS | TR1_DEX | TR1_CON | TR1_AGI | TR1_STE | TR1_PER | TR1_LUC )

#define TR2_STAT_SUST_MASK \
	(0L)

#define TR3_STAT_SUST_MASK \
	(0L)

#define TN1_STAT_SUST_MASK \
		(0L)


/*
 * Immunity flags
 */
#define TR1_IMMUNITIES_MASK \
	(0L)

#define TR2_IMMUNITIES_MASK \
	(TR2_IM_ACID | TR2_IM_ELEC | TR2_IM_FIRE | TR2_IM_COLD | TR2_IM_POIS)

#define TR3_IMMUNITIES_MASK \
	(0L)

#define TN1_IMMUNITIES_MASK \
		(0L)


/*
 * Low Resist flags
 */
#define TR1_LOW_RESIST_MASK \
	(0L)

#define TR2_LOW_RESIST_MASK \
	(TR2_RES_ACID | TR2_RES_ELEC | TR2_RES_FIRE | TR2_RES_COLD)

#define TR3_LOW_RESIST_MASK \
	(0L)

#define TN1_LOW_RESIST_MASK \
		(0L)

/*
 * Medium Resist flags
 */
#define TR1_MED_RESIST_MASK \
	(0L)

#define TR2_MED_RESIST_MASK \
	(TR2_RES_FEAR | TR2_RES_LITE | TR2_RES_DARK | TR2_RES_BLIND | TR2_RES_CONFU | \
		TR2_RES_SOUND | TR2_RES_SHARD | TR2_RES_NEXUS)

#define TR3_MED_RESIST_MASK \
	(0L)

#define TN1_MED_RESIST_MASK \
		(0L)

/*
 * High Resist flags
 */
#define TR1_HIGH_RESIST_MASK \
	(0L)

#define TR2_HIGH_RESIST_MASK \
	(TR2_RES_NETHR |  TR2_RES_CHAOS | TR2_RES_DISEN)

#define TR3_HIGH_RESIST_MASK \
	(0L)

#define TN1_HIGH_RESIST_MASK \
		(0L)

/*
 * All Resist flags
 */
#define TR1_RESISTANCES_MASK \
	(TR1_LOW_RESIST_MASK |  TR1_MED_RESIST_MASK | TR1_HIGH_RESIST_MASK)

#define TR2_RESISTANCES_MASK \
	(TR2_LOW_RESIST_MASK |  TR2_MED_RESIST_MASK | TR2_HIGH_RESIST_MASK)

#define TR3_RESISTANCES_MASK \
	(TR3_LOW_RESIST_MASK |  TR3_MED_RESIST_MASK | TR3_HIGH_RESIST_MASK)

#define TN1_RESISTANCES_MASK \
		(TN1_LOW_RESIST_MASK |  TN1_MED_RESIST_MASK | TN1_HIGH_RESIST_MASK)

/*low level abilities*/

#define TR1_LOW_ABILITIES_MASK \
	(0L)

#define TR2_LOW_ABILITIES_MASK \
	(0L)

#define TR3_LOW_ABILITIES_MASK \
	(TR3_SLOW_DIGEST | TR3_FEATHER | TR3_LITE | TR3_REGEN | TR3_SEE_INVIS | \
	 TR3_SEE_INVIS | TR3_FREE_ACT)

#define TN1_LOW_ABILITIES_MASK \
		(0L)

/*high level abilities*/

#define TR1_HIGH_ABILITIES_MASK \
	(0L)

#define TR2_HIGH_ABILITIES_MASK \
	(0L)

#define TR3_HIGH_ABILITIES_MASK \
	(TR3_TELEPATHY | TR3_HOLD_LIFE)

#define TN1_HIGH_ABILITIES_MASK \
		(0L)


/*all abilities*/

#define TR1_ABILITIES_MASK \
	(TR1_LOW_ABILITIES_MASK | TR1_HIGH_ABILITIES_MASK)

#define TR2_ABILITIES_MASK \
	(TR2_LOW_ABILITIES_MASK | TR2_HIGH_ABILITIES_MASK)

#define TR3_ABILITIES_MASK \
	(TR3_LOW_ABILITIES_MASK | TR3_HIGH_ABILITIES_MASK)

#define TN1_ABILITIES_MASK \
		(TN1_LOW_ABILITIES_MASK | TR3_HIGH_ABILITIES_MASK)


/*Slay weapon types*/

#define TR1_SLAY_MASK \
	(TR1_SLAY_EVIL | TR1_SLAY_UNDEAD | TR1_SLAY_DEMON | TR1_SLAY_ORC | TR1_SLAY_TROLL | \
         TR1_SLAY_GIANT | TR1_SLAY_DRAGON)

#define TR2_SLAY_MASK \
	(0L)

#define TR3_SLAY_MASK \
	(0L)

#define TN1_SLAY_MASK \
		(0L)

/*Kill weapon types*/

#define TR1_KILL_MASK \
	(TR1_KILL_DRAGON | TR1_KILL_DEMON | TR1_KILL_UNDEAD)

#define TR2_KILL_MASK \
	(0L)

#define TR3_KILL_MASK \
	(0L)

#define TN1_KILL_MASK \
		(0L)

/* Elemental Brand weapon types*/

#define TR1_BRAND_MASK \
	(TR1_BRAND_POIS | TR1_BRAND_ACID | TR1_BRAND_ELEC | TR1_BRAND_FIRE | TR1_BRAND_COLD)

#define TR2_BRAND_MASK \
	(0L)

#define TR3_BRAND_MASK \
	(0L)

#define TN1_BRAND_MASK \
		(0L)

/* All weapon Multipliars*/

#define TR1_ALL_WEAPON_EGO_MASK \
	(TR1_SLAY_MASK | TR1_KILL_MASK | TR1_BRAND_MASK)

#define TR2_ALL_WEAPON_EGO_MASK \
	(TR2_SLAY_MASK | TR2_KILL_MASK | TR2_BRAND_MASK)

#define TR3_ALL_WEAPON_EGO_MASK \
	(TR3_SLAY_MASK | TR3_KILL_MASK | TR3_BRAND_MASK)

#define TN1_ALL_WEAPON_EGO_MASK \
		(TN1_SLAY_MASK | TN1_KILL_MASK | TN1_BRAND_MASK)

/* Native to Element types*/

#define TR1_NATIVE_MASK \
	(0L)

#define TR2_NATIVE_MASK \
	(0L)

#define TR3_NATIVE_MASK \
	(0L)

#define TN1_NATIVE_MASK \
		(TERRAIN_MASK)


/*
 * Hack -- special "xtra" object flag info (type)
 */
#define OBJECT_XTRA_STAT_SUSTAIN	1
#define OBJECT_XTRA_TYPE_HIGH_RESIST	2
#define OBJECT_XTRA_TYPE_POWER		3
#define OBJECT_XTRA_TYPE_IMMUNITY	4
#define OBJECT_XTRA_TYPE_STAT_ADD	5
#define OBJECT_XTRA_TYPE_SLAY		6 /*Weapons Only*/
#define OBJECT_XTRA_TYPE_KILL		7 /*Weapons Only*/
#define OBJECT_XTRA_TYPE_BRAND		8 /*Weapons Only*/
#define OBJECT_XTRA_TYPE_LOW_RESIST	9 /*Weapons Only*/
#define OBJECT_XTRA_TYPE_NATIVE		10 /*Footwear Only*/

/*
 * Hack -- special "xtra" object flag info (base flag value)
 */
#define OBJECT_XTRA_BASE_SUSTAIN	TR2_SUST_STR
#define OBJECT_XTRA_BASE_HIGH_RESIST		TR2_RES_POIS
#define OBJECT_XTRA_BASE_POWER		TR3_SLOW_DIGEST
#define OBJECT_XTRA_BASE_IMMUNITY	TR2_IM_ACID
#define OBJECT_XTRA_BASE_STAT_ADD	TR1_STR
#define OBJECT_XTRA_BASE_SLAY		TR1_SLAY_ANIMAL
#define OBJECT_XTRA_BASE_KILL		TR1_KILL_DRAGON
#define OBJECT_XTRA_BASE_BRAND		TR1_BRAND_ACID
#define OBJECT_XTRA_BASE_LOW_RESIST		TR2_RES_ACID
#define OBJECT_XTRA_BASE_NATIVE		TN1_NATIVE_LAVA

/*
 * Hack -- special "xtra" object flag info (number of flags)
 */
#define OBJECT_XTRA_SIZE_SUSTAIN	6
#define OBJECT_XTRA_SIZE_HIGH_RESIST	12
#define OBJECT_XTRA_SIZE_POWER		8
#define OBJECT_XTRA_SIZE_IMMUNITY	5
#define OBJECT_XTRA_SIZE_STAT_ADD	6
#define OBJECT_XTRA_SIZE_SLAY		8
#define OBJECT_XTRA_SIZE_KILL		3
#define OBJECT_XTRA_SIZE_BRAND		5
#define OBJECT_XTRA_SIZE_LOW_RESIST	4
#define OBJECT_XTRA_SIZE_NATIVE		NUM_NATIVE

/*Chance of adding additional flags after the first one*/
#define EXTRA_FLAG_CHANCE			20

#define EGO_AMMO_FLAME		99
#define EGO_AMMO_FROST		100
#define EGO_AMMO_VENOM		97

#define EGO_BRAND_ELEMENTS		41
#define BRAND_OFFSET_FLAME		2
#define BRAND_OFFSET_FROST		3
#define BRAND_OFFSET_VENOM		4

#define EGO_FIREPROOF	141

#define EGO_SHATTERED	143
#define EGO_BLASTED		144


#define LEV_EXTRA_COMBAT 	26
#define LEV_BRAVERY 	30

/*** Class flags ***/

#define CF_EXTRA_SHOT		0x00000001L	/* Extra shots when using sling*/
#define CF_BRAVERY_30		0x00000002L	/* Gains resist fear at plev 30 */
#define CF_BLESS_WEAPON		0x00000004L	/* Requires blessed/hafted weapons */
#define CF_CUMBER_GLOVE		0x00000008L	/* Gloves disturb spellcasting */
#define CF_ZERO_FAIL		0x00000010L /* Fail rates can reach 0% */
#define CF_BEAM				0x00000020L /* Higher chance of spells beaming */
#define CF_CHOOSE_SPELLS	0x00000040L	/* Allow choice of spells */
#define CF_PSEUDO_ID_HEAVY	0x00000080L /* Allow heavy pseudo-id */
#define CF_PSEUDO_ID_IMPROV	0x00000100L /* Pseudo-id improves quicker with player-level */
#define CF_ROGUE_COMBAT		0x00000200L /* Permits such as steal & critical hit*/
#define CF_EXTRA_ARROW		0x00000400L /* Extra arrow when using bow*/
#define CF_SET_TRAPS		0x00000800L /* Can set traps for monsters to fall into*/
#define CF_EXTRA_ATTACK		0x00001000L /* extra attack at level 26*/
#define CF_CFXXX14			0x00002000L
#define CF_CFXXX15			0x00004000L
#define CF_CFXXX16			0x00008000L
#define CF_CFXXX17			0x00010000L
#define CF_CFXXX18			0x00020000L
#define CF_CFXXX19			0x00040000L
#define CF_CFXXX20			0x00080000L
#define CF_CFXXX21			0x00100000L
#define CF_CFXXX22			0x00200000L
#define CF_CFXXX23			0x00400000L
#define CF_CFXXX24			0x00800000L
#define CF_CFXXX25			0x01000000L
#define CF_CFXXX26			0x02000000L
#define CF_CFXXX27			0x04000000L
#define CF_CFXXX28			0x08000000L
#define CF_CFXXX29			0x10000000L
#define CF_CFXXX30			0x20000000L
#define CF_CFXXX31			0x40000000L
#define CF_CFXXX32			0x80000000L



#define MONSTER_BLOW_MAX 4

/*used to populate the mon_power_ave table*/
#define CREATURE_NON_UNIQUE	0
#define CREATURE_UNIQUE 	1
#define CREATURE_TYPE_MAX	2


/*columns for the spell cost or damage flags*/
#define COL_SPELL_MANA_COST		0
#define COL_SPELL_DAM_MULT		1
#define COL_SPELL_DAM_DIV		2
#define COL_SPELL_DAM_VAR		3
#define COL_SPELL_BEST_RANGE	5



/*** Monster blow constants ***/

#define RBM_HIT           1
#define RBM_TOUCH         2
#define RBM_PUNCH         3
#define RBM_KICK          4
#define RBM_CLAW          5
#define RBM_BITE          6
#define RBM_STING         7
#define RBM_PECK          8
#define RBM_XXX1          9
#define RBM_BUTT         10
#define RBM_CRUSH        11
#define RBM_ENGULF       12
#define RBM_CRAWL        13
#define RBM_DROOL        14
#define RBM_SPIT         15
#define RBM_SLIME        16
#define RBM_GAZE         17
#define RBM_WAIL         18
#define RBM_SPORE        19
#define RBM_XXX4         20
#define RBM_BEG          21
#define RBM_INSULT       22
#define RBM_BEGUILE      23
#define RBM_XXX6         24

#define RBE_HURT       1
#define RBE_WOUND      2
#define RBE_BATTER     3
#define RBE_SHATTER    4

#define RBE_UN_BONUS   5
#define RBE_UN_POWER   6
#define RBE_LOSE_MANA  7
#define RBE_EAT_GOLD   8
#define RBE_EAT_ITEM   9
#define RBE_EAT_FOOD  10
#define RBE_EAT_LITE  11
#define RBE_HUNGER    12

#define RBE_POISON    13
#define RBE_ACID      14
#define RBE_ELEC      15
#define RBE_FIRE      16
#define RBE_COLD      17

#define RBE_BLIND     18
#define RBE_CONFUSE   19
#define RBE_TERRIFY   20
#define RBE_PARALYZE  21
#define RBE_HALLU     22
#define RBE_DISEASE   23

#define RBE_LOSE_STR  24
#define RBE_LOSE_INT  25
#define RBE_LOSE_WIS  26
#define RBE_LOSE_DEX  27
#define RBE_LOSE_CON  28
#define RBE_LOSE_AGI  29
#define RBE_LOSE_STE  30
#define RBE_LOSE_PER  31
#define RBE_LOSE_LUC  32
#define RBE_LOSE_ALL  33

#define RBE_EXP_10    34
#define RBE_EXP_20    35
#define RBE_EXP_40    36
#define RBE_EXP_80    37

#define RBE_BEGUILE   38



/*** Monster flags ***/


/*
 * Special Monster Flags
 */
#define MFLAG_VIEW      	0x00000001L  /* Monster is in line of sight */
#define MFLAG_STERILE		0x00000002L  /* Sterilized Monster */
#define MFLAG_MIMIC  		0x00000004L  /* A mimic detected as an object */
#define MFLAG_ACTV      	0x00000008L  /* Monster is in active mode */
#define MFLAG_HIDE			0x00000010L  /* Monster is hiding in terrain */
#define MFLAG_TOWN      	0x00000020L  /* Monster is using "townsman" AI */
#define MFLAG_SHOW			0x00000040L  /* Monster is recently memorized */
#define MFLAG_MARK			0x00000080L  /* Monster is currently memorized */
#define MFLAG_WARY     	 	0x00000100L  /* Monster is wary (used for traps)*/
#define MFLAG_FLYING       	0x00000200L  /* Monster is flying */
#define MFLAG_TEMP         	0x00000400L  /* Temporary */
#define MFLAG_QUEST			0x00000800L  /* Monster is a quest monster */
#define MFLAG_SLOWER    	0x00001000L  /* Monster is slightly slower than normal */
#define MFLAG_FASTER    	0x00002000L  /* Monster is slightly faster than normal */
#define MFLAG_ALWAYS_CAST	0x00004000L  /* Monster will cast a spell first opportunity */
#define MFLAG_ATTACKED_BAD	0x00008000L  /* Monster has been sneak attacked */
#define MFLAG_AGGRESSIVE	0x00010000L  /* Monster will act aggresively towards the player */
#define MFLAG_HIT_BY_RANGED	0x00020000L  /* Monster has been hit with a spell*/
#define MFLAG_HIT_BY_MELEE	0x00040000L  /* Monster was just meleed by player last turn*/
#define MFLAG_NEED_PASS_WALL_FLOW	0x00080000L  /* Monster needs help getting to the player */
#define MFLAG_QUEST_SUMMON  0x00100000L  /* Monster was summoned by a questor */
#define MFLAG_JUST_SCARED   0x00200000L  /* Monster was scared this turn */



/*Monster Native Flags*/
#define RN1_N_LAVA		ELEMENT_LAVA/* Native to Lava */
#define RN1_N_ICE		ELEMENT_ICE	/* Native to Ice */
#define RN1_N_OIL		ELEMENT_OIL	/* Native to Oil */
#define RN1_N_FIRE		ELEMENT_FIRE	/* Native to Fire */
#define RN1_N_SAND		ELEMENT_SAND	/* Native to Sand */
#define RN1_N_FOREST	ELEMENT_FOREST	/* Native to Forest */
#define RN1_N_WATER		ELEMENT_WATER	/* Native to Water */
#define RN1_N_ACID		ELEMENT_ACID	/* Native to Acid */
#define RN1_N_MUD		ELEMENT_MUD	/* Native to Mud */
#define RN1_RNXX1_2		0x00000200	/* Unused */
#define RN1_RNXX1_1		0x00000400	/* Unused */
#define RN1_RNXXX_0		0x00000800	/* Unused */
#define RN1_RNXXX_1		0x00001000	/* Unused */
#define RN1_RNXXX_2		0x00002000	/* Unused */
#define RN1_RNXXX_3		0x00004000	/* Unused */
#define RN1_RNXXX_4		0x00008000	/* Unused */
/*other 16 bits unused*/

/*
 * New monster race bit flags
 */
#define RF1_UNIQUE			0x00000001	/* Unique Monster */
#define RF1_QUESTOR			0x00000002	/* Quest Monster */
#define RF1_MALE			0x00000004	/* Male gender */
#define RF1_FEMALE			0x00000008	/* Female gender */
#define RF1_CHAR_CLEAR		0x00000010	/* Absorbs symbol */
#define RF1_CHAR_MIMIC		0x00000020	/* Monster can mimic a symbol */
#define RF1_ATTR_CLEAR		0x00000040	/* Absorbs color */
#define RF1_ATTR_MULTI		0x00000080	/* Changes color */
#define RF1_FORCE_DEPTH		0x00000100	/* Start at "correct" depth */
#define RF1_FORCE_MAXHP		0x00000200	/* Start with max hitpoints */
#define RF1_FORCE_SLEEP		0x00000400	/* Start out sleeping */
#define RF1_FORCE_EXTRA		0x00000800	/* Unused */
#define RF1_FRIEND			0x00001000	/* Arrive with 2-3 friends*/
#define RF1_FRIENDS			0x00002000	/* Arrive with 4-6 friends */
#define RF1_ESCORT			0x00004000	/* Arrive with 4-6 escorts  */
#define RF1_ESCORTS			0x00008000	/* Arrive with 12-18 large escorts  */
#define RF1_NEVER_BLOW		0x00010000	/* Never make physical blow */
#define RF1_NEVER_MOVE		0x00020000	/* Never make physical move */
#define RF1_RAND_25			0x00040000	/* Moves randomly (25%) */
#define RF1_RAND_50			0x00080000	/* Moves randomly (50%) */
#define RF1_ONLY_GOLD		0x00100000	/* Drop only gold */
#define RF1_ONLY_ITEM		0x00200000	/* Drop only items */
#define RF1_DROP_60			0x00400000	/* Drop an item/gold (60%) */
#define RF1_DROP_90			0x00800000	/* Drop an item/gold (90%) */
#define RF1_DROP_1D2		0x01000000	/* Drop 1d2 items/gold */
#define RF1_DROP_2D2		0x02000000	/* Drop 2d2 items/gold */
#define RF1_DROP_3D2		0x04000000	/* Drop 3d2 items/gold */
#define RF1_DROP_4D2		0x08000000	/* Drop 4d2 items/gold */
#define RF1_DROP_GOOD		0x10000000	/* Drop good items */
#define RF1_DROP_GREAT		0x20000000	/* Drop great items */
#define RF1_DROP_CHEST		0x40000000	/* Drop "useful" items */
#define RF1_DROP_CHOSEN		0x80000000	/* Drop "chosen" items */

/*TR1 uber-flags to cover multiple items*/
#define RF1_DROP_UP_TO_10	(RF1_DROP_2D2 | RF1_DROP_3D2)
#define RF1_DROP_UP_TO_12	(RF1_DROP_1D2 | RF1_DROP_2D2 | RF1_DROP_3D2)
#define RF1_DROP_UP_TO_14	(RF1_DROP_4D2 | RF1_DROP_1D2 | RF1_DROP_2D2)
#define RF1_DROP_UP_TO_16	(RF1_DROP_4D2 | RF1_DROP_3D2 | RF1_DROP_1D2)
#define RF1_DROP_UP_TO_18	(RF1_DROP_4D2 | RF1_DROP_3D2 | RF1_DROP_2D2)
#define RF1_DROP_UP_TO_20	(RF1_DROP_4D2 | RF1_DROP_3D2 | RF1_DROP_2D2 | RF1_DROP_1D2)

/*
 * New monster race bit flags
 */
#define RF2_STUPID		0x00000001	/* Monster is stupid */
#define RF2_SMART		0x00000002	/* Monster is smart */
#define RF2_HAS_LITE        	0x00000004  	/* Monster carries light */
#define RF2_RF2XXX2		0x00000008	/* (?) */
#define RF2_INVISIBLE		0x00000010	/* Monster avoids vision */
#define RF2_COLD_BLOOD		0x00000020	/* Monster avoids infra */
#define RF2_EMPTY_MIND		0x00000040	/* Monster avoids telepathy.  NOT mindless. */
#define RF2_WEIRD_MIND		0x00000080	/* Monster avoids telepathy sometimes */
#define RF2_MULTIPLY		0x00000100	/* Monster reproduces */
#define RF2_REGENERATE		0x00000200	/* Monster regenerates especially quickly */
#define RF2_RF2XXX4		0x00000400	/* (?) */
#define RF2_EVASIVE		0x00000800	/* Monster often avoids blows */
#define RF2_CLOUD_SURROUND	0x00001000	/* Surrounded by gas/spores/darkness */
#define RF2_RF2XXX5		0x00002000	/* (?) */
#define RF2_PLAYER_GHOST	0x00004000	/* Monster is a player Ghost */
#define RF2_STAY_NATIVE		0x00008000	/* Monster will not leave native terrain */
#define RF2_OPEN_DOOR		0x00010000	/* Monster can open doors */
#define RF2_BASH_DOOR		0x00020000	/* Monster can bash doors */
#define RF2_PASS_WALL		0x00040000	/* Monster can pass walls */
#define RF2_KILL_WALL		0x00080000	/* Monster can destroy walls */
#define RF2_RF2XXX8		0x00100000	/* (?) */
#define RF2_KILL_BODY		0x00200000	/* Monster can kill monsters */
#define RF2_TAKE_ITEM		0x00400000	/* Monster can pick up items */
#define RF2_KILL_ITEM		0x00800000	/* Monster can crush items */
#define RF2_BRAIN_1		0x01000000	/* (?) */
#define RF2_LOW_MANA_RUN    	0x02000000 	/* Runs away/teleports when low on mana */
#define RF2_BRAIN_2         	0x04000000 	/* (?) */
#define RF2_POWERFUL        	0x08000000 	/* Breath loses less power with distance */
#define RF2_RF2XXX1         	0x10000000 	/* Unused */
#define RF2_RF2XXX9		0x20000000 	/* Unused */
#define RF2_RF2XX10      	0x40000000 	/* Unused */
#define RF2_BRAIN_3		0x80000000 	/* (?) */


/*
 * New monster race bit flags
 */
#define RF3_ORC				0x00000001	/* Orc */
#define RF3_TROLL			0x00000002	/* Troll */
#define RF3_GIANT			0x00000004	/* Giant */
#define RF3_DRAGON			0x00000008	/* Dragon */
#define RF3_DEMON			0x00000010	/* Demon */
#define RF3_UNDEAD			0x00000020	/* Undead */
#define RF3_EVIL			0x00000040	/* Evil */
#define RF3_ANIMAL			0x00000080	/* Animal */
#define RF3_FLYING			0x00000100	/* Monster flies */
#define RF3_VULN_SLEEP		0x00000200	/* Extra vulnerable to sleep */
#define RF3_VULN_SLOW		0x00000400	/* Extra vulnerable to slow */
#define RF3_VULN_CONF		0x00000800	/* Extra vulnerable to confusion */
#define RF3_HURT_LITE		0x00001000	/* Hurt by lite */
#define RF3_HURT_ROCK		0x00002000	/* Hurt by rock remover */
#define RF3_HURT_FIRE		0x00004000	/* Hurt badly by fire */
#define RF3_HURT_COLD		0x00008000	/* Hurt badly by cold */
#define RF3_IM_ACID			0x00010000	/* Resist acid a lot */
#define RF3_IM_ELEC			0x00020000	/* Resist elec a lot */
#define RF3_IM_FIRE			0x00040000	/* Resist fire a lot */
#define RF3_IM_COLD			0x00080000	/* Resist cold a lot */
#define RF3_IM_POIS			0x00100000	/* Resist poison a lot */
#define RF3_RES_CHAOS		0x00200000	/* Immune to chaos */
#define RF3_RES_NETHR		0x00400000	/* Resist nether a lot */
#define RF3_RES_WATER		0x00800000	/* Resist water, move fast in water  */
#define RF3_RES_PLAS		0x01000000	/* Resist plasma */
#define RF3_RES_NEXUS		0x02000000	/* Resist nexus */
#define RF3_RES_DISEN		0x04000000	/* Resist disenchantment */
#define RF3_NO_SLOW			0x08000000	/* Cannot be slowed */
#define RF3_NO_FEAR			0x10000000	/* Cannot be scared */
#define RF3_NO_STUN			0x20000000	/* Cannot be stunned */
#define RF3_NO_CONF			0x40000000	/* Cannot be confused */
#define RF3_NO_SLEEP		0x80000000	/* Cannot be slept */

/*TR3 uber-flags to cover multiple items*/
#define RF3_IM_ELEM	(RF3_IM_ACID | RF3_IM_ELEC | RF3_IM_FIRE | RF3_IM_COLD | RF3_IM_POIS)
#define RF3_IM_ALL	(RF3_IM_ELEM | RF3_RES_PLAS| RF3_RES_NETHR | RF3_RES_NEXUS | \
					 RF3_RES_DISEN | RF3_RES_CHAOS | RF3_RES_WATER)
#define RF3_NO_CHARM (RF3_NO_FEAR | RF3_NO_STUN | RF3_NO_CONF | RF3_NO_SLEEP | RF3_NO_SLOW)

/*
 * Monster racial flags - innate or physical ranged attacks
 * these spells do not have a failure rate - JG
 * other spells have a chance of failing
 */
#define RF4_SHRIEK         0x00000001  /* Shriek for help */
#define RF4_LASH           0x00000002  /* Use a melee attack at range 2 or 3 */
#define RF4_BOULDER        0x00000004  /* Throw a boulder */
#define RF4_SHOT           0x00000008  /* Fire sling shot */
#define RF4_ARROW          0x00000010  /* Fire arrows */
#define RF4_BOLT           0x00000020  /* Fire crossbow quarrels */
#define RF4_MISSL          0x00000040  /* Fire other physical missiles */
#define RF4_PMISSL         0x00000080  /* Fire poisoned missiles */
#define RF4_BRTH_ACID      0x00000100  /* Breathe Acid */
#define RF4_BRTH_ELEC      0x00000200  /* Breathe Elec */
#define RF4_BRTH_FIRE      0x00000400  /* Breathe Fire */
#define RF4_BRTH_COLD      0x00000800  /* Breathe Cold */
#define RF4_BRTH_POIS      0x00001000  /* Breathe Poison */
#define RF4_BRTH_PLAS      0x00002000  /* Breathe Plasma */
#define RF4_BRTH_LITE      0x00004000  /* Breathe Light */
#define RF4_BRTH_DARK      0x00008000  /* Breathe Dark */
#define RF4_BRTH_CONFU     0x00010000  /* Breathe Confusion */
#define RF4_BRTH_SOUND     0x00020000  /* Breathe Sound */
#define RF4_BRTH_SHARD     0x00040000  /* Breathe Shards */
#define RF4_BRTH_INER      0x00080000  /* Breathe Inertia */
#define RF4_BRTH_GRAV      0x00100000  /* Breathe Gravity */
#define RF4_RF4XX1X		   0x00200000  /* Unused */
#define RF4_BRTH_FORCE     0x00400000  /* Breathe Force */
#define RF4_BRTH_NEXUS     0x00800000  /* Breathe Nexus */
#define RF4_BRTH_NETHR     0x01000000  /* Breathe Nether */
#define RF4_BRTH_CHAOS     0x02000000  /* Breathe Chaos */
#define RF4_BRTH_DISEN     0x04000000  /* Breathe Disenchant */
#define RF4_BRTH_TIME      0x08000000  /* Breathe Time */
#define RF4_BRTH_MANA      0x10000000  /* Breathe Mana */
#define RF4_RF4XXX1        0x20000000  /*  */
#define RF4_RF4XXX2        0x40000000  /*  */
#define RF4_RF4XXX3        0x80000000  /*  */


/*uber-flags*/
#define RF4_BRTH_ELEM		(RF4_BRTH_ACID | RF4_BRTH_ELEC | RF4_BRTH_FIRE | \
						 RF4_BRTH_COLD | RF4_BRTH_POIS)
#define RF4_BRTH_POWER	(RF4_BRTH_ELEM | RF4_BRTH_NETHR | RF4_BRTH_LITE | RF4_BRTH_DARK | \
						 RF4_BRTH_CONFU | RF4_BRTH_SOUND | RF4_BRTH_CHAOS | RF4_BRTH_DISEN | \
						 RF4_BRTH_NEXUS)
#define RF4_BRTH_ALL	(RF4_BRTH_POWER | RF4_BRTH_TIME | RF4_BRTH_INER | RF4_BRTH_GRAV | \
						 RF4_BRTH_SHARD | RF4_BRTH_PLAS | RF4_BRTH_FORCE | RF4_BRTH_MANA)

/*
 * Monster racial flags - defined-area projection spells
 */
#define RF5_BALL_ACID      0x00000001  /* Acid Ball -> Acid Storm */
#define RF5_BALL_ELEC      0x00000002  /* Elec Ball -> Elec Storm */
#define RF5_BALL_FIRE      0x00000004  /* Fire Ball -> Fire Storm */
#define RF5_BALL_COLD      0x00000008  /* Cold Ball -> Cold Storm */
#define RF5_BALL_POIS      0x00000010  /* Stinking Cloud -> Poison Storm */
#define RF5_BALL_LITE      0x00000020  /* Light Ball / Starburst */
#define RF5_BALL_DARK      0x00000040  /* Darkness Ball -> Dark Storm */
#define RF5_BALL_CONFU     0x00000080  /* Confusion Ball -> Conf Storm */
#define RF5_BALL_SOUND     0x00000100  /* Sound Ball -> Sound Storm */
#define RF5_BALL_SHARD     0x00000200  /* Shard Ball -> Shard Storm */
#define RF5_RF5_XXX2       0x00000400  /* Unused */
#define RF5_BALL_STORM     0x00000800  /* Storm Ball -> Tempest */
#define RF5_BALL_NETHR     0x00001000  /* Nether Ball -> Nether Storm */
#define RF5_BALL_CHAOS     0x00002000  /* Chaos Ball -> Chaos Storm */
#define RF5_BALL_MANA      0x00004000  /* Mana Ball -> Mana Storm */
#define RF5_BALL_WATER     0x00008000  /* Water Ball */
#define RF5_BOLT_ACID      0x00010000  /* Acid Bolt */
#define RF5_BOLT_ELEC      0x00020000  /* Elec Bolt */
#define RF5_BOLT_FIRE      0x00040000  /* Fire Bolt */
#define RF5_BOLT_COLD      0x00080000  /* Cold Bolt */
#define RF5_BOLT_POIS      0x00100000  /* Poison Bolt */
#define RF5_BOLT_PLAS      0x00200000  /* Plasma Bolt */
#define RF5_BOLT_ICE       0x00400000  /* Ice Bolt */
#define RF5_BOLT_WATER     0x00800000  /* Water Bolt */
#define RF5_BOLT_NETHR     0x01000000  /* Nether Bolt */
#define RF5_BOLT_MANA      0x02000000  /* Magic Missile -> Mana Bolt */
#define RF5_RF5_XXX3       0x04000000  /* Unused */
#define RF5_BEAM_ELEC      0x08000000  /* Electric spark */
#define RF5_BEAM_ICE       0x10000000  /* Ice Lance */
#define RF5_BEAM_NETHR     0x20000000  /* Spear of Nether */
#define RF5_RF5_XXX4	   0x40000000  /* Unused */
#define RF5_HOLY_ORB       0x80000000  /* Orb of Draining */



/*
 * Monster racial flags - help self, hinder character, and special magics
 */

#define RF6_HASTE          0x00000001  /* Speed self */
#define RF6_ADD_MANA       0x00000002  /* Regain Mana */
#define RF6_HEAL           0x00000004  /* Heal self */
#define RF6_CURE           0x00000008  /* Cure self */
#define RF6_BLINK          0x00000010  /* Teleport Short */
#define RF6_TPORT          0x00000020  /* Teleport Long */
#define RF6_RF6XXX1        0x00000040  /*  */
#define RF6_TELE_SELF_TO   0x00000080  /* Teleport Selt to Player */
#define RF6_TELE_TO        0x00000100  /* Move player to monster */
#define RF6_TELE_AWAY      0x00000200  /* Move player far away */
#define RF6_TELE_LEVEL     0x00000400  /* Move player vertically */
#define RF6_RF6XXX2        0x00000800  /*  */
#define RF6_DARKNESS       0x00001000  /* Create Darkness */
#define RF6_TRAPS          0x00002000  /* Create Traps */
#define RF6_RF6XXX3        0x00004000  /* Unused */
#define RF6_DRAIN_MANA     0x00008000  /* Drain Mana */
#define RF6_RF6XXX4        0x00010000  /*  */
#define RF6_RF6XXX5        0x00020000  /*  */
#define RF6_MIND_BLAST     0x00040000  /* Blast Mind --> Brain Smash */
#define RF6_BRAIN_SMASH    0x00080000  /* */
#define RF6_WOUND          0x00100000  /* Cause Wounds */
#define RF6_RF6XXX6        0x00200000  /*  */
#define RF6_RF6XXX7        0x00400000  /*  */
#define RF6_RF6XXX8        0x00800000  /*  */
#define RF6_RF6XXX9        0x01000000  /*  */
#define RF6_HUNGER         0x02000000  /* Make Player Hungry */
#define RF6_RF6XX11        0x04000000  /*  */
#define RF6_SCARE          0x08000000  /* Frighten Player */
#define RF6_BLIND          0x10000000  /* Blind Player */
#define RF6_CONF           0x20000000  /* Confuse Player */
#define RF6_SLOW           0x40000000  /* Slow Player */
#define RF6_HOLD           0x80000000  /* Paralyze Player */


/*
 * Hack -- Bit masks to control what spells are considered
 * Monster racial flags - summons
 */

#define RF7_S_KIN          0x00000001  /* Summon Similar */
#define RF7_S_THROWTROLL        0x00000002  /*  */
#define RF7_RF7XXX2        0x00000004  /*  */
#define RF7_S_MONSTER      0x00000008  /* Summon Monster */
#define RF7_S_MONSTERS     0x00000010  /* Summon Monsters */
#define RF7_RF7XXX3        0x00000020  /*  */
#define RF7_RF7XXX4        0x00000040  /*  */
#define RF7_RF7XXX5	       0x00000080  /*  */
#define RF7_S_ANT          0x00000100  /* Summon Ants */
#define RF7_S_SPIDER       0x00000200  /* Summon Spiders */
#define RF7_S_HOUND        0x00000400  /* Summon Hounds */
#define RF7_S_ANIMAL       0x00000800  /* Summon Animals */
#define RF7_S_HYDRA        0x00001000  /* Summon Hydras */
#define RF7_RF7XXX7        0x00002000  /*  */
#define RF7_S_THIEF        0x00004000  /* Summon Thieves */
#define RF7_S_BERTBILLTOM  0x00008000  /* Summon Bert, Bill, and Tom */
#define RF7_RF7XXX8        0x00010000  /* */
#define RF7_S_AINU         0x00020000  /* Summon Ainu */
#define RF7_RF7XX10        0x00040000  /*  */
#define RF7_RF7XX11        0x00080000  /*  */
#define RF7_S_DRAGON       0x00100000  /* Summon Dragon */
#define RF7_S_HI_DRAGON    0x00200000  /* Summon Ancient Dragons */
#define RF7_RF7XX12        0x00400000  /*  */
#define RF7_RF7XX13        0x00800000  /*  */
#define RF7_S_DEMON        0x01000000  /* Summon Demon(s) */
#define RF7_S_HI_DEMON     0x02000000  /* Summon Greater Demons */
#define RF7_RF7XX14        0x04000000  /*  */
#define RF7_S_UNIQUE       0x08000000  /* Summon Unique Monster */
#define RF7_S_HI_UNIQUE    0x10000000  /* Summon High Unique Monster */
#define RF7_S_UNDEAD       0x20000000  /* Summon Undead */
#define RF7_S_HI_UNDEAD    0x40000000  /* Summon Greater Undead */
#define RF7_S_WRAITH       0x80000000  /* Summon Unique Wraith */


 /*
  * Some flags are obvious
  */

#define RF1_OBVIOUS_MASK \
	(RF1_UNIQUE | RF1_QUESTOR | RF1_MALE | RF1_FEMALE | \
	 RF1_FRIEND | RF1_FRIENDS | RF1_ESCORT | RF1_ESCORTS)

/*
 * "race" flags
 */

#define RF3_RACE_MASK \
	(RF3_ORC | RF3_TROLL | RF3_GIANT | RF3_DRAGON | \
	 RF3_DEMON | RF3_UNDEAD | RF3_EVIL | RF3_ANIMAL)

 /*
  * Hack -- Bit masks to control what spells are considered
  */

 /*
  * Attack spells.
  * Need special treatment in movement AI.
  */
#define RF4_BALL_MASK (0L)

#define RF5_BALL_MASK \
	(RF5_BALL_ACID | RF5_BALL_ELEC | RF5_BALL_FIRE | RF5_BALL_COLD | \
	 RF5_BALL_POIS | RF5_BALL_LITE | RF5_BALL_DARK | RF5_BALL_CONFU | \
	 RF5_BALL_SOUND | RF5_BALL_SHARD | RF5_BALL_STORM | RF5_BALL_NETHR | \
	 RF5_BALL_CHAOS | RF5_BALL_MANA | RF5_BALL_WATER | RF5_HOLY_ORB)

#define RF6_BALL_MASK (0L)

#define RF7_BALL_MASK (0L)

/*
 * Hack -- "bolt" spells that may hurt fellow monsters
 * Need special treatment in AI.
 */
#define RF4_BOLT_MASK \
        (RF4_ARROW | RF4_BOLT | RF4_SHOT | RF4_MISSL | RF4_PMISSL | RF4_BOULDER)

#define RF5_BOLT_MASK \
	(RF5_BOLT_ACID | RF5_BOLT_ELEC | RF5_BOLT_FIRE | RF5_BOLT_COLD | \
	 RF5_BOLT_POIS | RF5_BOLT_NETHR | RF5_BOLT_WATER | RF5_BOLT_MANA | \
	 RF5_BOLT_PLAS | RF5_BOLT_ICE)

#define RF6_BOLT_MASK \
   0L


#define RF7_BOLT_MASK \
   0L

/*
 * Hack -- "beam" spells that go through fellow monsters
 */
#define RF4_BEAM_MASK   (0L)

#define RF5_BEAM_MASK 	(RF5_BEAM_ELEC | RF5_BEAM_ICE | RF5_BEAM_NETHR)

#define RF6_BEAM_MASK 	(0L)

#define RF7_BEAM_MASK 	(0L)

/*
 * Archery attacks
 * Need special treatment in AI.
  */
#define RF4_ARCHERY_MASK \
        (RF4_ARROW | RF4_BOLT | RF4_SHOT | RF4_MISSL | RF4_PMISSL | RF4_BOULDER)

#define RF5_ARCHERY_MASK 	(0L)

#define RF6_ARCHERY_MASK 	(0L)

#define RF7_ARCHERY_MASK 	(0L)




/*
 * Breath attacks.
 * Need special treatment in movement AI.
 */

#define RF4_ELEM_BREATH_MASK	(RF4_BRTH_ACID | RF4_BRTH_ELEC | RF4_BRTH_FIRE | \
								 RF4_BRTH_COLD | RF4_BRTH_POIS)

#define RF4_BREATH_MASK \
        (RF4_ELEM_BREATH_MASK | RF4_BRTH_PLAS | RF4_BRTH_LITE | RF4_BRTH_DARK | \
         RF4_BRTH_CONFU | RF4_BRTH_SOUND | RF4_BRTH_SHARD | RF4_BRTH_INER | \
         RF4_BRTH_GRAV | RF4_BRTH_FORCE | RF4_BRTH_NEXUS | RF4_BRTH_NETHR | \
         RF4_BRTH_CHAOS | RF4_BRTH_DISEN | RF4_BRTH_TIME | RF4_BRTH_MANA)

#define RF5_BREATH_MASK \
 	(0L)

#define RF6_BREATH_MASK \
	(0L)

#define RF7_BREATH_MASK \
	(0L)

 /*
  * Attack spells.
  * Need special treatment in movement AI.
  */
#define RF4_ATTACK_MASK \
        (RF4_ARCHERY_MASK | RF4_BOLT_MASK | RF4_BEAM_MASK | RF4_BALL_MASK)

#define RF5_ATTACK_MASK \
		(RF5_ARCHERY_MASK | RF5_BOLT_MASK | RF5_BEAM_MASK | RF5_BALL_MASK)

#define RF6_ATTACK_MASK \
		(RF6_ARCHERY_MASK | RF6_BOLT_MASK | RF6_BEAM_MASK | RF6_BALL_MASK | \
		RF6_WOUND | RF6_BRAIN_SMASH | RF6_MIND_BLAST)

#define RF7_ATTACK_MASK \
		(RF7_ARCHERY_MASK | RF7_BOLT_MASK | RF7_BEAM_MASK | RF7_BALL_MASK)


/*
 * Harassment (not direct damage) attacks.
 * Need special treatment in AI.
 */
#define RF4_HARASS_MASK \
        (RF4_SHRIEK)

#define RF5_HARASS_MASK \
 	(0L)

#define RF6_HARASS_MASK \
	(RF6_DARKNESS | RF6_TRAPS | RF6_HUNGER | RF6_DRAIN_MANA | \
         RF6_SCARE | RF6_BLIND | RF6_CONF | RF6_SLOW | RF6_HOLD)

#define RF7_HARASS_MASK \
	(0L)


/*
 * Summoning Spells
 * Need special treatment in AI.
  */
#define RF4_SUMMON_MASK \
        (0L)

#define RF5_SUMMON_MASK \
	(0L)

#define RF6_SUMMON_MASK \
	(0L)

#define RF7_SUMMON_MASK \
	(RF7_S_KIN |  RF7_S_THROWTROLL | RF7_S_MONSTER | RF7_S_MONSTERS | RF7_S_ANT | RF7_S_SPIDER | \
	 RF7_S_HOUND | RF7_S_ANIMAL | RF7_S_HYDRA | RF7_S_THIEF | RF7_S_BERTBILLTOM | \
	 RF7_S_AINU | RF7_S_DRAGON | RF7_S_HI_DRAGON | RF7_S_DEMON | RF7_S_HI_DEMON | \
	 RF7_S_UNIQUE | RF7_S_HI_UNIQUE |  RF7_S_UNDEAD | RF7_S_HI_UNDEAD | RF7_S_WRAITH)


/*
 * Spells that can be can cast without a player in sight
 * Need special treatment in AI.
 */
#define RF4_NO_PLAYER_MASK \
        (0L)

#define RF5_NO_PLAYER_MASK \
        (0L)

#define RF6_NO_PLAYER_MASK \
        (RF6_HEAL | RF6_ADD_MANA | RF6_TELE_SELF_TO | RF6_CURE)

#define RF7_NO_PLAYER_MASK \
        (0L)


/* Spell Desire Table Columns */
#define D_BASE     0
#define D_SUMM     1
#define D_HURT     2
#define D_MANA     3
#define D_ESC      4
#define D_TACT     5
#define D_RES      6
#define D_RANGE    7


/*
 * Monsters will run up to 25 grids away
 */
#define FLEE_RANGE      MAX_SIGHT + 5

/*
 * Hack -- Panicked monsters will run far, far away
 */
#define PANIC_RANGE      100

/* Spell Desire Table Columns */
#define D_BASE     0
#define D_SUMM     1
#define D_HURT     2
#define D_MANA     3
#define D_ESC      4
#define D_TACT     5
#define D_RES      6
#define D_RANGE    7




/*
 * Spells that improve the caster's tactical position
 */
#define RF4_TACTIC_MASK \
	(0L)

#define RF5_TACTIC_MASK \
	(0L)

#define RF6_TACTIC_MASK \
	(RF6_BLINK)


/*
 * Annoying spells
 */
#define RF4_ANNOY_MASK \
	(RF4_SHRIEK)

#define RF5_ANNOY_MASK \
	(RF5_DRAIN_MANA | RF5_SCARE | \
	 RF5_BLIND | RF5_CONF | RF5_SLOW | RF5_HOLD)

#define RF6_ANNOY_MASK \
	(RF6_TELE_TO | RF6_DARKNESS | RF6_TRAPS)


/*
 * Spells that increase the caster's relative speed
 */
#define RF4_HASTE_MASK \
	(0L)

#define RF5_HASTE_MASK \
	(RF5_SLOW | RF5_HOLD)

#define RF6_HASTE_MASK \
	(RF6_HASTE)


/*
 * Healing spells
 */
#define RF4_HEAL_MASK \
	(0L)

#define RF5_HEAL_MASK \
	(0L)

#define RF6_HEAL_MASK \
	(RF6_HEAL)


/*
 * Innate spell-like effects
 */
#define RF4_INNATE_MASK \
	(0L)

#define RF5_INNATE_MASK \
	(0L)

#define RF6_INNATE_MASK \
	(0L)


#define LEV_THEME_HEAD				11
#define LEV_THEME_CREEPING_COIN		0   /*creeping coins*/
#define LEV_THEME_ORC				1   /*orc*/
#define LEV_THEME_TROLL				2	/*troll*/
#define LEV_THEME_OGRE				3 	/*ogre*/
#define LEV_THEME_HOUND				4	/*hound*/
#define LEV_THEME_GIANT				5	/*giant*/
#define LEV_THEME_DRAGON_YOUNG		6	/*young dragon*/
#define LEV_THEME_DRAGON_ACID		7	/*acid dragon*/
#define LEV_THEME_DRAGON_FIRE		8	/*fire dragon*/
#define LEV_THEME_DRAGON_ELEC		9	/*electric dragon*/
#define LEV_THEME_DRAGON_COLD		10	/*cold dragon*/
#define LEV_THEME_DRAGON_POIS		11	/*poison dragon*/
#define LEV_THEME_DRAGON_CHROMATIC	12	/*chromatic dragon*/
#define LEV_THEME_DRAGON_MISC		13	/*dragon*/
#define LEV_THEME_DRAGON_ANCIENT	14	/*ancient dragon*/
#define LEV_THEME_JELLY				15	/*jelly*/
#define LEV_THEME_ORC_NAGA_YEEK_KOBOLD	16 /*kobold, yeek, ork, and naga*/
#define LEV_THEME_ANIMAL			17	/*animal*/
#define LEV_THEME_HUMANOID			18	/*humanoid*/
#define LEV_THEME_DEMON_MINOR		19	/*minor demon*/
#define LEV_THEME_DEMON_ALL			20	/*demon*/
#define LEV_THEME_DEMON_MAJOR		21	/*major demon*/
#define LEV_THEME_CAVE_DWELLER		22	/*cave dweller*/
#define LEV_THEME_UNDEAD			23	/*undead*/
#define LEV_THEME_DRAGON_ELEMENTAL  24  /*Elemental Dragons*/
#define LEV_THEME_TAIL				25

#define PIT_LEVEL_BOOST				6
#define NEST_LEVEL_BOOST			5
#define PIT_NEST_QUEST_BOOST		8

#define THEMED_LEVEL_NO_QUEST_BOOST	7
#define THEMED_LEVEL_QUEST_BOOST	10



/*** Option Definitions ***/

/*
 * Option indexes (offsets)
 *
 * These values are hard-coded by savefiles (and various pieces of code).
 */
#define OPT_USER_INTERFACE			0
#define OPT_DISTURBANCE			    16
#define OPT_GAME_PLAY			    41
#define OPT_EFFICIENCY			    48
#define OPT_BIRTH					128
#define OPT_CHEAT					160
#define OPT_ADULT					192
#define OPT_SCORE					224
#define OPT_NONE					255
#define OPT_MAX						256


/*
 * Option indexes (normal)
 *
 * These values are hard-coded by savefiles.
 */
#define OPT_rogue_like_commands		0
#define OPT_quick_messages			1
#define OPT_floor_query_flag		2
#define OPT_carry_query_flag		3
#define OPT_use_old_target			4
#define OPT_always_pickup			5
#define OPT_always_repeat			6
#define OPT_depth_in_feet			7
#define OPT_stack_force_notes		8
#define OPT_stack_force_costs		9
#define OPT_expand_inscribe         10
/* xxx */
/* xxx */
#define OPT_show_details			13
#define OPT_ring_bell				14
#define OPT_show_flavors			15
#define OPT_run_ignore_stairs		16
#define OPT_run_ignore_doors		17
#define OPT_run_cut_corners			18
#define OPT_run_use_corners			19
#define OPT_disturb_move			20
#define OPT_disturb_near			21
#define OPT_disturb_panel			22
#define OPT_disturb_state			23
#define OPT_disturb_minor			24
#define OPT_disturb_wakeup			25
/* xxx OPT_alert_hitpoint */
/* xxx OPT_alert_failure */
#define OPT_verify_destroy			28
#define OPT_verify_special			29
#define OPT_allow_quantity			30
/* xxx */
#define OPT_auto_haggle				32
#define OPT_auto_scum				33
#define OPT_allow_themed_levels		34
/* xxx testing_carry */
#define OPT_expand_look				36
#define OPT_expand_list				37
#define OPT_view_perma_grids		38
#define OPT_view_torch_grids		39
#define OPT_dungeon_stair			40
#define OPT_dungeon_align			41
/* xxx track_follow */
/* xxx track_target */
#define OPT_smart_cheat				47
#define OPT_view_reduce_lite		48
#define OPT_hidden_player			49
#define OPT_avoid_abort				50
#define OPT_avoid_other				51
#define OPT_flush_failure			52
#define OPT_flush_disturb			53
/* xxx */
#define OPT_fresh_before			55
#define OPT_fresh_after				56
/* xxx */
#define OPT_compress_savefile		58
#define OPT_hilite_player			59
#define OPT_view_yellow_lite		60
#define OPT_view_bright_lite		61
#define OPT_view_granite_lite		62
#define OPT_view_special_lite		63
#define OPT_easy_open 				64
#define OPT_easy_alter 				65
#define OPT_easy_floor 				66
#define OPT_show_piles				67
#define OPT_center_player			68
#define OPT_run_avoid_center		69
#define OPT_xchars_to_file			70
#define OPT_auto_more				71
#define OPT_toggle_xp				72
#define OPT_auto_display_lists		73
#define OPT_hp_changes_color  		74
#define OPT_verify_leave_quest		75
#define OPT_mark_squelch_items		76
/* xxx */
/* xxx */
/* xxx */
/* xxx xxx */
#define OPT_birth_maximize          (OPT_BIRTH+0)
#define OPT_birth_preserve          (OPT_BIRTH+1)
#define OPT_birth_no_stores         (OPT_BIRTH+2)
#define OPT_birth_no_artifacts      (OPT_BIRTH+3)
#define OPT_birth_rand_artifacts    (OPT_BIRTH+4)
#define OPT_birth_no_stacking       (OPT_BIRTH+5)
#define OPT_birth_take_notes        (OPT_BIRTH+6)
#define OPT_birth_force_small_lev	(OPT_BIRTH+7)
#define OPT_birth_retain_squelch	(OPT_BIRTH+8)
#define OPT_birth_no_xtra_artifacts (OPT_BIRTH+9)
#define OPT_birth_no_discovery		(OPT_BIRTH+10)
#define OPT_birth_easy_start	    (OPT_BIRTH+11)

/* xxx xxx */
#define OPT_cheat_peek				(OPT_CHEAT+0)
#define OPT_cheat_hear				(OPT_CHEAT+1)
#define OPT_cheat_room				(OPT_CHEAT+2)
#define OPT_cheat_xtra				(OPT_CHEAT+3)
#define OPT_cheat_know				(OPT_CHEAT+4)
#define OPT_cheat_live				(OPT_CHEAT+5)
/* xxx xxx */
#define OPT_adult_maximize			(OPT_ADULT+0)
#define OPT_adult_preserve			(OPT_ADULT+1)
#define OPT_adult_no_stores			(OPT_ADULT+2)
#define OPT_adult_no_artifacts		(OPT_ADULT+3)
#define OPT_adult_rand_artifacts	(OPT_ADULT+4)
#define OPT_adult_no_stacking		(OPT_ADULT+5)
#define OPT_adult_take_notes        (OPT_ADULT+6)
#define OPT_adult_force_small_lev   (OPT_ADULT+7)
#define OPT_adult_retain_squelch	(OPT_ADULT+8)
#define OPT_adult_no_xtra_artifacts (OPT_ADULT+9)
#define OPT_adult_no_discovery		(OPT_ADULT+10)
#define OPT_adult_easy_start		(OPT_ADULT+11)
/* xxx xxx */
#define OPT_score_peek				(OPT_SCORE+0)
#define OPT_score_hear				(OPT_SCORE+1)
#define OPT_score_room				(OPT_SCORE+2)
#define OPT_score_xtra				(OPT_SCORE+3)
#define OPT_score_know				(OPT_SCORE+4)
#define OPT_score_live				(OPT_SCORE+5)
/* xxx xxx */


/*
 * Hack -- Option symbols
 */
#define rogue_like_commands		op_ptr->opt[OPT_rogue_like_commands]
#define quick_messages			op_ptr->opt[OPT_quick_messages]
#define floor_query_flag		0
#define carry_query_flag		op_ptr->opt[OPT_carry_query_flag]
#define use_old_target			op_ptr->opt[OPT_use_old_target]
#define always_pickup			op_ptr->opt[OPT_always_pickup]
#define always_repeat			op_ptr->opt[OPT_always_repeat]
#define depth_in_feet			op_ptr->opt[OPT_depth_in_feet]
#define stack_force_notes		0
#define stack_force_costs		0
#define expand_inscribe                        op_ptr->opt[OPT_expand_inscribe]
/* xxx */
/* xxx */
#define show_details			1
#define ring_bell				op_ptr->opt[OPT_ring_bell]
#define show_flavors			op_ptr->opt[OPT_show_flavors]
#define run_ignore_stairs		1
#define run_ignore_doors		op_ptr->opt[OPT_run_ignore_doors]
#define run_cut_corners			1
#define run_use_corners			1
#define disturb_move			op_ptr->opt[OPT_disturb_move]
#define disturb_near			op_ptr->opt[OPT_disturb_near]
#define disturb_panel			op_ptr->opt[OPT_disturb_panel]
#define disturb_state			op_ptr->opt[OPT_disturb_state]
#define disturb_minor			op_ptr->opt[OPT_disturb_minor]
#define disturb_wakeup			op_ptr->opt[OPT_disturb_wakeup]
/* xxx */
/* xxx alert_failure */
#define verify_destroy			op_ptr->opt[OPT_verify_destroy]
#define verify_special			op_ptr->opt[OPT_verify_special]
#define allow_quantity			op_ptr->opt[OPT_allow_quantity]
/* xxx */
#define auto_haggle				0
#define auto_scum				0
#define allow_themed_levels		0
/* xxx testing_stack */
/* xxx testing_carry */
#define expand_look				1
#define expand_list				1
#define view_perma_grids		op_ptr->opt[OPT_view_perma_grids]
#define view_torch_grids		op_ptr->opt[OPT_view_torch_grids]
#define dungeon_align			op_ptr->opt[OPT_dungeon_align]
#define dungeon_stair			1
/* xxx track_follow */
/* xxx track_target */
#define smart_cheat				op_ptr->opt[OPT_smart_cheat]
#define view_reduce_lite		0
#define hidden_player			0
#define avoid_abort				0
#define avoid_other				0
#define flush_failure			op_ptr->opt[OPT_flush_failure]
#define flush_disturb			op_ptr->opt[OPT_flush_disturb]
/* xxx */
#define fresh_before			1
#define fresh_after				0
/* xxx */
#define compress_savefile		1
#define hilite_player			op_ptr->opt[OPT_hilite_player]
#define view_yellow_lite		op_ptr->opt[OPT_view_yellow_lite]
#define view_bright_lite		op_ptr->opt[OPT_view_bright_lite]
#define view_granite_lite		op_ptr->opt[OPT_view_granite_lite]
#define view_special_lite		op_ptr->opt[OPT_view_special_lite]
#define easy_open				op_ptr->opt[OPT_easy_open]
#define easy_alter				op_ptr->opt[OPT_easy_alter]
#define easy_floor				op_ptr->opt[OPT_easy_floor]
#define show_piles				op_ptr->opt[OPT_show_piles]
#define center_player			op_ptr->opt[OPT_center_player]
#define run_avoid_center		op_ptr->opt[OPT_run_avoid_center]
#define xchars_to_file			op_ptr->opt[OPT_xchars_to_file]
#define auto_more				op_ptr->opt[OPT_auto_more]
#define toggle_xp				op_ptr->opt[OPT_toggle_xp]
#define auto_display_lists		op_ptr->opt[OPT_auto_display_lists]
/* xxx */
/* xxx */
/* xxx */
/* xxx */
/* xxx xxx */
#define birth_point_based		0
#define birth_auto_roller		0
#define birth_maximize			1
#define birth_preserve			op_ptr->opt[OPT_birth_preserve]
#define birth_ironman			1
#define birth_no_stores			1
#define birth_no_artifacts		op_ptr->opt[OPT_birth_no_artifacts]
#define birth_rand_artifacts	op_ptr->opt[OPT_birth_rand_artifacts]
#define birth_no_stacking       op_ptr->opt[OPT_birth_no_stacking]
#define birth_take_notes        op_ptr->opt[OPT_birth_take_notes]
#define	birth_force_small_lev	op_ptr->opt[OPT_birth_force_small_lev]
#define birth_retain_squelch	op_ptr->opt[OPT_birth_retain_squelch]
#define birth_no_quests			1
#define birth_no_player ghosts	1
#define birth_no_store_services	1
#define birth_no_discovery		op_ptr->opt[OPT_birth_no_discovery]
#define birth_easy_start		op_ptr->opt[OPT_birth_easy_start]
#define birth_no_xtra_artifacts	0


/* xxx xxx */
#define cheat_peek				op_ptr->opt[OPT_cheat_peek]
#define cheat_hear				op_ptr->opt[OPT_cheat_hear]
#define cheat_room				op_ptr->opt[OPT_cheat_room]
#define cheat_xtra				op_ptr->opt[OPT_cheat_xtra]
#define cheat_know				op_ptr->opt[OPT_cheat_know]
#define cheat_live				op_ptr->opt[OPT_cheat_live]
/* xxx xxx */
#define adult_point_based		0
#define adult_auto_roller		0
#define adult_maximize			1
#define adult_preserve			op_ptr->opt[OPT_adult_preserve]
#define adult_ironman			1
#define adult_no_stores			op_ptr->opt[OPT_adult_no_stores]
#define adult_no_artifacts		op_ptr->opt[OPT_adult_no_artifacts]
#define adult_rand_artifacts	op_ptr->opt[OPT_adult_rand_artifacts]
#define adult_no_stacking		op_ptr->opt[OPT_adult_no_stacking]
#define adult_take_notes		op_ptr->opt[OPT_adult_take_notes]
#define	adult_force_small_lev	op_ptr->opt[OPT_adult_force_small_lev]
#define adult_retain_squelch	op_ptr->opt[OPT_adult_retain_squelch]
#define adult_no_quests			1
#define adult_no_player_ghosts	1
#define adult_no_store_services	1
#define adult_no_xtra_artifacts	0
#define adult_no_discovery		op_ptr->opt[OPT_adult_no_discovery]
#define adult_easy_start		op_ptr->opt[OPT_adult_easy_start]
#define hp_changes_color  		op_ptr->opt[OPT_hp_changes_color]
#define verify_leave_quest 		0
#define mark_squelch_items		op_ptr->opt[OPT_mark_squelch_items]
#define score_peek				op_ptr->opt[OPT_score_peek]
#define score_hear				op_ptr->opt[OPT_score_hear]
#define score_room				op_ptr->opt[OPT_score_room]
#define score_xtra				op_ptr->opt[OPT_score_xtra]
#define score_know				op_ptr->opt[OPT_score_know]
#define score_live				op_ptr->opt[OPT_score_live]
/* xxx xxx */


/*
 * Information for "do_cmd_options()".
 */
#define OPT_PAGE_MAX				7
#define OPT_PAGE_PER				20



/*** Macro Definitions ***/


/*
 * Hack -- The main "screen"
 */
#define term_screen	(angband_term[0])

/*
 * Monster macros
 */

/*
 * Determine if a given monster is "non-living"
 *
 * Neither demons nor undead are alive.  Neither vortexes nor elementals
 * are alive.  Storms and events are not alive.
 *
 * An chest, wand, rod or staff mimic is assumed to be "animated", and therefore
 * not alive.  All other mimics are "mimics", living creatures that look
 * like something non-living.
 */
#define monster_nonliving(M) \
	(((M)->flags3 & (RF3_DEMON))  || \
	 ((M)->flags3 & (RF3_UNDEAD)) || \
	 (strchr("Evg$+~-_", (M)->d_char)))


/*
 * Determine if the monster is fully visible.
 */
#define mon_fully_visible(M) \
(((M)->ml) && !((M)->mflag & (MFLAG_MIMIC)))

/*
 * Make sure the game doesn't crash if the monster is set to NEED_FLOW
 * and the game calls the flow array.
 */
#define get_monster_flow(M) \
	((M)->using_flow == (NEED_FLOW) ? FLOW_PASS_DOORS	: (M)->using_flow)

/*
 * Will the monster take damage on their current square?
 * Return false if they will take damage, true if they don't take damage
 */
#define cave_no_dam_for_mon(Y, X, M) \
	(is_monster_native(Y, X, M) || \
	f_info[cave_feat[Y][X]].dam_non_native == 0)


/*
 * Determine if a given inventory item is "aware"
 */
#define object_aware_p(T) \
	(k_info[(T)->k_idx].aware)

/*
 * Determine if a given inventory item is "tried"
 */
#define object_tried_p(T) \
	(k_info[(T)->k_idx].tried)


/*
 * Determine if a given inventory item is "known"
 * Test One -- Check for special "known" tag
 * Test Two -- Check for "Easy Know" + "Aware"
 */
#define object_known_p(T) \
	(((T)->ident & (IDENT_KNOWN)) || \
	 ((k_info[(T)->k_idx].k_flags3 & (TR3_EASY_KNOW)) && \
	  k_info[(T)->k_idx].aware))

 /*
  * Determine if the attr and char should consider the item's flavor
  *
  * Identified scrolls should use their own tile.
  */
#define use_flavor_glyph(T) \
	((k_info[(T)->k_idx].flavor) && \
	 !((k_info[(T)->k_idx].tval == TV_SCROLL) && object_aware_p(T)))


/*
 * Return the "attr" for a given item.
 * Use "flavor" if available.
 * Default to user definitions.
 */
#define object_attr(T) \
	(use_flavor_glyph(T) ? \
	 (flavor_info[k_info[(T)->k_idx].flavor].x_attr) : \
	 (k_info[(T)->k_idx].x_attr))

/*
 * Return the "attr" for a given item.
 * Use "flavor" if available.
 * Use default definitions.
 */
#define object_attr_default(T) \
       ((k_info[(T)->k_idx].flavor) ? \
        (flavor_info[k_info[(T)->k_idx].flavor].d_attr) : \
        (k_info[(T)->k_idx].d_attr))


/*
 * Return the "attr" for a k_idx.
 * Use "flavor" if available.
 * Default to user definitions.
 */
#define object_type_attr(T) \
	((k_info[T].flavor) ? \
	 (flavor_info[k_info[T].flavor].x_attr) : \
	 (k_info[T].x_attr))

/*
 * Return the "attr" for a k_idx.
 * Use "flavor" if available.
 * Use default definitions.
 */
#define object_type_attr_default(T) \
       ((k_info[T].flavor) ? \
        (flavor_info[k_info[T].flavor].d_attr) : \
        (k_info[T].d_attr))



/*
 * Return the "char" for a given item.
 * Use "flavor" if available.
 * Default to user definitions.
 */
#define object_char(T) \
	(use_flavor_glyph(T) ? \
	 (flavor_info[k_info[(T)->k_idx].flavor].x_char) : \
	 (k_info[(T)->k_idx].x_char))

/*
 * Return the "char" for a given item.
 * Use "flavor" if available.
 * Use default definitions.
 */
#define object_char_default(T) \
	((k_info[(T)->k_idx].flavor) ? \
	 (flavor_info[k_info[(T)->k_idx].flavor].d_char) : \
	 (k_info[(T)->k_idx].d_char))

/*
 * Return the "char" for a k_idx.
 * Use "flavor" if available.
 * Default to user definitions.
 */
#define object_type_char(T) \
	((k_info[T].flavor) ? \
	 (flavor_info[k_info[T].flavor].x_char) : \
	 (k_info[T].x_char))

/*
 * Return the "char" for a k_idx.
 * Use "flavor" if available.
 * Use default definitions.
 */
#define object_type_char_default(T) \
       ((k_info[T].flavor) ? \
        (flavor_info[k_info[T].flavor].d_char) : \
        (k_info[T].d_char))

/*
 * Artifacts use the "name1" field
 */
#define artifact_p(T) \
	((T)->art_num ? TRUE : FALSE)

#define artifact_known(T) \
	(artifact_p(T) && ( object_known_p(T) || \
            			(T)->discount == INSCRIP_TERRIBLE || \
            			(T)->discount == INSCRIP_INDESTRUCTIBLE || \
            			(T)->discount == INSCRIP_SPECIAL ))

/*
 * Ego-Items use the "name2" field
 */
#define ego_item_p(T) \
	((T)->ego_num ? TRUE : FALSE)


/*
 * Broken items.
 */
#define broken_p(T) \
	((T)->ident & (IDENT_BROKEN))

/*
 * Cursed items.
 */
#define cursed_p(T) \
	((T)->ident & (IDENT_CURSED))

/*
 * Ammo.
 */
#define ammo_p(T) \
	(((T)->tval == TV_BOLT) || ((T)->tval == TV_ARROW) || \
	((T)->tval == TV_SHOT))


/*
 * Convert an "attr"/"char" pair into a "pict" (P)
 */
#define PICT(A,C) \
	((((u16b)(A)) << 8) | ((byte)(C)))

/*
 * Convert a "pict" (P) into an "attr" (A)
 */
#define PICT_A(P) \
	((byte)((P) >> 8))

/*
 * Convert a "pict" (P) into an "char" (C)
 */
#define PICT_C(P) \
	((char)((byte)(P)))


/*
 * Convert a "location" (Y,X) into a "grid" (G)
 */
#define GRID(Y,X) \
	(256 * (Y) + (X))

/*
 * Convert a "grid" (G) into a "location" (Y)
 */
#define GRID_Y(G) \
	((int)((G) / 256U))

/*
 * Convert a "grid" (G) into a "location" (X)
 */
#define GRID_X(G) \
	((int)((G) % 256U))


/*
 * Determines if a map location is "meaningful"
 */
#define in_bounds(Y,X) \
	(((unsigned)(Y) < (unsigned)(p_ptr->cur_map_hgt)) && \
	 ((unsigned)(X) < (unsigned)(p_ptr->cur_map_wid)))

/*
 * Determines if a map location is fully inside the outer walls
 * This is more than twice as expensive as "in_bounds()", but
 * often we need to exclude the outer walls from calculations.
 */
#define in_bounds_fully(Y,X) \
	(((Y) > 0) && ((Y) < p_ptr->cur_map_hgt-1) && \
	 ((X) > 0) && ((X) < p_ptr->cur_map_wid-1))


/*
 * Determines if a map location is currently "on screen"
 * Note that "panel_contains(Y,X)" always implies "in_bounds(Y,X)".
 * Pre-storing this into a cave_info flag would be nice.  XXX XXX
 */
#define panel_contains(Y,X) \
	(((unsigned)((Y) - Term->offset_y) < (unsigned)(SCREEN_HGT)) && \
	 ((unsigned)((X) - Term->offset_x) < (unsigned)(SCREEN_WID)))


/*
 * Determines if an entity (monster/player) is native to the given feature.
 * NATIVE_FLAGS must contain the ELEMENT_* flag of the entity.
 */
#define is_monster_native_aux(FEAT, NATIVE_FLAGS) \
		(feat_ff3_match(FEAT, NATIVE_FLAGS) == feat_ff3_match(FEAT, TERRAIN_MASK))


/*
 * Determines if a monster is FULLY native to a certain location.
 */
#define is_monster_native(Y, X, RACE) is_monster_native_aux(cave_feat[Y][X], (RACE)->r_native)


/*
 * Determines if the player is FULLY native to a certain location.
 */
#define is_player_native(Y, X) is_monster_native_aux(cave_feat[Y][X], p_ptr->p_native)

/*
 * Determine if a "legal" grid contains the given CAVE_* flag
 */
#define cave_flag_bold(Y,X,FLG) \
	((cave_info[Y][X] & (FLG)) != 0)

/*
 * Determine if a "legal" grid is suitable for LOS
 *
 * Note the use of the new "CAVE_LOS" flag.
 */
#define cave_los_bold(Y,X) \
	cave_flag_bold(Y,X,CAVE_LOS)


/*
 * Determine if a "legal" grid is suitable for projections
 *
 * Note the use of the new "CAVE_PROJECT" flag.
 */
#define cave_project_bold(Y,X) \
	cave_flag_bold(Y,X,CAVE_PROJECT)


/*
 * Determine if a "legal" grid allows movement
 */
#define cave_passable_bold(Y,X) \
	cave_flag_bold(Y,X,CAVE_MOVE)

/*Convert old los function to generic_los*/
#define los(y1, x1, y2, x2) generic_los(y1, x1, y2, x2, CAVE_LOS)

/*
 * Determine if a "legal" grid is a "trap" grid
 */
#define cave_any_trap_bold(Y,X) \
	 (x_list[cave_x_idx[Y][X]].x_flags & (EF1_TRAP_DUMB | EF1_TRAP_SMART | EF1_TRAP_PLAYER | EF1_GLYPH))
/*
 * Determine if a "legal" grid is a "trap" for monsters (set by player)
 */
#define cave_monster_trap_bold(Y,X) \
	 (x_list[cave_x_idx[Y][X]].x_flags & (EF1_TRAP_PLAYER))
/*
 * Determine if a "legal" grid is a "trap" grid for players (set by monsters)
 */
#define cave_player_trap_bold(Y,X) \
	 (x_list[cave_x_idx[Y][X]].x_flags & (EF1_TRAP_DUMB | EF1_TRAP_SMART))

/*
 * Determine if a "legal" grid is a smart "trap" for players (set by monsters)
 */
#define cave_smart_trap_bold(Y,X) \
	 (x_list[cave_x_idx[Y][X]].x_flags & (EF1_TRAP_SMART))

/*
 * Determine if a "legal" grid is a smart "trap" for players (set by monsters)
 */
#define cave_passive_trap_bold(Y,X) \
	 (x_list[cave_x_idx[Y][X]].x_flags & (EF1_TRAP_DUMB))

/*
 * Determine if a "legal" grid is a "trap" grid for players (set by monsters)
 */
#define cave_player_glyph_bold(Y,X) \
	 (x_list[cave_x_idx[Y][X]].x_flags & (EF1_GLYPH))


/*
 * Determine if a "legal" grid is a "clean" floor grid
 *
 * Line 1 -- forbid non-dropable grids
 * Line 2 -- forbid unpassable grids
 * Line 3 -- forbid traps/glyphs
 * Line 4 -- forbid normal objects
 */
#define cave_clean_bold(Y,X) \
	(cave_ff1_match(Y, X, FF1_DROP) && \
	 cave_passable_bold(Y, X) && \
 	!cave_any_trap_bold(Y, X) && \
	 (cave_o_idx[Y][X] == 0))

/*
 * Determine if a "legal" grid is an "empty" floor grid
 *
 * Line 1 -- forbid doors, rubble, seams, walls
 * Line 2 -- forbid player/monsters
 * Line 3 -- forbid monster traps
 */
#define cave_empty_bold(Y,X) \
	(cave_ff1_match(Y, X, FF1_PLACE) && \
	 cave_passable_bold(Y, X) && \
 		!cave_player_glyph_bold(Y, X) && \
 		!cave_monster_trap_bold(Y, X) && \
	 	(cave_m_idx[Y][X] == 0))

/*
 * Determine if a "legal" grid is a valid starting grid for player
 */
#define cave_start_bold(Y,X) \
	(cave_passable_bold(Y, X) && \
	!cave_ff1_match(Y, X, FF1_PERMANENT) && \
	!cave_player_trap_bold(Y, X) && \
	(is_player_native(Y, X) || \
	 	(f_info[cave_feat[Y][X]].dam_non_native == 0)) && \
	!cave_ff2_match(Y, X, FF2_BRIDGED | FF2_COVERED) && \
 	(cave_m_idx[Y][X] == 0))


/*
 * Determine if a "legal" grid is an "naked" floor grid
 *
 * Line 1 -- forbid non-floors and permanent features
 * Line 2 -- forbid normal objects
 * Line 3 -- forbid player/monsters
 */
#define cave_naked_bold(Y,X) \
		(cave_ff1_match(Y, X, FF1_FLOOR) && \
		cave_passable_bold(Y, X) && \
		!cave_any_trap_bold(Y, X) && \
	 	(cave_o_idx[Y][X] == 0) && \
	 	(cave_m_idx[Y][X] == 0))

/*
 * Determine if a "legal" grid is an "plain" floor grid
 * A harmless passable grid free of objects, monsters and effects
 *
 * Line 1 -- forbid permanent features
 * Line 2 -- forbid unpassable features
 * Line 3 -- forbid traps and glyphs
 * Line 4 -- forbid dangerous features
 * Line 5 -- forbid objects
 * Line 6 -- forbid monsters
 */
#define cave_plain_bold(Y,X) \
	(!cave_ff1_match(Y, X, FF1_PERMANENT) && \
	cave_passable_bold(Y, X) && \
	!cave_any_trap_bold(Y, X) && \
	(f_info[cave_feat[Y][X]].dam_non_native == 0) && \
	(cave_o_idx[Y][X] == 0) && \
	(cave_m_idx[Y][X] == 0))


/*
 * Determine if a "legal" grid is suitable for trapping
 *
 * Line 1 -- forbid non-floors features
 * Line 2 -- forbid unpassable objects
 * Line 3 -- forbid traps/glyphs
 * Line 4 -- forbid certain elements
 * Line 5 -- forbid objects
 *
 * This macro ignores the presence of monsters
 */
#define cave_trappable_bold(Y, X) \
 (cave_ff1_match(Y, X, FF1_DROP) && \
 cave_passable_bold(Y, X) && \
 !cave_any_trap_bold(Y, X) && \
 !cave_ff3_match(Y, X, FF3_LAVA | FF3_WATER | FF3_ACID | FF3_OIL | FF3_FIRE) && \
 (cave_o_idx[Y][X] == 0))


/*
 * Determine if a "legal" grid is a "shop" grid
 */
#define cave_shop_bold(Y,X) \
	 (f_info[cave_feat[Y][X]].f_flags1 & (FF1_SHOP))


/*
 * Determine if a "legal" grid is a "wall" grid
 */
#define cave_wall_bold(Y,X) \
	 (f_info[cave_feat[Y][X]].f_flags1 & (FF1_WALL))

	 /*
 * Determine if a "legal" grid is a "wall" grid
 */
#define cave_door_bold(Y,X) \
	 (f_info[cave_feat[Y][X]].f_flags1 & (FF1_DOOR))

/*
 * Determine if a "legal" grid is an up stairs.
 */
#define cave_up_stairs(Y,X) \
   (cave_ff1_match(Y, X, FF1_STAIRS | FF1_LESS) == (FF1_STAIRS | FF1_LESS))

/*
 * Determine if a "legal" grid is a down stairs.
 */
#define cave_down_stairs(Y,X) \
   (cave_ff1_match(Y, X, FF1_STAIRS | FF1_MORE) == (FF1_STAIRS | FF1_MORE))

/*
 * Determine if a "legal" grid is a "stair" grid
 */
#define cave_stair_bold(Y,X) \
	cave_ff1_match(Y, X, FF1_STAIRS)

/*
 * Determine if a "legal" grid is "permanent"
 *
 * Line 1 -- perma-walls
 * Line 2-3 -- stairs
 * Line 4-5 -- shop doors
 */
#define cave_perma_bold(Y,X) \
	(f_info[cave_feat[Y][X]].f_flags1  & (FF1_PERMANENT))

/*
 * Determine if a "legal" grid is a door but not secret.
 */
#define cave_known_door_bold(Y,X) \
	(cave_ff1_match(Y, X, FF1_DOOR | FF1_SECRET) == (FF1_DOOR))

/*
 * Determine if a "legal" grid is a secret door.

 */
#define cave_secret_door_bold(Y,X) \
	(cave_ff1_match(Y, X, FF1_DOOR | FF1_SECRET) == \
	(FF1_DOOR | FF1_SECRET))


/*
 * Determine if a "legal" grid is a closed door.
 * Open or broken doors don't count.
 */
#define cave_closed_door(Y,X) \
  	cave_ff3_match(Y, X, FF3_DOOR_CLOSED)

/*
 * Determine if a "legal" grid is a open door.
 * Closed or broken doors don't count.
 */
#define cave_open_door(Y,X) \
  	cave_ff3_match(Y, X, FF3_DOOR_OPEN)

/*
 * Determine if a "legal" grid is a closed door but not secret.
 * Open or broken doors don't count.
 */
#define cave_known_closed_door(Y,X) \
  	(cave_ff3_match(Y, X, FF3_DOOR_CLOSED) && \
   	!cave_ff1_match(Y, X, FF1_SECRET))



/*
 * Determine if a "legal" grid is within "los" of the player
 *
 * Note the use of comparison to zero to force a "boolean" result
 */
#define player_has_los_bold(Y,X) \
	((cave_info[Y][X] & (CAVE_VIEW)) != 0)

/*
 * Determine if the player has a clear enough head to observe things
 */

#define player_can_observe() \
	((!p_ptr->blind) && (!p_ptr->confused) && (!p_ptr->image) && (!p_ptr->paralyzed))



/*
 * Determine if a "legal" grid can be "seen" by the player
 *
 * Note the use of comparison to zero to force a "boolean" result
 */
#define player_can_see_bold(Y,X) \
	((cave_info[Y][X] & (CAVE_SEEN)) != 0)

/*
 * Determine if a "legal" grid is within "line of fire" of the player
 *
 * Note the use of comparison to zero to force a "boolean" result
 */
#define player_can_fire_bold(Y,X) \
	((cave_info[Y][X] & (CAVE_FIRE)) != 0)


/*** Color constants ***/


/*
 * Angband "attributes" (with symbols, and base (R,G,B) codes)
 *
 * The "(R,G,B)" codes are given in "fourths" of the "maximal" value,
 * and should "gamma corrected" on most (non-Macintosh) machines.
 */

#define TERM_DARK		0	/* 'd' */	/* 0,0,0 */
#define TERM_WHITE		1	/* 'w' */	/* 4,4,4 */
#define TERM_SLATE		2	/* 's' */	/* 2,2,2 */
#define TERM_ORANGE		3	/* 'o' */	/* 4,2,0 */
#define TERM_RED		4	/* 'r' */	/* 3,0,0 */
#define TERM_GREEN		5	/* 'g' */	/* 0,2,1 */
#define TERM_BLUE		6	/* 'b' */	/* 0,0,4 */
#define TERM_UMBER		7	/* 'u' */	/* 2,1,0 */
#define TERM_L_DARK		8	/* 'D' */	/* 1,1,1 */
#define TERM_L_WHITE	9	/* 'W' */	/* 3,3,3 */
#define TERM_VIOLET		10	/* 'v' */	/* 4,0,4 */
#define TERM_YELLOW		11	/* 'y' */	/* 4,4,0 */
#define TERM_L_RED		12	/* 'R' */	/* 4,0,0 */
#define TERM_L_GREEN	13	/* 'G' */	/* 0,4,0 */
#define TERM_L_BLUE		14	/* 'B' */	/* 0,4,4 */
#define TERM_L_UMBER	15	/* 'U' */	/* 3,2,1 */


#define MSG_GENERIC          0
#define MSG_HIT              1
#define MSG_MISS             2
#define MSG_FLEE             3
#define MSG_DROP             4
#define MSG_KILL             5
#define MSG_LEVEL            6
#define MSG_DEATH            7
#define MSG_STUDY            8
#define MSG_TELEPORT         9
#define MSG_SHOOT           10
#define MSG_QUAFF           11
#define MSG_ZAP_ROD         12
#define MSG_WALK            13
#define MSG_TPOTHER         14
#define MSG_HITWALL         15
#define MSG_EAT             16
#define MSG_STORE1          17
#define MSG_STORE2          18
#define MSG_STORE3          19
#define MSG_STORE4          20
#define MSG_DIG             21
#define MSG_OPENDOOR        22
#define MSG_SHUTDOOR        23
#define MSG_TPLEVEL         24
#define MSG_BELL            25
#define MSG_NOTHING_TO_OPEN 26
#define MSG_LOCKPICK_FAIL   27
#define MSG_STAIRS_DOWN     28
#define MSG_HITPOINT_WARN   29
#define MSG_ACT_ARTIFACT    30
#define MSG_USE_STAFF       31
#define MSG_DESTROY         32
#define MSG_MON_HIT         33
#define MSG_MON_TOUCH       34
#define MSG_MON_PUNCH       35
#define MSG_MON_KICK        36
#define MSG_MON_CLAW        37
#define MSG_MON_BITE        38
#define MSG_MON_STING       39
#define MSG_MON_BUTT        40
#define MSG_MON_CRUSH       41
#define MSG_MON_ENGULF      42
#define MSG_MON_CRAWL       43
#define MSG_MON_DROOL       44
#define MSG_MON_SPIT        45
#define MSG_MON_GAZE        46
#define MSG_MON_WAIL        47
#define MSG_MON_SPORE       48
#define MSG_MON_BEG         49
#define MSG_MON_INSULT      50
#define MSG_MON_MOAN        51
#define MSG_RECOVER         52
#define MSG_BLIND           53
#define MSG_CONFUSED        54
#define MSG_POISONED        55
#define MSG_AFRAID          56
#define MSG_PARALYZED       57
#define MSG_DRUGGED         58
#define MSG_SPEED           59
#define MSG_SLOW            60
#define MSG_SHIELD          61
#define MSG_BLESSED         62
#define MSG_HERO            63
#define MSG_BERSERK         64
#define MSG_PROT_EVIL       65
#define MSG_INVULN          66
#define MSG_SEE_INVIS       67
#define MSG_INFRARED        68
#define MSG_RES_ACID        69
#define MSG_RES_ELEC        70
#define MSG_RES_FIRE        71
#define MSG_RES_COLD        72
#define MSG_RES_POIS        73
#define MSG_STUN            74
#define MSG_CUT             75
#define MSG_STAIRS_UP       76
#define MSG_STORE_ENTER     77
#define MSG_STORE_LEAVE     78
#define MSG_STORE_HOME      79
#define MSG_MONEY1          80
#define MSG_MONEY2          81
#define MSG_MONEY3          82
#define MSG_SHOOT_HIT       83
#define MSG_STORE5          84
#define MSG_LOCKPICK        85
#define MSG_DISARM          86
#define MSG_IDENT_BAD       87
#define MSG_IDENT_EGO       88
#define MSG_IDENT_ART       89
#define MSG_BR_ELEMENTS     90
#define MSG_BR_FROST        91
#define MSG_BR_ELEC         92
#define MSG_BR_ACID         93
#define MSG_BR_GAS          94
#define MSG_BR_FIRE         95
#define MSG_BR_CONF         96
#define MSG_BR_DISENCHANT   97
#define MSG_BR_CHAOS        98
#define MSG_BR_SHARDS       99
#define MSG_BR_SOUND        100
#define MSG_BR_LIGHT        101
#define MSG_BR_DARK         102
#define MSG_BR_NETHER       103
#define MSG_BR_NEXUS        104
#define MSG_BR_TIME         105
#define MSG_BR_INERTIA      106
#define MSG_BR_GRAVITY      107
#define MSG_BR_PLASMA       108
#define MSG_BR_FORCE        109
#define MSG_SUM_MONSTER     110
#define MSG_SUM_AINU        111
#define MSG_SUM_UNDEAD      112
#define MSG_SUM_ANIMAL      113
#define MSG_SUM_SPIDER      114
#define MSG_SUM_HOUND       115
#define MSG_SUM_HYDRA       116
#define MSG_SUM_DEMON       117
#define MSG_SUM_DRAGON      118
#define MSG_SUM_HI_UNDEAD   119
#define MSG_SUM_HI_DRAGON   120
#define MSG_SUM_HI_DEMON    121
#define MSG_SUM_WRAITH      122
#define MSG_SUM_UNIQUE      123
#define MSG_WIELD           124
#define MSG_CURSED          125
#define MSG_PSEUDOID        126
#define MSG_HUNGRY          127
#define MSG_NOTICE          128
#define MSG_AMBIENT_DAY     129
#define MSG_AMBIENT_NITE    130
#define MSG_AMBIENT_DNG1    131
#define MSG_AMBIENT_DNG2    132
#define MSG_AMBIENT_DNG3    133
#define MSG_AMBIENT_DNG4    134
#define MSG_AMBIENT_DNG5    135
#define MSG_CREATE_TRAP     136
#define MSG_SHRIEK          137
#define MSG_CAST_FEAR       138
#define MSG_HIT_GOOD        139
#define MSG_HIT_GREAT       140
#define MSG_HIT_SUPERB      141
#define MSG_HIT_HI_GREAT    142
#define MSG_HIT_HI_SUPERB   143
#define MSG_SPELL           144
#define MSG_PRAYER          145
#define MSG_KILL_UNIQUE     146
#define MSG_KILL_KING       147
#define MSG_DRAIN_STAT      148
#define MSG_MULTIPLY        149
#define MSG_LOSING_NATIVITY 150
#define MSG_LOSING_FLYING	151
#define MSG_HIDE_UNHIDE		152
#define MSG_STAT_CHANGES    153


#define MSG_MAX             154




/*
 * Maximum known sounds
 *
 * Should be the same as MSG_MAX for compatibility reasons.
 */
#define SOUND_MAX MSG_MAX

/*
 * Maximum number of macro trigger names
 */
#define MAX_MACRO_TRIGGER 200
#define MAX_MACRO_MOD 12



/*** Hack ***/


/*
 * Hack -- attempt to reduce various values
 */
#ifdef ANGBAND_LITE
# undef MACRO_MAX
# define MACRO_MAX	128
# undef QUARK_MAX
# define QUARK_MAX	128
# undef MESSAGE_MAX
# define MESSAGE_MAX	128
# undef MESSAGE_BUF
# define MESSAGE_BUF	4096
#endif


/*
 * Available graphic modes
 */
#define GRAPHICS_NONE           0
#define GRAPHICS_ORIGINAL       1
#define GRAPHICS_ADAM_BOLT      2
#define GRAPHICS_DAVID_GERVAIS  3
#define GRAPHICS_PSEUDO         4


/*
 * List of commands that will be auto-repeated
 *
 * ToDo: This string should be user-configurable.

 */
#define AUTO_REPEAT_COMMANDS "TBDoc+"


/*
 * Artifact activation index
 */
#define ACT_ILLUMINATION        0
#define ACT_MAGIC_MAP           1
#define ACT_CLAIRVOYANCE        2
#define ACT_PROT_EVIL           3
#define ACT_DISP_EVIL           4
#define ACT_HEAL1               5
#define ACT_HEAL2               6
#define ACT_CURE_WOUNDS         7
#define ACT_HASTE1              8
#define ACT_HASTE2              9
#define ACT_FIRE1               10
#define ACT_FIRE2               11
#define ACT_FIRE3               12
#define ACT_FROST1              13
#define ACT_FROST2              14
#define ACT_FROST3              15
#define ACT_FROST4              16
#define ACT_FROST5              17
#define ACT_ACID1               18
#define ACT_RECHARGE1           19
#define ACT_SLEEP               20
#define ACT_LIGHTNING_BOLT      21
#define ACT_ELEC2               22
#define ACT_BANISHMENT          23
#define ACT_MASS_BANISHMENT     24
#define ACT_IDENTIFY            25
#define ACT_DRAIN_LIFE1         26
#define ACT_DRAIN_LIFE2         27
#define ACT_BIZZARE             28
#define ACT_STAR_BALL           29
#define ACT_RAGE_BLESS_RESIST   30
#define ACT_PHASE               31
#define ACT_TRAP_DOOR_DEST      32
#define ACT_DETECT              33
#define ACT_RESIST              34
#define ACT_TELEPORT            35
#define ACT_RESTORE_LIFE        36
#define ACT_MISSILE             37
#define ACT_ARROW               38
#define ACT_REM_FEAR_POIS       39
#define ACT_STINKING_CLOUD      40
#define ACT_STONE_TO_MUD        41
#define ACT_TELE_AWAY           42
#define ACT_WOR                 43
#define ACT_CONFUSE             44
#define ACT_PROBE               45
#define ACT_FIREBRAND           46
#define ACT_STARLIGHT           47
#define ACT_MANA_BOLT           48
#define ACT_BERSERKER           49
#define ACT_RES_ACID			50
#define ACT_RES_ELEC			51
#define ACT_RES_FIRE			52
#define ACT_RES_COLD			53
#define ACT_RES_POIS			54

#define ACT_MAX                 55

/*
 * HACK - define if the source contains the cleanup_angband() function.
 */
#define HAS_CLEANUP


/*
 * Given an array, determine how many elements are in the array.
 */
#define N_ELEMENTS(a) (sizeof(a) / sizeof((a)[0]))



/*
 * There is a 1/40 (2.5%) chance of inflating the requested monster_level
 * during the creation of a monsters (see "get_mon_num()" in "monster.c").
 * Lower values yield harder monsters more often.
 */
#define NASTY_MON	(auto_scum ? 30 : 40)	/* 1/chance of inflated monster level */

/*
 * Special note used to mark the end of the notes section in the savefile
 */
#define NOTES_MARK "@@@@@@@ No more notes @@@@@@@"

/* Returns TRUE if T is a torch or a lantern */
#define fuelable_lite_p(T) (((T)->tval == TV_LITE) && (!artifact_p(T)) && ((T)->sval < SV_LITE_GLOW1 || (T)->sval == SV_LITE_MAGELIGHT))


/*
 * Get the index of a shaded color in angband_color_table.
 * base_color must be between 0 and 15. These are the TERM_* constants.
 * shade must be between 0 and 7 (8 shades supported, 0 is the base color).
 * 16 shades could be supported but the values returned are in the range 0-127
 * to avoid clashes with graphic or big_tile modes (bit 0x80 is reserved)
 * All shades will look like the base color in 16 color ports.
 */
#define MAKE_EXTENDED_COLOR(base_color, shade) \
((((shade) << 4) | ((base_color) & 0x0F)) & 0x7F)

/*
 * Get the base color of a given extended color (shade).
 * Values returned are in the range 0-15 (TERM_*). See above.
 */
#define GET_BASE_COLOR(ext_color) ((ext_color) & 0x0F)

/*
 * Get the shade number of a given extended color.
 * Values returned are in the range 0-7. See above.
 */
#define GET_SHADE(ext_color) (((ext_color) >> 4) & 0x07)

/*
 * Number of base colors. These are the TERM_* constants
 */

#define MAX_BASE_COLORS 16

/*
 * Number of shades, including the shade 0 (base colors)
 */
#define MAX_SHADES 8

/*
 * These are the return values of squelch_itemp()
 */
#define SQUELCH_FAILED -1
#define SQUELCH_NO      0
#define SQUELCH_YES     1


/* Utilitary macros for the grid queue type */

/* These two return the coordinates of the grid at the front of the queue */
/* THE QUEUE MUST CONTAIN AT LEAST ONE ELEMENT */
#define GRID_QUEUE_Y(Q) ((Q)->data[(Q)->head].y)
#define GRID_QUEUE_X(Q) ((Q)->data[(Q)->head].x)

/* Returns TRUE if the given queue is empty */
#define GRID_QUEUE_EMPTY(Q) ((Q)->head == (Q)->tail)

/* Returns TRUE if the given queue is full */
#define GRID_QUEUE_FULL(Q) ((((Q)->tail + 1) % (Q)->max_size) == (Q)->head)

/*Square a number*/
#define GET_SQUARE(X) 	((X) * (X))


/* The codified monster messages */
enum {
	MON_MSG_NONE = 0,

	/* project_m */
	MON_MSG_DIE,
	MON_MSG_DESTROYED,
	MON_MSG_RESIST_A_LOT,
	MON_MSG_HIT_HARD,
	MON_MSG_RESIST,
	MON_MSG_IMMUNE,
	MON_MSG_RESIST_SOMEWHAT,
	MON_MSG_UNAFFECTED,
	MON_MSG_SPAWN,
	MON_MSG_HEALTHIER,
	MON_MSG_FALL_ASLEEP,
	MON_MSG_CRINGE_LIGHT,
	MON_MSG_SHRIVEL_LIGHT,
	MON_MSG_LOSE_SKIN,
	MON_MSG_DISSOLVE,
	MON_MSG_SHUDDER,
	MON_MSG_AWARE_OF_CRAFTY_ABILITIES,
	MON_MSG_AWARE_OF_CUNNING_TACTICS,
	MON_MSG_SENSE_CRAFTY_ABILITIES,
	MON_MSG_SENSE_CUNNING_FOE,
	MON_MSG_CHANGE,
	MON_MSG_DISAPPEAR,
	MON_MSG_MORE_DAZED,
	MON_MSG_DAZED,
	MON_MSG_MORE_CONFUSED,
	MON_MSG_CONFUSED,
	MON_MSG_FLEE_IN_TERROR,
	MON_MSG_MORIA_DEATH,
	MON_MSG_MANA_DRAIN,

	/* message_pain */
	MON_MSG_UNHARMED,
	MON_MSG_BARELY_NOTICE,
	MON_MSG_FLINCH,
	MON_MSG_SQUELCH,
	MON_MSG_QUIVER,
	MON_MSG_WRITHE_ABOUT,
	MON_MSG_WRITHE_IN_AGONY,
	MON_MSG_JERK,
	MON_MSG_JERK_LIMPLY,
	MON_MSG_JERK_IN_PAIN,
	MON_MSG_JERK_IN_AGONY,
	MON_MSG_JERK_FEEBLY,
	MON_MSG_SHRUG_OFF,
	MON_MSG_SNARL,
	MON_MSG_SNARL_WITH_PAIN,
	MON_MSG_HOWL_IN_PAIN,
	MON_MSG_HOWL_IN_AGONY,
	MON_MSG_YELP_FEEBLY,
	MON_MSG_YELP_IN_PAIN,
	MON_MSG_HISS,
	MON_MSG_HISS_FURIOUSLY,
	MON_MSG_HISS_WITH_PAIN,
	MON_MSG_HISS_IN_AGONY,
	MON_MSG_REAR_UP_IN_ANGER,
	MON_MSG_GROWL_ANGRILY,
	MON_MSG_MEWL_IN_PAIN,
	MON_MSG_MEWL_PITIFULLY,
	MON_MSG_IGNORE_ATTACK,
	MON_MSG_DRONE_ANGRILY,
	MON_MSG_SCUTTLE_ABOUT,
	MON_MSG_TWITCH_IN_PAIN,
	MON_MSG_FLAP_ANGRILY,
	MON_MSG_JEER_IN_PAIN,
	MON_MSG_SQUAWK_WITH_PAIN,
	MON_MSG_TWITTER_IN_AGONY,
	MON_MSG_FLUTTER_ABOUT,
	MON_MSG_CHIRP_FEEBLY,
	MON_MSG_RATTLE,
	MON_MSG_CLATTER,
	MON_MSG_SHAKE,
	MON_MSG_STAGGER,
	MON_MSG_CRUMPLE,
	MON_MSG_GRUNT,
	MON_MSG_GRUNT_WITH_PAIN,
	MON_MSG_MOAN,
	MON_MSG_GROAN,
	MON_MSG_HESITATE,
	MON_MSG_SQUEAL_IN_PAIN,
	MON_MSG_SHRIEK_IN_PAIN,
	MON_MSG_SHRIEK_IN_AGONY,
	MON_MSG_CRY_OUT_FEEBLY,
	MON_MSG_CRY_OUT_IN_PAIN,
	MON_MSG_SCREAM_IN_PAIN,
	MON_MSG_SCREAM_IN_AGONY,
	MON_MSG_STERILIZE,

	/* Always leave this at the end */
	MAX_MON_MSG
};

/* Maxinum number of stacked monster messages */
#define MAX_STORED_MON_MSG		200

/*
 * Objects in the quiver are stored in groups. Each group has its own set of tags ranging from 0 to 9.
 * The order of the groups is determined by the value of these constants
 */
enum
{
	QUIVER_GROUP_BOLTS = 0,
	QUIVER_GROUP_ARROWS,
	QUIVER_GROUP_SHOTS,
	QUIVER_GROUP_THROWING_WEAPONS,
	MAX_QUIVER_GROUPS
};

/* Object origins */
#define ORIGIN_NONE             0
#define ORIGIN_BIRTH            1
#define ORIGIN_STORE            2
#define ORIGIN_FLOOR            3
#define ORIGIN_DROP_UNKNOWN     4
#define ORIGIN_DROP_KNOWN       5
#define ORIGIN_REWARD           6
#define ORIGIN_ACQUIRE          7
#define ORIGIN_CHEAT            9
#define ORIGIN_MIXED            10
#define ORIGIN_CHEST            11

/* Level types */
#define DUNGEON_TYPE_DEFAULT		1	/* Vanilla-like levels */
#define DUNGEON_TYPE_THEMED_LEVEL	2
#define DUNGEON_TYPE_TOWN			3
#define DUNGEON_TYPE_WILDERNESS		4

/*
 * Returns TRUE if a monster (given its race) can't handle doors and must use the FLOW_*_NO_DOORS flows
 */
#define MONSTER_HATES_DOORS(RACE) \
       (!((RACE)->flags2 & (RF2_OPEN_DOOR | RF2_BASH_DOOR | RF2_PASS_WALL | RF2_KILL_WALL)) && \
       !((RACE)->flags1 & (RF1_NEVER_MOVE)))

/*
 * The last row of the main window
 */
#define TERM_LAST_ROW (Term->hgt - 1)


/*
 * Return TRUE if the player activated debug mode
 */
#define DEBUG_MODE_ACTIVATED ((p_ptr->noscore & 0x0008) != 0)

/*
 * Return TRUE if the player can be disturbed (resting, running, etc.)
 * If stop_search is TRUE we check if the player is searching unusual things
 */
#define CHECK_DISTURB(stop_search) \
(p_ptr->command_rep || p_ptr->running || p_ptr->resting || ((stop_search) && p_ptr->searching))

/*
 * Minimum values for panel change offsets
 */
#define MIN_PANEL_CHANGE_OFFSET_Y 2
#define MIN_PANEL_CHANGE_OFFSET_X 4

