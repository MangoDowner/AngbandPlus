/* File: defines.h */

/* Purpose: global constants and macro definitions */

/*
 * Do not edit this file unless you know *exactly* what you are doing.
 *
 * Some of the values in this file were chosen to preserve game balance,
 * while others are hard-coded based on the format of old save-files, the
 * definition of arrays in various places, mathematical properties, fast
 * computation, storage limits, or the format of external text files.
 *
 * Changing some of these values will induce crashes or memory errors or
 * savefile mis-reads.  Most of the comments in this file are meant as
 * reminders, not complete descriptions, and even a complete knowledge
 * of the source may not be sufficient to fully understand the effects
 * of changing certain definitions.
 *
 * Lastly, note that the code does not always use the symbolic constants
 * below, and sometimes uses various hard-coded values that may not even
 * be defined in this file, but which may be related to definitions here.
 * This is of course bad programming practice, but nobody is perfect...
 *
 * For example, there are MANY things that depend on the screen being
 * 80x24, with the top line used for messages, the bottom line being
 * used for status, and exactly 22 lines used to show the dungeon.
 * Just because your screen can hold 46 lines does not mean that the
 * game will work if you try to use 44 lines to show the dungeon.
 *
 * You have been warned.
 */

/*
 * Current version number of Angband: 2.7.10 (for compatibility with 2.7.9)
 * beta 2
 */
#define VERSION_MAJOR   2
#define VERSION_MINOR   7
#define VERSION_PATCH   10

/*
 * This value is not currently used
 */
#define VERSION_EXTRA   0

/*
 * Number of grids in each block (vertically)
 */
#define BLOCK_HGT       10

/*
 * Number of grids in each block (horizontally)
 * Probably hard-coded to 11, see "generate.c"
 */
#define BLOCK_WID       11


/*
 * Number of grids in each panel (vertically)
 * Must be a multiple of BLOCK_HGT
 */
#define PANEL_HGT       5

/*
 * Number of grids in each panel (horizontally)
 * Must be a multiple of BLOCK_WID
 */
#define PANEL_WID       11

/*
 * Number of grids used to display the dungeon (vertically).
 * Must be a multiple of 11, probably hard-coded to 22.
 */
#define SCREEN_HGT      20

/*
 * Number of grids used to display the dungeon (horizontally).
 * Must be a multiple of 33, probably hard-coded to 66.
 */
#define SCREEN_WID      66

/*
 * how many sub-levels are allowed on a single level?
 */
#define MAX_SUB_LEVELS 50

/* in some instances, map_printing, for example, use bigger screen */
/* take care with MESSAGE_ROW and MAP_ROW to get this right!       */
#define VISIBLE_SCREEN_HGT 23
#define VISIBLE_SCREEN_WID 79

#define TOWN_WID        66 /* normally the same as the screen, take care with */
#define TOWN_HGT        20 /* smaller values, as the shops' placement may     */
                           /* cause errors - which aren't checked for!!!      */
/*
 * Maximum dungeon height in grids, must be a multiple of SCREEN_HGT,
 * probably hard-coded to SCREEN_HGT * 3.
 */
/* jk - was 66, must fit in 7 bits! */
#define MAX_HGT         120

/*
 * Maximum dungeon width in grids, must be a multiple of SCREEN_WID,
 * probably hard-coded to SCREEN_WID * 3.
 */
/* jk - was 198, must fit in 9 bits! */
#define MAX_WID         462

/*
 * Display highest priority object in the RATIO by RATIO area
 */
/* jk - was 3 */
/* this serves also as a size-indicator for the dungeon, so it governs */
/* what level is needed for a nice feeling */
#if ( (MAX_HGT / SCREEN_HGT) < (MAX_WID / SCREEN_WID) )
 #define RATIO (MAX_WID / SCREEN_WID)
#else
 #define RATIO (MAX_HGT / SCREEN_HGT)
#endif
#define CHANCE_TRAP_JAMMED_DOOR 2500
#define CHANCE_TRAP_SECRET_DOOR 1500
#define CHANCE_TRAP_LOCKED_DOOR 1000
#define CHANCE_TRAP_DOOR  500        /* in 10000 */
#define CHANCE_TRAP_FLOOR 4          /* in 10000 chance of placing a trap */
                                     /* in an expanded dungeon tunnel     */

/*
 * Display the entire map
 */
#define MAP_HGT (MAX_HGT / RATIO)
#define MAP_WID (MAX_WID / RATIO)

/*
 * the number of 'events' we remember
 *
 * this should be MAX_R_IDX + MAX_K_IDX + a very big margin
 */
#define MAX_EVENTS 50000

/*
 * Total number of stores (see "store.c", etc)
 */
#define MAX_STORES               30
#define MAX_STORES_LEVEL         10

/*
 * Total number of owners per store (see "store.c", etc)
 */
#define MAX_OWNERS          20

/*
 * Total number of ghosts
 */
#define MAX_GHOSTS         100

/*
 * The chance (x/100) that a ghost returns in another game
 * when slain.
 */
#define GHOST_RETURN       75

/*
 * Maximum number of player "sex" types (see "table.c", etc)
 */
#define MAX_SEXES            2

/*
 * Maximum number of player "race" types (see "table.c", etc)
 */
#define MAX_RACES           11

/*
 * Maximum number of player "class" types (see "table.c", etc)
 */
#define MAX_CLASS            9

/*
 * Maximum array bounds for template based arrays
 */
/* jk - it seems strange things happen when the size * SIZEOF(object) */
/* >60000 or so */

#define MAX_F_IDX       256     /* Max size for "f_info[]" */
#define MAX_F_IDX_MTYP   12     /* number of different f_info mtyp entries */
#define MAX_F_IDX_STYP   99     /* number of different f_info styp entries */
#define MAX_K_IDX       700     /* Max size for "k_info[]" */
#define MAX_A_IDX       256     /* Max size for "a_info[]" */
#define MAX_E_IDX       256     /* Max size for "e_info[]" */
/* jk - this was 572 */
#define MAX_R_IDX_NORMAL 600
/* max_r_idx = 1 (player, number 0) + .... normal monsters + ghosts */
#define MAX_R_IDX       MAX_R_IDX_NORMAL + MAX_GHOSTS + 1 /* Max size for "r_info[]" */
#define MAX_V_IDX       512     /* Max size for "v_info[]" */
/* jk */
#define MAX_T_IDX       256     /* Max size for "t_info[]" */
#define MAX_S_IDX       300     /* Max size for "s_info[]" */

/*
 * Maximum array bounds for entity list arrays
 */
/* jk - made dependant on ratio - 3 for original cave size, 5 - 110x330 */
/* max_i_idx is much higher now that monster inventories have been done */
/* and monsters carry their items from the generation onwards!          */
#define MAX_I_IDX       800*RATIO   /* Max size for "i_list[]" */
#define MAX_SPELL_SET_IDX       10*RATIO    /* Max number of items with spells in them */
#define MAX_M_IDX       400*RATIO   /* Max size for "mn_list[]" */
/* jk */
#define MAX_TR_IDX      200*RATIO   /* Max size for "t_list[]" */
/* each monster_inventory gets it's own item_set, so index should be high */
#define MAX_IS_IDX      500*RATIO   /* Max size for "is_list[]" */
/* be sure that item_set_flag < MAX_I_IDX or weird errors/crashes will happen! */
#define ITEM_SET_FLAG   0x04000     /* to indicate an item set is present */
#define ITEM_SET_MASK   0x03fff     /* to mask that to get the index      */

/*
 * Hack -- Maximum number of quests
 */
#define MAX_Q_IDX       4

/*
 * Maximum number of high scores in the high score file
 */
#define MAX_HISCORES    100

/*
 * Maximum dungeon level.  The player can never reach this level
 * in the dungeon, and this value is used for various calculations
 * involving object and monster creation.  It must be at least 100.
 * Setting it below 128 may prevent the creation of some objects.
 */
#define MAX_LEVEL       150

/*
 * Maximum size of the "lite" array (see "cave.c")
 * Note that the "lite radius" will NEVER exceed 5, and even if the "lite"
 * was rectangular, we would never require more than 128 entries in the array.
 */
#define LITE_MAX 128

/*
 * Maximum size of the "view" array (see "cave.c")
 * Note that the "view radius" will NEVER exceed 20, and even if the "view"
 * was octagonal, we would never require more than 1520 entries in the array.
 */
#define VIEW_MAX 1536

/*
 * Maximum size of the "temp" array (see "cave.c")
 * We must be as large as "VIEW_MAX" and "LITE_MAX" for proper functioning
 * of "update_view()" and "update_lite()".  We must also be as large as the
 * largest illuminatable room, but no room is larger than 800 grids.  We
 * must also be large enough to allow "good enough" use as a circular queue,
 * to calculate monster flow, but note that the flow code is "paranoid".
 */
#define TEMP_MAX 1536

/*
 * the total number of different flavors for different items in the game
 */
#define MAX_FLAVORS                890
#define FLAVOR_RING_START            0
#define FLAVOR_RING_END             51
#define FLAVOR_AMULET_START         70
#define FLAVOR_AMULET_END           85 
#define FLAVOR_STAFF_START         100
#define FLAVOR_STAFF_END           135
#define FLAVOR_WAND_START          150
#define FLAVOR_WAND_END            185
#define FLAVOR_ROD_START           200
#define FLAVOR_ROD_END             249
#define FLAVOR_FOOD_START          270
#define FLAVOR_FOOD_END            318
#define FLAVOR_POTION_START        340
#define FLAVOR_POTION_END          411
#define FLAVOR_SCROLL_START        430
#define FLAVOR_SCROLL_END          509
#define FLAVOR_SPELL_START         510
#define FLAVOR_SPELL_END           809
#define FLAVOR_BOLTBEAM_HSTART     810
#define FLAVOR_BOLTBEAM_VSTART     826
#define FLAVOR_BOLTBEAM_D1START    842
#define FLAVOR_BOLTBEAM_D2START    858
#define FLAVOR_BALL_START          874

/*
 * max length of strings used as flavor
 */
#define MAX_FLAVOR_LENGTH 25

/*
 * the max number of syllables used in scrolls/spells
 */
#define MAX_SYLLABLES 200

/*
 * the number of lines in the player history
 */
#define MAX_HIST 5

/*
 * OPTION: Maximum number of macros (see "io.c")
 * Default: assume at most 256 macros are used
 */
#define MACRO_MAX       256

/*
 * OPTION: Maximum number of "quarks" (see "io.c")
 * Default: assume at most 512 different inscriptions are used
 */
#define QUARK_MAX       512

/*
 * Maximum value storable in a "byte" (hard-coded)
 */
#define MAX_UCHAR       255

/*
 * Maximum value storable in a "s16b" (hard-coded)
 */
#define MAX_SHORT       32767

/*
 * Store constants
 */
#define STORE_INVEN_MAX    36      /* Max number of discrete objs in inven */
#define STORE_CHOICES      32      /* Number of items to choose stock from */
#define STORE_OBJ_LEVEL     5      /* Magic Level for normal stores */
#define STORE_TURNOVER      6      /* Normal shop turnover, per day */
/* jk - this was 6 - why? */
#define STORE_MIN_KEEP     21      /* Min slots to "always" keep full */
#define STORE_MAX_KEEP     30      /* Max slots to "always" keep full, it could be */
                                   /* less than this if it is very difficult       */
#define STORE_SHUFFLE     100      /* 1/Chance (per day) of an owner changing */
#define STORE_TURNS      1000      /* Number of turns between turnovers */
#define LAVA_TURNS        100      /* Number of turns between lava generation and possible cool-down */
#define STORE_ITEM_TRIES  500      /* Number of tries to create a satisfying store item */

/*
 * Misc constants
 */
#define TOWN_DAWN       10000   /* Number of turns from dawn to dawn XXX */
#define BREAK_GLYPH     550     /* Rune of protection resistance */
#define BTH_PLUS_ADJ    3       /* Adjust BTH per plus-to-hit */
#define MON_MULT_ADJ    4       /* High value slows multiplication */
#define MON_SUMMON_ADJ  2       /* Adjust level of summoned creatures */
#define MON_DRAIN_LIFE  2       /* Percent of player exp drained per hit */
#define USE_DEVICE      3       /* x> Harder devices x< Easier devices     */

/*
 * There is a 1/20 (5%) chance of inflating the requested object_level
 * during the creation of an object (see "get_obj_num()" in "object.c").
 * Lower values yield better objects more often.
 */
#define GREAT_OBJ       10

/*
 * There is a 1/50 (2%) chance of inflating the requested monster_level
 * during the creation of a monsters (see "get_mon_num()" in "monster.c").
 * Lower values yield harder monsters more often.
 */
#define NASTY_MON       40      /* 1/chance of inflated monster level */

/*
 * Refueling constants
 */
#define FUEL_TORCH      5000    /* Maximum amount of fuel in a torch */
#define FUEL_LAMP      15000L   /* Maximum amount of fuel in a lantern */

/*
 * More maximum values
 */
#define MAX_SIGHT          20   /* Maximum view distance */
#define MAX_RANGE          18   /* Maximum range (spells, etc) */

#define MAX_SPELLS_PER_ITEM  256  /* maximum spell number in a book rounded up to n*16 */
                               /* this *ISN'T* the number of spells together, but   */
                               /* the highest number a spell can have, ~234 now.    */
                               /* value 256 will take 256/8 = 32 bytes per spellset */

/*
 * There is a 1/160 chance per round of creating a new monster
 */
#define MAX_M_ALLOC_CHANCE      80

/*
 * Normal levels get at least 14 monsters
 */
/* jk - was 14 then 40 */
#define MIN_M_ALLOC_LEVEL       RATIO*8

/*
 * The town starts out with 4 residents during the day
 */
#define MIN_M_ALLOC_TD          4

/*
 * The town starts out with 8 residents during the night
 */
#define MIN_M_ALLOC_TN          8

/*
 * A monster can only "multiply" (reproduce) if there are fewer than 100
 * monsters on the level capable of such spontaneous reproduction.  This
 * is a hack which prevents the "mn_list[]" array from exploding due to
 * reproducing monsters.  Messy, but necessary.
 */
/* jk - you can get sick of lice taking over an entire level */
#define MAX_REPRO       50*RATIO

/*
 * Player constants
 */
#define PY_MAX_EXP      99999999L       /* Maximum exp          */
#define PY_MAX_GOLD     999999999L      /* Maximum gold         */
#define PY_MAX_LEVEL    50              /* Maximum level        */

/*
 * Player "food" crucial values
 */
/* jk - take care that 3*PY_FOOD_MAX fits in u16b */
#define PY_FOOD_MAX     15000   /* Food value (Bloated)         */
#define PY_FOOD_FULL    10000   /* Food value (Normal)          */
#define PY_FOOD_ALERT   2000    /* Food value (Hungry)          */
#define PY_FOOD_WEAK    1000    /* Food value (Weak)            */
#define PY_FOOD_FAINT   500     /* Food value (Fainting)        */
#define PY_FOOD_STARVE  100     /* Food value (Starving)        */

/*
 * Player regeneration constants
 */
#define PY_REGEN_NORMAL 197     /* Regen factor*2^16 when full          */
#define PY_REGEN_WEAK   98      /* Regen factor*2^16 when weak          */
#define PY_REGEN_FAINT  33      /* Regen factor*2^16 when fainting      */
#define PY_REGEN_HPBASE 1442    /* Min amount hp regen*2^16             */
#define PY_REGEN_MNBASE 524     /* Min amount mana regen*2^16           */

/*
 * Maximum number of "normal" pack slots, and the index of the "overflow"
 * slot, which can hold an item, but only temporarily, since it causes the
 * pack to "overflow", dropping the "last" item onto the ground.  Since this
 * value is used as an actual slot, it must be less than "INVEN_WIELD" (below).
 * Note that "INVEN_PACK" is probably hard-coded by its use in savefiles, and
 * by the fact that the screen can only show 23 items plus a one-line prompt.
 */
#define INVEN_PACK      23

/* jk */
/* this is the maximum */
#define MAX_FLOOR_ITEMS 16
/* this is the wanted maximum, ie if more than 4 items on 1 floor tile, */
/* try to slide them elsewere */
#define MAX_PILE_FLOOR   4
/* how many items in an item set */
#define ITEM_SET_SIZE   16

/*
 * Indexes used for various "equipment" slots (hard-coded by savefiles, etc).
 */
#define INVEN_WIELD     24
#define INVEN_BOW       25
#define INVEN_LEFT      26
#define INVEN_RIGHT     27
#define INVEN_NECK      28
#define INVEN_LITE      29
#define INVEN_BODY      30
#define INVEN_OUTER     31
#define INVEN_ARM       32
#define INVEN_HEAD      33
#define INVEN_HANDS     34
#define INVEN_FEET      35
#define INVEN_AMMO      36

#if 0
#define INVEN_GIRDLE    37
#define INVEN_BRACERS   38
#endif
/*
 * Total number of inventory slots (hard-coded).
 */
#define INVEN_TOTAL     37

/*
 * A "stack" of items is limited to less than 100 items (hard-coded).
 */
#define MAX_STACK_SIZE                  100

#define ARENA_LOOKING    0 /* just looking around            */
#define ARENA_ACCEPTED   1 /* has accepted offer, must fight */
#define ARENA_FIGHTING   2 /* is fighting monsters           */
#define ARENA_VICTOR     3 /* has prevailed against monsters */
#define ARENA_REWARDED   4 /* has been rewarded              */
#define ARENA_NONE      99 /* is currently not in the arena  */
/*
 * Indexes of the various "stats" (hard-coded by savefiles, etc).
 */
#define A_STR   0
#define A_INT   1
#define A_WIS   2
#define A_DEX   3
#define A_CON   4
#define A_CHR   5

/*
 * flags for determining which p1val influences what
 */
#define PVAL_MASK_STR 0x0001
#define PVAL_MASK_INT 0x0002
#define PVAL_MASK_WIS 0x0004
#define PVAL_MASK_DEX 0x0008
#define PVAL_MASK_CON 0x0010
#define PVAL_MASK_CHR 0x0020
#define PVAL_MASK_DIS 0x0040             /* disarming                    */
#define PVAL_MASK_DEV 0x0080             /* magic devices                */
#define PVAL_MASK_SAV 0x0100             /* saving throw                 */
#define PVAL_MASK_STL 0x0200             /* stealth                      */
#define PVAL_MASK_SRH 0x0400             /* search ability               */
#define PVAL_MASK_PCP 0x0800             /* search frequency             */


/*
 * how many lines between index-entries for displaying large files?
 */
#define INDEX_LINE_CNT 13

/*
 * Player sex constants (hard-coded by save-files, arrays, etc)
 */
#define SEX_FEMALE              0
#define SEX_MALE                1

/*
 * Player race constants (hard-coded by save-files, arrays, etc)
 */
#define RACE_HUMAN      0
#define RACE_HALF_ELF   1
#define RACE_ELF        2
#define RACE_HOBBIT     3
#define RACE_GNOME      4
#define RACE_DWARF      5
#define RACE_HALF_ORC   6
#define RACE_HALF_TROLL 7
#define RACE_DUNADAN    8
#define RACE_HIGH_ELF   9
#define RACE_DRUEDAIN   10

/*
 * Player class constants (hard-coded by save-files, arrays, etc)
 */
#define CLASS_WARRIOR   0
#define CLASS_MAGE      1
#define CLASS_PRIEST    2
#define CLASS_ROGUE     3
#define CLASS_RANGER    4
#define CLASS_PALADIN   5
#define CLASS_WARMAGE   6
#define CLASS_HIGHPRST  7
#define CLASS_GLADIATR  8

#define BIT_CLASS_WARRIOR  0x0001
#define BIT_CLASS_MAGE     0x0002
#define BIT_CLASS_PRIEST   0x0004
#define BIT_CLASS_ROGUE    0x0008
#define BIT_CLASS_RANGER   0x0010
#define BIT_CLASS_PALADIN  0x0020
#define BIT_CLASS_WARMAGE  0x0040
#define BIT_CLASS_HIGHPRST 0x0080
#define BIT_CLASS_GLADIATR 0x0100

#define MAGE_MAGIC_CLASS   0x00c2

#define bit_class(X) (1<<(X))

/*** Screen Locations ***/

/*
 * Some screen locations for various display routines
 * Currently, row 8 and 15 are the only "blank" rows.
 * That leaves a "border" around the "stat" values.
 */

/* jk - waiting in 1/1000 s per birth */
#define BIRTH_DELAY 0


/*
 * this defines how long ago a monster remembers it was
 * attacked by you
 */
#define MAX_ATTACK_HISTORY 65535

/* JK - defines row-offset for map & player printing */
/* MAP_ROW is relative to normal row of 1, so -1 means top of screen */
#define MAP_ROW         0
#define MESSAGE_ROW     0

#define ROW_DUNGNAME    MAP_ROW
#define COL_DUNGNAME    0

#define ROW_RACE        MAP_ROW+1
#define COL_RACE        0       /* <race name> */

#define ROW_CLASS       MAP_ROW+2
#define COL_CLASS       0       /* <class name> */

#define ROW_TITLE       MAP_ROW+3
#define COL_TITLE       0       /* <title> or <mode> */

#define ROW_LEVEL       MAP_ROW+4
#define COL_LEVEL       0       /* "LEVEL xxxxxx" */

#define ROW_EXP         MAP_ROW+5
#define COL_EXP         0       /* "EXP xxxxxxxx" */

#define ROW_GOLD        MAP_ROW+6
#define COL_GOLD        0       /* "AU xxxxxxxxx" */

#define ROW_POS         MAP_ROW+7
#define COL_POS         0

#define ROW_STAT        MAP_ROW+8
#define COL_STAT        0       /* "xxx   xxxxxx" */

#define ROW_AC          MAP_ROW+14
#define COL_AC          0       /* "Cur AC xxxxx" */

#define ROW_CURHP       MAP_ROW+15
#define COL_CURHP       0       /* "Cur HP xxxxx" */

#define ROW_MAXHP       MAP_ROW+15
#define COL_MAXHP       8       /* "Cur HP xxxxx" */


#define ROW_MAXSP       MAP_ROW+16
#define COL_MAXSP       0       /* "Max SP xxxxx" */

#define ROW_CURSP       MAP_ROW+17
#define COL_CURSP       0       /* "Cur SP xxxxx" */

#define ROW_INFO        MAP_ROW+18
#define COL_INFO        0       /* "xxxxxxxxxxxx" */

#define ROW_EQUIPPY     MAP_ROW+19
#define COL_EQUIPPY     0

#define ROW_CUT         MAP_ROW+22
#define COL_CUT         40       /* <cut> "Severe Cut" */

#define ROW_STUN        MAP_ROW+22
#define COL_STUN        51      /* <stun> "Severe Cut" */

/*0         1         2         3         4         5         6         7           */
/*012345678901234567890123456789012345678901234567890123456789012345678901234567890 */
/*HUNGRY BLIND CONFUSED AFRAID POISONED SLIDING REFLECTING SEARCHING FAST (+xx)     */
/*THROAT FIRE COLD ACID ELEC LIFT READING SEVERE CUT KNOCKED OUT                    */
/*<level name + depth                    >                                          */

#define ROW_HUNGRY      MAP_ROW+21
#define COL_HUNGRY      0       /* "Weak" / "Hungry" / "Full" / "Gorged" */

#define ROW_BLIND       MAP_ROW+21
#define COL_BLIND       7       /* "Blind" */

#define ROW_CONFUSED    MAP_ROW+21
#define COL_CONFUSED    13       /* "Confused" */

#define ROW_AFRAID      MAP_ROW+21
#define COL_AFRAID      22      /* "Afraid" */

#define ROW_POISONED    MAP_ROW+21
#define COL_POISONED    29      /* "Poisoned" */

#define ROW_SLIDING     MAP_ROW+21
#define COL_SLIDING     38      /* "Sliding" */

#define ROW_REFLECT     MAP_ROW+21
#define COL_REFLECT     46      /* "Reflecting" */

#define ROW_STATE       MAP_ROW+21
#define COL_STATE       57      /* <state> searching/repeat */

#define ROW_SPEED       MAP_ROW+21
#define COL_SPEED       67      /* "Slow (-NN)" or "Fast (+NN)" */

#define ROW_THROAT      MAP_ROW+22
#define COL_THROAT      0

#define ROW_FIRE        MAP_ROW+22
#define COL_FIRE        7

#define ROW_COLD        MAP_ROW+22
#define COL_COLD        12

#define ROW_ACID        MAP_ROW+22
#define COL_ACID        17

#define ROW_ELEC        MAP_ROW+22
#define COL_ELEC        22

#define ROW_LIFT        MAP_ROW+22
#define COL_LIFT        27

#define ROW_READING     MAP_ROW+22
#define COL_READING     32

#define ROW_DEPTH       MAP_ROW+23
#define COL_DEPTH       0     /* "Lev NNN" / "NNNN ft" */

/*** Terrain Feature Indexes (see "lib/edit/f_info.txt") ***/

#define DUNG_NOTHING   0
#define DUNG_FLOOR     1
#define DUNG_DOOR      2
#define DUNG_WALL      3
#define DUNG_SHRUB     4
#define DUNG_WATER     5
#define DUNG_STAIR     6
#define DUNG_TRAP      7
#define DUNG_WILDN     8
#define DUNG_ENTR      9
#define DUNG_PERWALL  10
#define DUNG_SIGN     11
#define DUNG_LAVA     12

#define MAX_DUNG_MTYP 12

#define DUNG_NOTHING_NORMAL 0

#define DUNG_FLOOR_NORMAL 0
#define DUNG_FLOOR_ARENA  1
#define DUNG_FLOOR_TRAP   2
#define DUNG_FLOOR_GLYPH  3

#define DUNG_DOOR_OPEN    0
#define DUNG_DOOR_CLOSED  1
#define DUNG_DOOR_BROKEN  2
#define DUNG_DOOR_LOCKED  3
#define DUNG_DOOR_JAMMED  4
#define DUNG_DOOR_SECRET  5

#define DUNG_WALL_ART_RUBBLE  0
#define DUNG_WALL_ART_GRANITE 1
#define DUNG_WALL_ART_CHALK   2
#define DUNG_WALL_ART_QUARTZ  3
#define DUNG_WALL_ART_MAGMA   4

#define DUNG_WALL_RUBBLE    0

#define DUNG_WALL_GRANITE   1
#define DUNG_WALL_GRAINNR   2
#define DUNG_WALL_GRAOUTR   3
#define DUNG_WALL_GRHIDTR   4
#define DUNG_WALL_GRSOLID   5
#define DUNG_WALL_GRTREAS   6

#define DUNG_WALL_QUARTZ    7
#define DUNG_WALL_QUAINNR   8
#define DUNG_WALL_QUAOUTR   9
#define DUNG_WALL_QUHIDTR  10
#define DUNG_WALL_QUSOLID  11
#define DUNG_WALL_QUTREAS  12

#define DUNG_WALL_MAGMA    13
#define DUNG_WALL_MGAINNR  14
#define DUNG_WALL_MGAOUTR  15
#define DUNG_WALL_MGHIDTR  16
#define DUNG_WALL_MGSOLID  17
#define DUNG_WALL_MGTREAS  18

#define DUNG_WALL_CHALK    19
#define DUNG_WALL_CHKINNR  20
#define DUNG_WALL_CHKOUTR  21
#define DUNG_WALL_CHHIDTR  22
#define DUNG_WALL_CHSOLID  23
#define DUNG_WALL_CHTREAS  24

#define DUNG_PERWALL_NORMAL  0
#define DUNG_PERWALL_INNER   1
#define DUNG_PERWALL_OUTER   2
#define DUNG_PERWALL_SOLID   3
#define DUNG_PERWALL_GLASS   4
#define DUNG_PERWALL_ARDOOR  5

#define DUNG_SHRUB_START   0
#define DUNG_SHRUB_END     14

#define DUNG_SHRUB_OAK     0
#define DUNG_SHRUB_ELM     1
#define DUNG_SHRUB_YEW     2
#define DUNG_SHRUB_ALDER   3
#define DUNG_SHRUB_BEECH   4
#define DUNG_SHRUB_BLUPINE 5
#define DUNG_SHRUB_BIRCH   6
#define DUNG_SHRUB_MAPLE   7
#define DUNG_SHRUB_WILLOW  8
#define DUNG_SHRUB_ROBINIA 9
#define DUNG_SHRUB_APPLE   10
#define DUNG_SHRUB_POPLAR  11
#define DUNG_SHRUB_SLVPINE 12
#define DUNG_SHRUB_HRNBEAM 13
#define DUNG_SHRUB_BRAMBLE 14


#define DUNG_WATER_START   0
#define DUNG_WATER_END     2

#define DUNG_WATER_BROOK   0
#define DUNG_WATER_SEWER   1
#define DUNG_WATER_POOL    2

#define DUNG_STAIR_UP      0
#define DUNG_STAIR_DOWN    1
#define DUNG_STAIR_STRANGE 2
#define DUNG_STAIR_SHAFTUP 3
#define DUNG_STAIR_SHAFTDN 4

#define DUNG_TRAP_FNDONE   0
#define DUNG_TRAP_FNDMORE  1

#define DUNG_WILD_START  0
#define DUNG_WILD_END    2

#define DUNG_WILD_MUD    0
#define DUNG_WILD_ROCK   1
#define DUNG_WILD_GRASS  2

#define DUNG_ENTR_GSTART 0
#define DUNG_ENTR_GEND   7
#define DUNG_ENTR_SHOME  8

#define DUNG_ENTR_GENERL 0
#define DUNG_ENTR_ARMOR  1
#define DUNG_ENTR_WEAPON 2
#define DUNG_ENTR_TEMPLE 3
#define DUNG_ENTR_ALCHEM 4
#define DUNG_ENTR_MAGIC  5
#define DUNG_ENTR_MARKET 6
#define DUNG_ENTR_HOME   7

#define DUNG_ENTR_GNR_DIGG 10
#define DUNG_ENTR_GNR_LITE 11
#define DUNG_ENTR_GNR_FOOD 12
#define DUNG_ENTR_GNR_CLKS 13
#define DUNG_ENTR_GNR_STRT 10
#define DUNG_ENTR_GNR_END  13

#define DUNG_ENTR_ARM_BOOT 14
#define DUNG_ENTR_ARM_GVSH 15
#define DUNG_ENTR_ARM_HELM 16
#define DUNG_ENTR_ARM_SOFT 17
#define DUNG_ENTR_ARM_HARD 18
#define DUNG_ENTR_ARM_STRT 14
#define DUNG_ENTR_ARM_END  18

#define DUNG_ENTR_WPN_SHOT 19
#define DUNG_ENTR_WPN_HAFT 20
#define DUNG_ENTR_WPN_SWRD 21
#define DUNG_ENTR_WPN_POLE 22
#define DUNG_ENTR_WPN_STRT 19
#define DUNG_ENTR_WPN_END  22

#define DUNG_ENTR_TPL_SPEL 23
#define DUNG_ENTR_TPL_HAFT 24
#define DUNG_ENTR_TPL_STRT 23
#define DUNG_ENTR_TPL_END  24

#define DUNG_ENTR_ALC_SCRL 25
#define DUNG_ENTR_ALC_POTN 26
#define DUNG_ENTR_ALC_STRT 25
#define DUNG_ENTR_ALC_END  26

#define DUNG_ENTR_MAG_SPEL 27
#define DUNG_ENTR_MAG_RING 28
#define DUNG_ENTR_MAG_WAND 29
#define DUNG_ENTR_MAG_STRT 27
#define DUNG_ENTR_MAG_END  29

#define DUNG_ENTR_EXT_STRT 10
#define DUNG_ENTR_EXT_END  29

#define DUNG_SIGN_GNR_DIGG 10
#define DUNG_SIGN_GNR_LITE 11
#define DUNG_SIGN_GNR_FOOD 12
#define DUNG_SIGN_GNR_CLKS 13

#define DUNG_SIGN_ARM_BOOT 14
#define DUNG_SIGN_ARM_GVSH 15
#define DUNG_SIGN_ARM_HELM 16
#define DUNG_SIGN_ARM_SOFT 17
#define DUNG_SIGN_ARM_HARD 18

#define DUNG_SIGN_WPN_SHOT 19
#define DUNG_SIGN_WPN_HAFT 20
#define DUNG_SIGN_WPN_SWRD 21
#define DUNG_SIGN_WPN_POLE 22

#define DUNG_SIGN_TPL_SPEL 23
#define DUNG_SIGN_TPL_HAFT 24

#define DUNG_SIGN_ALC_SPEL 25
#define DUNG_SIGN_ALC_POTN 26

#define DUNG_SIGN_MAG_SPEL 27
#define DUNG_SIGN_MAG_RING 28
#define DUNG_SIGN_MAG_WAND 29

#define DUNG_LAVA_START  0
#define DUNG_LAVA_END    0

#define DUNG_LAVA_NORMAL 0

#define MAX_DUNG_STYP   29

/*** Artifact indexes (see "lib/edit/a_info.txt") ***/

        /* Lites */
#define ART_GALADRIEL           1
#define ART_ELENDIL             2
#define ART_THRAIN              3

        /* Amulets */
#define ART_CARLAMMAS           4
#define ART_INGWE               5
#define ART_DWARVES             6

        /* Rings */
#define ART_BARAHIR             8
#define ART_TULKAS              9
#define ART_NARYA               10
#define ART_NENYA               11
#define ART_VILYA               12
#define ART_POWER               13

        /* Rods */
#define ART_CLEARTHINKING       16
#define ART_DREAMS              17
#define ART_ESCAPE              18
#define ART_PLENTY              19
#define ART_KNOWLEDGE           20

        /* Dragon Scale */
#define ART_RAZORBACK           36
#define ART_BLADETURNER         37

        /* Hard Armour */
#define ART_SOULKEEPER          39
#define ART_ISILDUR             40
#define ART_ROHIRRIM            41
#define ART_BELEGENNON          42
#define ART_CELEBORN            43
#define ART_ARVEDUI             44
#define ART_CASPANION           45

        /* Soft Armour */
#define ART_HITHLOMIR           47
#define ART_THALKETTOTH         48

        /* Shields */
#define ART_THORIN              50
#define ART_CELEGORM            51
#define ART_ANARION             52
#define ART_SUN                 53

        /* Helms and Crowns */
#define ART_MORGOTH             54
#define ART_BERUTHIEL           55
#define ART_THRANDUIL           56
#define ART_THENGEL             57
#define ART_HAMMERHAND          58
#define ART_DOR                 59
#define ART_HOLHENNETH          60
#define ART_GORLIM              61
#define ART_GONDOR              62

        /* Cloaks */
#define ART_COLLUIN             64
#define ART_HOLCOLLETH          65
#define ART_THINGOL             66
#define ART_THORONGIL           67
#define ART_COLANNON            68
#define ART_LUTHIEN             69
#define ART_TUOR                70

        /* Gloves */
#define ART_CAMBELEG            72
#define ART_CAMMITHRIM          73
#define ART_PAURHACH            74
#define ART_PAURNIMMEN          75
#define ART_PAURAEGEN           76
#define ART_PAURNEN             77
#define ART_CAMLOST             78
#define ART_FINGOLFIN           79

        /* Boots */
#define ART_FEANOR              80
#define ART_DAL                 81
#define ART_THROR               82

        /* Swords */
#define ART_MAEDHROS            84
#define ART_ANGRIST             85
#define ART_NARTHANC            86
#define ART_NIMTHANC            87
#define ART_DETHANC             88
#define ART_RILIA               89
#define ART_BELANGIL            90
#define ART_CALRIS              91
#define ART_ARUNRUTH            92
#define ART_GLAMDRING           93
#define ART_AEGLIN              94
#define ART_ORCRIST             95
#define ART_GURTHANG            96
#define ART_ZARCUTHRA           97
#define ART_MORMEGIL            98
#define ART_GONDRICAM           99
#define ART_CRISDURIAN         100
#define ART_AGLARANG           101
#define ART_RINGIL             102
#define ART_ANDURIL            103
#define ART_ANGUIREL           104
#define ART_ELVAGIL            105
#define ART_FORASGIL           106
#define ART_CARETH             107
#define ART_STING              108
#define ART_HARADEKKET         109
#define ART_GILETTAR           110
#define ART_DOOMCALLER         111

/* jk - the spear of melkor */
#define ART_MELKOR             112
        /* Polearms */
#define ART_THEODEN            113
#define ART_PAIN               114
#define ART_OSONDIR            115
#define ART_TIL                116
#define ART_AEGLOS             117
#define ART_OROME              118
#define ART_NIMLOTH            119
#define ART_EORLINGAS          120
#define ART_DURIN              121
#define ART_EONWE              122
#define ART_BALLI              123
#define ART_LOTHARANG          124
#define ART_MUNDWINE           125
#define ART_BARUKKHELED        126
#define ART_WRATH              127
#define ART_ULMO               128
#define ART_AVAVIR             129
/* jk */
#define ART_HURIN              130

        /* Hafted */
#define ART_GROND              131
#define ART_TOTILA             132
#define ART_THUNDERFIST        133
#define ART_BLOODSPIKE         134
#define ART_FIRESTAR           135
#define ART_TARATOL            136
#define ART_AULE               137
#define ART_NAR                138
#define ART_ERIRIL             139
#define ART_OLORIN             140
#define ART_DEATHWREAKER       141
#define ART_TURMIL             142
#define ART_AZAGHAL            143

        /* Bows */
#define ART_BELTHRONDING       144
#define ART_BARD               145
#define ART_CUBRAGOL           146
#define ART_GOTHMOG            147

        /* Arrows */
#define ART_RED_GONDOR         148

        /* staffs again */
#define ART_SARUMAN            149
/*** Ego-Item indexes (see "lib/edit/e_info.txt") ***/


        /* Nothing */

        /* Body Armor */
#define EGO_RESIST_ACID         4
#define EGO_RESIST_ELEC         5
#define EGO_RESIST_FIRE         6
#define EGO_RESIST_COLD         7
#define EGO_RESISTANCE          8
#define EGO_ELVENKIND           9
/* xxx */
#define EGO_PERMANENCE          11
#define EGO_QUALITY             12
/* xxx */
/* xxx */
/* xxx */

        /* Shields */
#define EGO_ENDURE_ACID         16
#define EGO_ENDURE_ELEC         17
#define EGO_ENDURE_FIRE         18
#define EGO_ENDURE_COLD         19
#define EGO_ENDURANCE           20
#define EGO_DWARVEN             21
/* xxx */
/* xxx */

        /* Crowns and Helms */
/* jk */
#define EGO_CRUSH               23

#define EGO_INTELLIGENCE        24
#define EGO_WISDOM              25
#define EGO_BEAUTY              26
#define EGO_MAGI                27
#define EGO_MIGHT               28
#define EGO_LORDLINESS          29
#define EGO_SEEING              30
#define EGO_INFRAVISION         31
#define EGO_LITE                32
#define EGO_TELEPATHY           33
#define EGO_REGENERATION        34
#define EGO_TELEPORTATION       35
#define EGO_STUPIDITY           36
#define EGO_NAIVETY             37
#define EGO_UGLINESS            38
#define EGO_SICKLINESS          39
#define EGO_NOLDOR              40

        /* Cloaks */
#define EGO_PROTECTION          41
#define EGO_STEALTH             42
#define EGO_AMAN                43
/* xxx */
#define EGO_ENVELOPING          44
#define EGO_VULNERABILITY       45
#define EGO_IRRITATION          46
/* xxx */

        /* Gloves */
#define EGO_FREE_ACTION         48
#define EGO_SLAYING             49
#define EGO_AGILITY             50
#define EGO_POWER               51
/* jk */
#define EGO_MAGIC               52
#define EGO_WEAKNESS            53
#define EGO_CLUMSINESS          54

        /* Boots */
#define EGO_SLOW_DESCENT        55
#define EGO_QUIET               56
#define EGO_MOTION              57
#define EGO_SPEED               58
/* jk */
#define EGO_HSTEP               59
#define EGO_JUMP                60

#define EGO_NOISE               61
#define EGO_SLOWNESS            62
#define EGO_ANNOYANCE           63

        /* Rings   */
#define EGO_STALKING            70
#define EGO_MINDLESSRAGE        71
#define EGO_MEDITATION          72
#define EGO_RUSHING             73
#define EGO_NUMENOR             74
#define EGO_MORIA               75
#define EGO_LOTHLORIEN          76
#define EGO_GONDOR              77
#define EGO_ROHAN               78

#define EGO_WITHERING1          80
#define EGO_WITHERING2          81
#define EGO_SHAKING             82
#define EGO_DULLEDMIND1         83
#define EGO_DULLEDMIND2         84
#define EGO_SLOTHFULNESS1       85
#define EGO_SLOTHFULNESS2       86

        /* Weapons */
#define EGO_HA                  100
#define EGO_DF                  101
#define EGO_BLESS_BLADE         102
#define EGO_VAMPIRIC            103
#define EGO_WEST                104
#define EGO_ATTACKS             105
#define EGO_SIZE                106

#define EGO_BRAND_ACID          108
#define EGO_BRAND_ELEC          109
#define EGO_BRAND_FIRE          110
#define EGO_BRAND_COLD          111

#define EGO_MAGE                112
#define EGO_ADEPT               113
#define EGO_ARCHMAGE            114

#define EGO_SLAY_ANIMAL         116
#define EGO_SLAY_EVIL           117
#define EGO_SLAY_UNDEAD         118
#define EGO_SLAY_DEMON          119
#define EGO_SLAY_ORC            120
#define EGO_SLAY_TROLL          121
#define EGO_SLAY_GIANT          122
#define EGO_SLAY_DRAGON         123
#define EGO_KILL_ANIMAL         124
#define EGO_KILL_EVIL           125
#define EGO_KILL_UNDEAD         126
#define EGO_KILL_DEMON          127
#define EGO_KILL_ORC            128
#define EGO_KILL_TROLL          129
#define EGO_KILL_GIANT          130
#define EGO_KILL_DRAGON         131

#define EGO_JOY                 132

#define EGO_DIGGING             136

#define EGO_MORGUL              138

        /* Bows */
#define EGO_ACCURACY            140
#define EGO_VELOCITY            141
#define EGO_HOLLOW_STEEL        143
#define EGO_EXTRA_MIGHT         144
#define EGO_EXTRA_SHOTS         145

        /* Ammo */
#define EGO_HURT_ANIMAL         148
#define EGO_HURT_EVIL           149
#define EGO_ORCISH              150
#define EGO_ELVEN               151
#define EGO_HOBBIT              152
#define EGO_BLACKFEATHER        153
#define EGO_HURT_DRAGON         155
#define EGO_FLAME               158
#define EGO_FROST               159
#define EGO_WOUNDING            160
#define EGO_BACKBITING          161

        /* destroyed weapon */
#define EGO_SHATTERED           162
        /* destroyed body armour */
#define EGO_BLASTED             170

#define EGO_BOOK_FIRE               180
#define EGO_BOOK_ACID               181

#define EGO_BOOK_FIRE_ACID          182

/*** Object "tval" and "sval" codes ***/
/*
 * The values for the "tval" field of various objects.
 *
 * This value is the primary means by which items are sorted in the
 * player inventory, followed by "sval" and "cost".
 *
 * Note that a "BOW" with tval = 19 and sval S = 10*N+P takes a missile
 * weapon with tval = 16+N, and does (xP) damage when so combined.  This
 * fact is not actually used in the source, but it kind of interesting.
 *
 * Note that as of 2.7.8, the "item flags" apply to all items, though
 * only armor and weapons and a few other items use any of these flags.
 */

#define TV_NOTHING       0      /* Nothing */
#define TV_SKELETON      1      /* Skeletons ('s') */
#define TV_BOTTLE        2      /* Empty bottles ('!') */
#define TV_JUNK          3      /* Sticks, Pottery, etc ('~') */
#define TV_SPIKE         5      /* Spikes ('~') */
#define TV_CHEST         7      /* Chests ('~') */
#define TV_SHOT         16      /* Ammo for slings */
#define TV_ARROW        17      /* Ammo for bows */
#define TV_BOLT         18      /* Ammo for x-bows */
#define TV_BOW          19      /* Slings/Bows/Xbows */
#define TV_DIGGING      20      /* Shovels/Picks */
#define TV_HAFTED       21      /* Priest Weapons */
#define TV_POLEARM      22      /* Axes and Pikes */
#define TV_SWORD        23      /* Edged Weapons */
#define TV_BOOTS        30      /* Boots */
#define TV_GLOVES       31      /* Gloves */
#define TV_HELM         32      /* Helms */
#define TV_CROWN        33      /* Crowns */
#define TV_SHIELD       34      /* Shields */
#define TV_CLOAK        35      /* Cloaks */
#define TV_SOFT_ARMOR   36      /* Soft Armor */
#define TV_HARD_ARMOR   37      /* Hard Armor */
#define TV_DRAG_ARMOR   38      /* Dragon Scale Mail */
#define TV_LITE         39      /* Lites (including Specials) */
#define TV_AMULET       40      /* Amulets (including Specials) */
#define TV_RING         45      /* Rings (including Specials) */
#define TV_STAFF        55
#define TV_WAND         65
#define TV_ROD          66
#define TV_SCROLL       70
#define TV_SPELL        71
#define TV_POTION       75
#define TV_FLASK        77
#define TV_FOOD         80
#define TV_BOOK         85
#define TV_GOLD         100     /* Gold can only be picked up by players */

#define TV_CORPSE       101
#define TV_MOSS         102
#define TV_BRACER       103

#define MAX_TVAL        104
#define MAX_SVAL        250 /* spells go up to there! */

/* we have a broken bone and a broken skull at 1 and 2 */
/* this should be 3 not 2! */
#define SV_SKELETON_BROKEN_END  3

/* The "sval" codes for TV_SHOT/TV_ARROW/TV_BOLT */
#define SV_SHOT_LIGHT           0       /* pebbles */
#define SV_SHOT_NORMAL          1       /* shots, arrows, bolts */
#define SV_SHOT_HEAVY           2       /* seeker arrows and bolts */

#define SV_ARROW_LIGHT          0       /* pebbles */
#define SV_ARROW_NORMAL         1       /* shots, arrows, bolts */
#define SV_ARROW_HEAVY          2       /* seeker arrows and bolts */

#define SV_BOLT_LIGHT           0       /* pebbles */
#define SV_BOLT_NORMAL          1       /* shots, arrows, bolts */
#define SV_BOLT_HEAVY           2       /* seeker arrows and bolts */

/* The "sval" codes for TV_BOW (note information in "sval") */
#define SV_SLING                2       /* (x2) */
#define SV_SHORT_BOW            12      /* (x2) */
#define SV_LONG_BOW             13      /* (x3) */
#define SV_LIGHT_XBOW           23      /* (x3) */
#define SV_HEAVY_XBOW           24      /* (x4) */
#define SV_ELVEN_BOW            34      /* (x4) */
#define SV_HOBBIT_SLING         33      /* (x3) */

/* The "sval" codes for TV_DIGGING */
#define SV_SHOVEL               1
#define SV_GNOMISH_SHOVEL       2
#define SV_DWARVEN_SHOVEL       3
#define SV_PICK                 4
#define SV_ORCISH_PICK          5
#define SV_DWARVEN_PICK         6

/* The "sval" values for TV_HAFTED */
#define SV_WHIP                 2       /* 1d6 */
#define SV_QUARTERSTAFF         3       /* 1d9 */
#define SV_MACE                 5       /* 2d4 */
#define SV_BALL_AND_CHAIN       6       /* 2d4 */
#define SV_WAR_HAMMER           8       /* 3d3 */
#define SV_LUCERN_HAMMER        10      /* 2d5 */
#define SV_MORNING_STAR         12      /* 2d6 */
#define SV_FLAIL                13      /* 2d6 */
#define SV_LEAD_FILLED_MACE     15      /* 3d4 */
#define SV_TWO_HANDED_FLAIL     18      /* 3d6 */
#define SV_MACE_OF_DISRUPTION   20      /* 5d8 */
#define SV_GROND                50      /* 3d4 */

/* The "sval" values for TV_POLEARM */
#define SV_SPEAR                2       /* 1d6 */
#define SV_AWL_PIKE             4       /* 1d8 */
#define SV_TRIDENT              5       /* 1d9 */
#define SV_PIKE                 8       /* 2d5 */
#define SV_BEAKED_AXE           10      /* 2d6 */
#define SV_BROAD_AXE            11      /* 2d6 */
#define SV_GLAIVE               13      /* 2d6 */
#define SV_HALBERD              15      /* 3d4 */
#define SV_SCYTHE               17      /* 5d3 */
#define SV_LANCE                20      /* 2d8 */
#define SV_BATTLE_AXE           22      /* 2d8 */
#define SV_GREAT_AXE            25      /* 4d4 */
#define SV_LOCHABER_AXE         28      /* 3d8 */
#define SV_SCYTHE_OF_SLICING    30      /* 8d4 */

/* The "sval" codes for TV_SWORD */
#define SV_BROKEN_DAGGER        1       /* 1d1 */
#define SV_BROKEN_SWORD         2       /* 1d2 */
#define SV_DAGGER               4       /* 1d4 */
#define SV_MAIN_GAUCHE          5       /* 1d5 */
#define SV_RAPIER               7       /* 1d6 */
#define SV_SMALL_SWORD          8       /* 1d6 */
#define SV_SHORT_SWORD          10      /* 1d7 */
#define SV_SABRE                11      /* 1d7 */
#define SV_CUTLASS              12      /* 1d7 */
#define SV_TULWAR               15      /* 2d4 */
#define SV_BROAD_SWORD          16      /* 2d5 */
#define SV_LONG_SWORD           17      /* 2d5 */
#define SV_SCIMITAR             18      /* 2d5 */
#define SV_KATANA               20      /* 3d4 */
#define SV_BASTARD_SWORD        21      /* 3d4 */
#define SV_TWO_HANDED_SWORD     25      /* 3d6 */
#define SV_EXECUTIONERS_SWORD   28      /* 4d5 */
#define SV_BLADE_OF_CHAOS       30      /* 6d5 */

/* The "sval" codes for TV_SHIELD */
#define SV_SMALL_LEATHER_SHIELD         2
#define SV_SMALL_METAL_SHIELD           3
#define SV_LARGE_LEATHER_SHIELD         4
#define SV_LARGE_METAL_SHIELD           5
#define SV_SHIELD_OF_DEFLECTION         10

/* The "sval" codes for TV_HELM */
#define SV_HARD_LEATHER_CAP             2
#define SV_METAL_CAP                    3
#define SV_IRON_HELM                    5
#define SV_STEEL_HELM                   6
#define SV_IRON_CROWN                   10
#define SV_GOLDEN_CROWN                 11
#define SV_JEWELED_CROWN                12
#define SV_MORGOTH                      50

/* The "sval" codes for TV_BOOTS */
#define SV_PAIR_OF_SOFT_LEATHER_BOOTS   2
#define SV_PAIR_OF_HARD_LEATHER_BOOTS   3
#define SV_PAIR_OF_METAL_SHOD_BOOTS     6

/* The "sval" codes for TV_CLOAK */
#define SV_CLOAK                        1
#define SV_SHADOW_CLOAK                 6

/* The "sval" codes for TV_GLOVES */
#define SV_SET_OF_LEATHER_GLOVES        1
#define SV_SET_OF_GAUNTLETS             2
#define SV_SET_OF_CESTI                 5

/* The "sval" codes for TV_SOFT_ARMOR */
#define SV_FILTHY_RAG                   1
#define SV_ROBE                         2
#define SV_SOFT_LEATHER_ARMOR           4
#define SV_SOFT_STUDDED_LEATHER         5
#define SV_HARD_LEATHER_ARMOR           6
#define SV_HARD_STUDDED_LEATHER         7
#define SV_LEATHER_SCALE_MAIL           11

/* The "sval" codes for TV_HARD_ARMOR */
#define SV_RUSTY_CHAIN_MAIL             1       /* 14- */
#define SV_METAL_SCALE_MAIL             3       /* 13 */
#define SV_CHAIN_MAIL                   4       /* 14 */
#define SV_AUGMENTED_CHAIN_MAIL         6       /* 16 */
#define SV_DOUBLE_CHAIN_MAIL            7       /* 16 */
#define SV_BAR_CHAIN_MAIL               8       /* 18 */
#define SV_METAL_BRIGANDINE_ARMOUR      9       /* 19 */
#define SV_PARTIAL_PLATE_ARMOUR         12      /* 22 */
#define SV_METAL_LAMELLAR_ARMOUR        13      /* 23 */
#define SV_FULL_PLATE_ARMOUR            15      /* 25 */
#define SV_RIBBED_PLATE_ARMOUR          18      /* 28 */
#define SV_MITHRIL_CHAIN_MAIL           20      /* 28+ */
#define SV_MITHRIL_PLATE_MAIL           25      /* 35+ */
#define SV_ADAMANTITE_PLATE_MAIL        30      /* 40+ */

/* The "sval" codes for TV_DRAG_ARMOR */
#define SV_DRAGON_BLACK                 1
#define SV_DRAGON_BLUE                  2
#define SV_DRAGON_WHITE                 3
#define SV_DRAGON_RED                   4
#define SV_DRAGON_GREEN                 5
#define SV_DRAGON_MULTIHUED             6
#define SV_DRAGON_SHINING               10
#define SV_DRAGON_LAW                   12
#define SV_DRAGON_BRONZE                14
#define SV_DRAGON_GOLD                  16
#define SV_DRAGON_CHAOS                 18
#define SV_DRAGON_BALANCE               20
#define SV_DRAGON_POWER                 30

/* The sval codes for TV_LITE */
#define SV_LITE_TORCH           0
#define SV_LITE_LANTERN         1
#define SV_LITE_NOLDOR          2
#define SV_LITE_GALADRIEL       4
#define SV_LITE_ELENDIL         5
#define SV_LITE_THRAIN          6

/* The "sval" codes for TV_AMULET */
#define SV_AMULET_DOOM          0
#define SV_AMULET_TELEPORT      1
#define SV_AMULET_ADORNMENT     2
#define SV_AMULET_SLOW_DIGEST   3
#define SV_AMULET_RESIST_ACID   4
#define SV_AMULET_SEARCHING     5
#define SV_AMULET_WISDOM        6
#define SV_AMULET_CHARISMA      7
#define SV_AMULET_THE_MAGI      8
/* xxx */
#define SV_AMULET_CARLAMMAS     10
#define SV_AMULET_INGWE         11
#define SV_AMULET_DWARVES       12

/* The sval codes for TV_RING */
#define SV_RING_WOE             0
#define SV_RING_AGGRAVATION     1
#define SV_RING_WEAKNESS        2
#define SV_RING_STUPIDITY       3
#define SV_RING_TELEPORTATION   4
#define SV_RING_ESP             5
/* xxx */
#define SV_RING_SLOW_DIGESTION  6
#define SV_RING_FEATHER_FALL    7
#define SV_RING_RESIST_FIRE     8
#define SV_RING_RESIST_COLD     9
#define SV_RING_SUSTAIN_STR     10
#define SV_RING_SUSTAIN_INT     11
#define SV_RING_SUSTAIN_WIS     12
#define SV_RING_SUSTAIN_DEX     13
#define SV_RING_SUSTAIN_CON     14
#define SV_RING_SUSTAIN_CHR     15
#define SV_RING_PROTECTION      16
#define SV_RING_ACID            17
#define SV_RING_FLAMES          18
#define SV_RING_ICE             19
#define SV_RING_RESIST_POIS     20
#define SV_RING_FREE_ACTION     21
#define SV_RING_SEE_INVIS       22
#define SV_RING_SEARCHING       23
#define SV_RING_STR             24
#define SV_RING_INT             25
#define SV_RING_DEX             26
#define SV_RING_CON             27
#define SV_RING_ACCURACY        28
#define SV_RING_DAMAGE          29
#define SV_RING_SLAYING         30
#define SV_RING_SPEED           31
#define SV_RING_BARAHIR         32
#define SV_RING_TULKAS          33
#define SV_RING_NARYA           34
#define SV_RING_NENYA           35
#define SV_RING_VILYA           36
#define SV_RING_POWER           37
#define SV_RING_ELEC            38

#define SV_RING_IRON            42
#define SV_RING_SILVER          43
#define SV_RING_GOLD            44
#define SV_RING_MITHRIL         45

/* The "sval" codes for TV_STAFF */
#define SV_STAFF_DARKNESS       0
#define SV_STAFF_SLOWNESS       1
#define SV_STAFF_HASTE_MONSTERS 2
#define SV_STAFF_SUMMONING      3
#define SV_STAFF_TELEPORTATION  4
#define SV_STAFF_IDENTIFY       5
#define SV_STAFF_REMOVE_CURSE   6
#define SV_STAFF_STARLITE       7
#define SV_STAFF_LITE           8
#define SV_STAFF_MAPPING        9
#define SV_STAFF_DETECT_GOLD    10
#define SV_STAFF_DETECT_ITEM    11
#define SV_STAFF_DETECT_TRAP    12
#define SV_STAFF_DETECT_DOOR    13
#define SV_STAFF_DETECT_INVIS   14
#define SV_STAFF_DETECT_EVIL    15
#define SV_STAFF_CURE_LIGHT     16
#define SV_STAFF_CURING         17
#define SV_STAFF_HEALING        18
#define SV_STAFF_THE_MAGI       19
#define SV_STAFF_SLEEP_MONSTERS 20
#define SV_STAFF_SLOW_MONSTERS  21
#define SV_STAFF_SPEED          22
#define SV_STAFF_PROBING        23
#define SV_STAFF_DISPEL_EVIL    24
#define SV_STAFF_POWER          25
#define SV_STAFF_HOLINESS       26
#define SV_STAFF_GENOCIDE       27
#define SV_STAFF_EARTHQUAKES    28
#define SV_STAFF_DESTRUCTION    29

/* jk - first valluable wand - the wand of wonder is above it? */
#define SV_STAFF_NASTY_STAFF     4

/* The "sval" codes for TV_WAND */
#define SV_WAND_HEAL_MONSTER    0
#define SV_WAND_HASTE_MONSTER   1
#define SV_WAND_CLONE_MONSTER   2
#define SV_WAND_TELEPORT_AWAY   3
#define SV_WAND_DISARMING       4
#define SV_WAND_TRAP_DOOR_DEST  5
#define SV_WAND_STONE_TO_MUD    6
#define SV_WAND_LITE            7
#define SV_WAND_SLEEP_MONSTER   8
#define SV_WAND_SLOW_MONSTER    9
#define SV_WAND_CONFUSE_MONSTER 10
#define SV_WAND_FEAR_MONSTER    11
#define SV_WAND_DRAIN_LIFE      12
#define SV_WAND_POLYMORPH       13
#define SV_WAND_STINKING_CLOUD  14
#define SV_WAND_MAGIC_MISSILE   15
#define SV_WAND_ACID_BOLT       16
#define SV_WAND_ELEC_BOLT       17
#define SV_WAND_FIRE_BOLT       18
#define SV_WAND_COLD_BOLT       19
#define SV_WAND_ACID_BALL       20
#define SV_WAND_ELEC_BALL       21
#define SV_WAND_FIRE_BALL       22
#define SV_WAND_COLD_BALL       23
#define SV_WAND_WONDER          24
#define SV_WAND_ANNIHILATION    25
#define SV_WAND_DRAGON_FIRE     26
#define SV_WAND_DRAGON_COLD     27
#define SV_WAND_DRAGON_BREATH   28

/* jk - first valluable wand - the wand of wonder is above it? */
#define SV_WAND_NASTY_WAND      3

/* The "sval" codes for TV_ROD */
#define SV_ROD_DETECT_TRAP      0
#define SV_ROD_DETECT_DOOR      1
#define SV_ROD_IDENTIFY         2
#define SV_ROD_RECALL           3
#define SV_ROD_ILLUMINATION     4
#define SV_ROD_MAPPING          5
#define SV_ROD_DETECTION        6
#define SV_ROD_PROBING          7
#define SV_ROD_CURING           8
#define SV_ROD_HEALING          9
#define SV_ROD_RESTORATION      10
#define SV_ROD_SPEED            11

/*
 * Special "sval" limit -- first "aimed" rod
 */
#define SV_ROD_MIN_DIRECTION    20

/* xxx (aimed) */
#define SV_ROD_TELEPORT_AWAY    20
#define SV_ROD_DISARMING        21
#define SV_ROD_LITE             22
#define SV_ROD_SLEEP_MONSTER    23
#define SV_ROD_SLOW_MONSTER     24
#define SV_ROD_DRAIN_LIFE       25
#define SV_ROD_POLYMORPH        26
#define SV_ROD_ACID_BOLT        27
#define SV_ROD_ELEC_BOLT        28
#define SV_ROD_FIRE_BOLT        29
#define SV_ROD_COLD_BOLT        30
#define SV_ROD_ACID_BALL        31
#define SV_ROD_ELEC_BALL        32
#define SV_ROD_FIRE_BALL        33
#define SV_ROD_COLD_BALL        34
#define SV_ROD_IDENT_TRAP       35

/* the artifact rods */
#define SV_ROD_CLEARTHINKING    45
#define SV_ROD_DREAMS           46
#define SV_ROD_ESCAPE           47
#define SV_ROD_PLENTY           48
#define SV_ROD_KNOWLEDGE        49


/* The "sval" codes for TV_SCROLL */

#define SV_SCROLL_DARKNESS              0
#define SV_SCROLL_AGGRAVATE_MONSTER     1
#define SV_SCROLL_CURSE_ARMOR           2
#define SV_SCROLL_CURSE_WEAPON          3
#define SV_SCROLL_SUMMON_MONSTER        4
#define SV_SCROLL_SUMMON_UNDEAD         5
#define SV_SCROLL_TREASURE              6
#define SV_SCROLL_TRAP_CREATION         7
#define SV_SCROLL_PHASE_DOOR            8
#define SV_SCROLL_TELEPORT              9
#define SV_SCROLL_TELEPORT_LEVEL        10
#define SV_SCROLL_WORD_OF_RECALL        11
#define SV_SCROLL_IDENTIFY              12
#define SV_SCROLL_STAR_IDENTIFY         13
#define SV_SCROLL_REMOVE_CURSE          14
#define SV_SCROLL_STAR_REMOVE_CURSE     15
#define SV_SCROLL_ENCHANT_ARMOR         16
#define SV_SCROLL_ENCHANT_WEAPON_TO_HIT 17
#define SV_SCROLL_ENCHANT_WEAPON_TO_DAM 18
/* xxx enchant missile? */
#define SV_SCROLL_STAR_ENCHANT_ARMOR    20
#define SV_SCROLL_STAR_ENCHANT_WEAPON   21
#define SV_SCROLL_RECHARGING            22
/* xxx */
#define SV_SCROLL_LIGHT                 24
#define SV_SCROLL_MAPPING               25
#define SV_SCROLL_DETECT_GOLD           26
#define SV_SCROLL_DETECT_ITEM           27
#define SV_SCROLL_DETECT_TRAP           28
#define SV_SCROLL_DETECT_DOOR           29
#define SV_SCROLL_DETECT_INVIS          30
/* xxx (detect evil?) */
#define SV_SCROLL_SATISFY_HUNGER        32
#define SV_SCROLL_BLESSING              33
#define SV_SCROLL_HOLY_CHANT            34
#define SV_SCROLL_HOLY_PRAYER           35
#define SV_SCROLL_MONSTER_CONFUSION     36
#define SV_SCROLL_PROTECTION_FROM_EVIL  37
#define SV_SCROLL_RUNE_OF_PROTECTION    38
#define SV_SCROLL_TRAP_DOOR_DESTRUCTION 39
/* xxx */
#define SV_SCROLL_STAR_DESTRUCTION      41
#define SV_SCROLL_DISPEL_UNDEAD         42
/* xxx */
#define SV_SCROLL_GENOCIDE              44
#define SV_SCROLL_MASS_GENOCIDE         45
#define SV_SCROLL_ACQUIREMENT           46
#define SV_SCROLL_STAR_ACQUIREMENT      47

#define SV_SPELL_MMAGIC_MISSILE            1
#define SV_SPELL_MDETECT_MONSTERS          2
#define SV_SPELL_MPHASE_DOOR               3
#define SV_SPELL_MLIGHT_AREA               4
#define SV_SPELL_MTREASURE_DETECTION       5
#define SV_SPELL_MCURE_LIGHT_WOUNDS        6
#define SV_SPELL_MOBJECT_DETECTION         7
#define SV_SPELL_MFIND_TRAPS_DOORS         8
#define SV_SPELL_MSTINKING_CLOUD           9

#define SV_SPELL_MCONFUSION               20
#define SV_SPELL_MLIGHTNING_BOLT          21
#define SV_SPELL_MTRAPDOOR_DESTRUCT       22
#define SV_SPELL_MSLEEP_I                 23
#define SV_SPELL_MCURE_POISON             24
#define SV_SPELL_MTELEPORT_SELF           25
#define SV_SPELL_MSPEAR_OF_LIGHT          26
#define SV_SPELL_MFROST_BOLT              27
#define SV_SPELL_MTURN_STONE_TO_MUD       28

#define SV_SPELL_MCREATE_FOOD             30
#define SV_SPELL_MRECHARGE_ITEM_I         31
#define SV_SPELL_MSLEEP_II                32
#define SV_SPELL_MPOLYMORPH_OTHER         33
#define SV_SPELL_MIDENTIFY                34
#define SV_SPELL_MSLEEP_III               35
#define SV_SPELL_MFIRE_BOLT               36
#define SV_SPELL_MSLOW_MONSTER            37

#define SV_SPELL_MFROST_BALL              40
#define SV_SPELL_MRECHARGE_ITEM_II        41
#define SV_SPELL_MTELEPORT_OTHER          42
#define SV_SPELL_MHASTE_SELF              43
#define SV_SPELL_MFIRE_BALL               44
#define SV_SPELL_MWORD_OF_DESTRUCTION     45
#define SV_SPELL_MGENOCIDE_HARD           46

#define SV_SPELL_MRESIST_FIRE             50
#define SV_SPELL_MRESIST_COLD             51
#define SV_SPELL_MRESIST_ACID             52
#define SV_SPELL_MRESIST_POISON           53
#define SV_SPELL_MRESISTANCE              54

#define SV_SPELL_MDOOR_CREATION           60
#define SV_SPELL_MSTAIR_CREATION          61
#define SV_SPELL_MTELEPORT_LEVEL          62
#define SV_SPELL_MEARTHQUAKE              63
#define SV_SPELL_MWORD_OF_RECALL          64

#define SV_SPELL_MDETECT_EVIL             70
#define SV_SPELL_MDETECT_ENCHANTMENT      71
#define SV_SPELL_MRECHARGE_ITEM_III       72
#define SV_SPELL_MMASS_GENOCIDE           74

#define SV_SPELL_MHEROISM                 80
#define SV_SPELL_MSHIELD                  81
#define SV_SPELL_MBERSERKER               82
#define SV_SPELL_MESSENCE_OF_SPEED        83
#define SV_SPELL_MINVULNERABILITY         84

#define SV_SPELL_MACID_BOLT               90
#define SV_SPELL_MCLOUDKILL               91
#define SV_SPELL_MACID_BALL               92
#define SV_SPELL_MICE_STORM               93
#define SV_SPELL_MMETEOR_SWARM            94
#define SV_SPELL_MHELLFIRE                95
#define SV_SPELL_MREFLECTION              96

#define SV_SPELL_MCREATESIMPLETRAP       100
#define SV_SPELL_MCREATEEFFECTIVETRAP    101
#define SV_SPELL_MCREATEDANGEROUSTRAP    102
#define SV_SPELL_MCREATEDEATHTRAP        103
#define SV_SPELL_MCREATECOMPLEXTRAP      104

/* Priest */
#define SV_SPELL_PDETECT_EVIL            150
#define SV_SPELL_PCURE_LIGHT_WOUNDS      151
#define SV_SPELL_PBLESS                  152
#define SV_SPELL_PREMOVE_FEAR            153
#define SV_SPELL_PCALL_LIGHT             154
#define SV_SPELL_PFIND_TRAPS             155
#define SV_SPELL_PDET_DOORS_STAIRS       156
#define SV_SPELL_PSLOW_POISON            157

#define SV_SPELL_PBLIND_CREATURE         160
#define SV_SPELL_PPORTAL                 161
#define SV_SPELL_PCURE_MEDIUM_WOUNDS     162
#define SV_SPELL_PCHANT                  163
#define SV_SPELL_PSANCTUARY              164
#define SV_SPELL_PCREATE_FOOD            165
#define SV_SPELL_PREMOVE_CURSE           166
#define SV_SPELL_PRESIST_HEAT_COLD       167

#define SV_SPELL_PNEUTRALIZE_POISON      170
#define SV_SPELL_PORB_OF_DRAINING        171
#define SV_SPELL_PCURE_SER_WOUNDS        172
#define SV_SPELL_PSENSE_INVISIBLE        173
#define SV_SPELL_PPROT_FROM_EVIL         174
#define SV_SPELL_PEARTHQUAKE             175
#define SV_SPELL_PSENSE_SURROUNDINGS     176
#define SV_SPELL_PCURE_CRIT_WOUNDS       177
#define SV_SPELL_PTURN_UNDEAD            178

#define SV_SPELL_PPRAYER                 180
#define SV_SPELL_PDISPEL_UNDEAD_SMALL    181
#define SV_SPELL_PHEAL                   182
#define SV_SPELL_PDISPEL_EVIL            183
#define SV_SPELL_PGLYPH_OF_WARDING       184
#define SV_SPELL_PHOLY_WORD              185

#define SV_SPELL_PBLINK                  190
#define SV_SPELL_PTELEPORT               191
#define SV_SPELL_PTELEPORT_AWAY          192
#define SV_SPELL_PTELEPORT_LEVEL         193
/* priest WOR is same as mage WOR now */
#define SV_SPELL_PALTER_REALITY          195

#define SV_SPELL_PDETECT_MONSTERS        200
#define SV_SPELL_PDETECTION              201
#define SV_SPELL_PPERCEPTION             202
#define SV_SPELL_PPROBING                203
#define SV_SPELL_PCLAIRVOYANCE           204

#define SV_SPELL_PCURE_SER_WOUNDS_EASY   210
#define SV_SPELL_PCURE_CRIT_WOUNDS_EASY  211
#define SV_SPELL_PHEALING                212
#define SV_SPELL_PRESTORATION            213
#define SV_SPELL_PREMEMBRANCE            214

#define SV_SPELL_PUNBARRING_WAYS         220
#define SV_SPELL_PRECHARGING             221
#define SV_SPELL_PDISPEL_CURSE           222
#define SV_SPELL_PENCHANT_WEAPON         223
#define SV_SPELL_PENCHANT_ARMOUR         224
#define SV_SPELL_PELEMENTAL_BRAND        225

#define SV_SPELL_PDISPEL_UNDEAD_LARGE    230
#define SV_SPELL_PDISPEL_EVIL_LARGE      231
#define SV_SPELL_PBANISHMENT             232
#define SV_SPELL_PWORD_OF_DESTRUCTION    233
#define SV_SPELL_PANNIHILATION           234

#define SV_BOOK_SMALL                     1
#define SV_BOOK_AVG                       2
#define SV_BOOK_LARGE                     3

/* The "sval" codes for TV_POTION */
#define SV_POTION_WATER                 0
#define SV_POTION_APPLE_JUICE           1
#define SV_POTION_SLIME_MOLD            2
#define SV_POTION_SLOWNESS              4
#define SV_POTION_SALT_WATER            5
#define SV_POTION_POISON                6
#define SV_POTION_BLINDNESS             7
#define SV_POTION_FIRE                  8
#define SV_POTION_CONFUSION             9
#define SV_POTION_COLD                  10
#define SV_POTION_SLEEP                 11
#define SV_POTION_ACID                  12
#define SV_POTION_LOSE_MEMORIES         13
#define SV_POTION_ELEC                  14
#define SV_POTION_RUINATION             15
#define SV_POTION_DEC_STR               16
#define SV_POTION_DEC_INT               17
#define SV_POTION_DEC_WIS               18
#define SV_POTION_DEC_DEX               19
#define SV_POTION_DEC_CON               20
#define SV_POTION_DEC_CHR               21
#define SV_POTION_DETONATIONS           22
#define SV_POTION_DEATH                 23
#define SV_POTION_INFRAVISION           24
#define SV_POTION_DETECT_INVIS          25
#define SV_POTION_SLOW_POISON           26
#define SV_POTION_CURE_POISON           27
#define SV_POTION_BOLDNESS              28
#define SV_POTION_SPEED                 29
#define SV_POTION_RESIST_HEAT           30
#define SV_POTION_RESIST_COLD           31
#define SV_POTION_HEROISM               32
#define SV_POTION_BESERK_STRENGTH       33
#define SV_POTION_CURE_LIGHT            34
#define SV_POTION_CURE_SERIOUS          35
#define SV_POTION_CURE_CRITICAL         36
#define SV_POTION_HEALING               37
#define SV_POTION_STAR_HEALING          38
#define SV_POTION_LIFE                  39
#define SV_POTION_RESTORE_MANA          40
#define SV_POTION_RESTORE_EXP           41
#define SV_POTION_RES_STR               42
#define SV_POTION_RES_INT               43
#define SV_POTION_RES_WIS               44
#define SV_POTION_RES_DEX               45
#define SV_POTION_RES_CON               46
#define SV_POTION_RES_CHR               47
#define SV_POTION_INC_STR               48
#define SV_POTION_INC_INT               49
#define SV_POTION_INC_WIS               50
#define SV_POTION_INC_DEX               51
#define SV_POTION_INC_CON               52
#define SV_POTION_INC_CHR               53
/* xxx */
#define SV_POTION_AUGMENTATION          55
#define SV_POTION_ENLIGHTENMENT         56
#define SV_POTION_STAR_ENLIGHTENMENT    57
#define SV_POTION_SELF_KNOWLEDGE        58
#define SV_POTION_EXPERIENCE            59
#define SV_POTION_LIFT                  60

/* The "sval" codes for TV_FOOD */
#define SV_FOOD_POISON          0
#define SV_FOOD_BLINDNESS       1
#define SV_FOOD_PARANOIA        2
#define SV_FOOD_CONFUSION       3
#define SV_FOOD_HALLUCINATION   4
#define SV_FOOD_PARALYSIS       5
#define SV_FOOD_WEAKNESS        6
#define SV_FOOD_SICKNESS        7
#define SV_FOOD_STUPIDITY       8
#define SV_FOOD_NAIVETY         9
#define SV_FOOD_UNHEALTH        10
#define SV_FOOD_DISEASE         11
#define SV_FOOD_CURE_POISON     12
#define SV_FOOD_CURE_BLINDNESS  13
#define SV_FOOD_CURE_PARANOIA   14
#define SV_FOOD_CURE_CONFUSION  15
#define SV_FOOD_CURE_SERIOUS    16
#define SV_FOOD_RESTORE_STR     17
#define SV_FOOD_RESTORE_CON     18
#define SV_FOOD_RESTORING       19
/* many missing mushrooms */
#define SV_FOOD_BISCUIT         32
#define SV_FOOD_JERKY           33
#define SV_FOOD_RATION          35
#define SV_FOOD_SLIME_MOLD      36
#define SV_FOOD_WAYBREAD        37
#define SV_FOOD_PINT_OF_ALE     38
#define SV_FOOD_PINT_OF_WINE    39

/*
 * Special "sval" limit -- first "normal" food
 */
#define SV_FOOD_MIN_FOOD        32
/* jk - first non-negative food */
#define SV_FOOD_NASTY_FOOD      12

#define SV_GOLD_COPPER          0
#define SV_GOLD_SILVER          1
#define SV_GOLD_GARNETS         2
#define SV_GOLD_GOLD            3
#define SV_GOLD_OPALS           4
#define SV_GOLD_SAPPHIRES       5
#define SV_GOLD_RUBIES          6
#define SV_GOLD_DIAMONDS        7
#define SV_GOLD_EMERALDS        8
#define SV_GOLD_MITHRIL         9
#define SV_GOLD_ADAMANTITE     10
#define SV_GOLD_PEARL          11

#define SV_GOLD_START           0
#define SV_GOLD_END            11

#define SV_CHEST_WOODS           1
#define SV_CHEST_IRONS           2
#define SV_CHEST_STEELS          3
#define SV_CHEST_WOODL           5
#define SV_CHEST_IRONL           6
#define SV_CHEST_STEELL          7
#define SV_CHEST_RUINED          0

/*
 * Special "sval" limit -- first "large" chest
 */
#define SV_CHEST_MIN_LARGE      4

/*
 * Special "sval" limit -- first "good" magic/prayer book
 */
#define SV_BOOK_MIN_GOOD        4

/* flags for operation in get_random_trap in object3.c */

#define TRAP_EXISTS     0x00000001L
#define TRAP_FOUND      0x00000002L
#define TRAP_NOTFOUND   0x00000004L
#define TRAP_IDENTIFIED 0x00000008L

/*
 * the different event-types
 *
 * must fit in s16b! 
 *
 * also note that this is also used for sorting, so DUNGEONLEAVE should
 * come before DUNGEONENTER, and PLAYERLEVEL should be last
 */
#define EVENT_MONSTER        1
#define EVENT_ARTIFACT       2
#define EVENT_EGO_ITEM       3
#define EVENT_OBJECT         4
#define EVENT_INVENTORY      5
#define EVENT_HOME           6
#define EVENT_DUNGEONLEAVE   7
#define EVENT_DUNGEONENTER   8
#define EVENT_PLAYERLEVEL    9


/*
 * vault-options
 */
#define VAULT_GOING_DOWN    0x00000001L /* this vault has sub-levels going down */
#define VAULT_GOING_UP      0x00000002L /* this vault has sub-levels going up */
#define VAULT_LIGHT10       0x00000004L /* 10% chance of a lighted vault */
#define VAULT_LIGHT25       0x00000008L /* 25% chance of a lighted vault */
#define VAULT_LIGHT50       0x00000010L /* 50% chance of a lighted vault */
#define VAULT_BOOSTOBJ1     0x00000020L /* boost objects by 1 level      */
#define VAULT_BOOSTOBJ2     0x00000040L /* boost objects by 1 level      */
#define VAULT_BOOSTOBJ4     0x00000080L /* boost objects by 1 level      */
#define VAULT_BOOSTOBJ8     0x00000100L /* boost objects by 1 level      */
#define VAULT_RACE_ALL      0x00000200L /* when no monsters can be created with correct flags   */
                                        /* create try higher level monsters, default +16 levels */
                                        /* see tower of fire, sublevel 5 for example            */
#define VAULT_RACE_MAX4     0x00000400L /* if +16 levels is not enough, use these to increase   */
#define VAULT_RACE_MAX8     0x00000800L /* the maximum level                                    */
#define VAULT_RACE_MAX16    0x00001000L
#define VAULT_RACE_MAX32    0x00002000L
#define VAULT_RACE_MAX64    0x00004000L
#define VAULT_RACE_SOME     0x00008000L /* if no other monsters can be found, allow monsters with */
                                        /* only some correct flags                                */
#define VAULT_MIRROR_X      0x00010000L /* this vault may be mirrored around the X-axis */
#define VAULT_MIRROR_Y      0x00020000L /* this vault may be mirrored around the Y-axis */

/*** General flag values ***/

/*
 * Special cave grid flags
 */
#define CAVE_MARK       0x00000001L    /* memorized feature */
#define CAVE_GLOW       0x00000002L    /* self-illuminating */
#define CAVE_VAULT      0x00000004L    /* part of a vault */
#define CAVE_LITE       0x00000008L    /* lite flag  */
#define CAVE_VIEW       0x00000010L    /* view flag */
#define CAVE_TEMP       0x00000020L    /* temp flag */
#define CAVE_XTRA       0x00000040L    /* misc flag */
#define CAVE_OLD_LITE   0x00000080L    /* flag for quick update of lit squares */
/* jk - since fdat now is 32 bit, we have some room! */

/* jk - this to make the f_info bit-flags more explicit */
#define CAVE_OLD_VIEW   0x00000100L    /* flag for quick update of viewed squares */
#define CAVE_WALK       0x00000200L    /* can we walk here */
#define CAVE_LIGHT      0x00000400L    /* can we light beyond this */
#define CAVE_MIMIC      0x00000800L    /* do we mimic something else */
#define CAVE_MAGIC      0x00001000L    /* can we throw a spell past this */
#define CAVE_SWIM       0x00002000L    /* do we drown here */
#define CAVE_NOTICE     0x00004000L    /* do we notice it when we walk there */
#define CAVE_AREN       0x00008000L    /* arena square */

#define CAVE_AREN_CROWD 0x00010000L    /* arena crowd square */
#define CAVE_ROOM       0x00020000L    /* part of a room, including the surrounding walls */
#define CAVE_NEST       0x00040000L    /* part of a monster nest */
#define CAVE_PIT        0x00080000L    /* part of a monster pit */
#define CAVE_MAZE       0x00100000L    /* part of a maze */
#define CAVE_PLAYERTRAP 0x00200000L    /* a trap set by the player */

#define CAVE_FLAGS_PERSISTENT (CAVE_AREN | CAVE_VAULT | CAVE_ROOM | CAVE_NEST | CAVE_PIT | CAVE_GLOW | CAVE_MAZE)

/* jk - these flags are used in the set_grid* routines in cave.c */
#define GRID_KEEP   1 /* change normal flags */
#define GRID_ADD      2 /* add normal flags */
#define GRID_REPLACE  3 /* change all flags, including the persistant */
                        /* flags in CAVE_FLAGS_PERSISTENT */

/* jk - these flags define some bits for the object-log */
/* these may be combined, for a monster in a vault, for example */
#define OBJ_FOUND_ROOM    0x00000001 /* found on the floor */
#define OBJ_FOUND_TUNNEL  0x00000002 /* found in a tunnel */
#define OBJ_FOUND_STORE   0x00000004 /* bought */
#define OBJ_FOUND_VAULT   0x00000008 /* found in a vault */
#define OBJ_FOUND_MONSTER 0x00000010 /* found in a monster inventory */
#define OBJ_FOUND_NEST    0x00000020 /* found in a monster nest */
#define OBJ_FOUND_PIT     0x00000040 /* found in a monster nest */
#define OBJ_FOUND_MAZE    0x00000080 /* found in a maze */
#define OBJ_FOUND_BIRTH   0x00000100 /* birth equipment */
#define OBJ_FOUND_WIZARD  0x00000200 /* wizard-mode created */
#define OBJ_FOUND_KILLED  0x00010000 /* killed by the player */

#define OBJ_FOUND_TRAPZAP 0x00020000 /* killed by a trap */
#define OBJ_FOUND_WIZKILL 0x00040000 /* killed in wizard-mode */
#define OBJ_FOUND_MONKILL 0x00080000 /* killed by another monster */
#define OBJ_FOUND_TRAP    0x00100000 /* part of a trap */
#define OBJ_FOUND_PLENTY  0x00200000 /* found via a staff of plenty */
#define OBJ_FOUND_SOME    0x00400000 /* only part of a stack found here */
#define OBJ_FOUND_POISON  0x00800000 /* created by a cloud of poison gas */

/* jk - map_info disregards anything on a square with a tree more than 1 */
/* square away. That's nice, except that this routine is also used by    */
/* detect. Therefor, calling with mode=INFO_TREE will disable this       */
#define LITE_NORMAL      0
#define LITE_DETECT      1

#define DIR_BEL1 0
#define DIR_SW   1
#define DIR_S    2
#define DIR_SE   3
#define DIR_W    4
#define DIR_BEL2 5
#define DIR_E    6
#define DIR_NW   7
#define DIR_N    8
#define DIR_NE   9

/*
 * Bit flags for the "project()" function
 *
 *   JUMP: Jump directly to the target location, do not originate at the location of 'who'.
 *   BEAM: Work as a beam weapon (affect every grid passed through)
 *   THRU: Continue "through" the target (used for "bolts"/"beams")
 *   STOP: Stop as soon as we hit a monster (used for "bolts")
 *   GRID: Affect each grid in the "blast area" in some way
 *   ITEM: Affect each object in the "blast area" in some way
 *   KILL: Affect each monster in the "blast area" in some way
 *   HIDE: Hack -- disable "visual" feedback from projection
 *   JK
 *   TRAP: Affects traps
 */
#define PROJECT_JUMP            0x0001
#define PROJECT_BEAM            0x0002
#define PROJECT_THRU            0x0004
#define PROJECT_STOP            0x0008
#define PROJECT_GRID            0x0010
#define PROJECT_ITEM            0x0020
#define PROJECT_KILL_MONSTER    0x0040
#define PROJECT_KILL_PLAYER     0x0080
#define PROJECT_HIDE            0x0100

/* jk - flags for how an item drops/hits */

#define DROP_BREAK      0x01
#define DROP_DISAPPEAR  0x02
#define DROP_SHATTER    0x03
#define DROP_CRUMBLE    0x04
#define DROP_FISSURE    0x05
#define DROP_SINK       0x06
#define DROP_BURN       0x07

#define HIT_BREAK       0x10
#define HIT_DISAPPEAR   0x11
#define HIT_SHATTER     0x12
#define HIT_CRUMBLE     0x13
#define HIT_FISSURE     0x14

/*
 * Bit flags for the "enchant()" function
 */
#define ENCH_TOHIT   0x01
#define ENCH_TODAM   0x02
#define ENCH_TOAC    0x04

/*
 * Some bit-flags for the "smart" field
 */
#define SM_RES_ACID     0x00000001
#define SM_RES_ELEC     0x00000002
#define SM_RES_FIRE     0x00000004
#define SM_RES_COLD     0x00000008
#define SM_RES_POIS     0x00000010
#define SM_RES_NETH     0x00000020
#define SM_RES_LITE     0x00000040
#define SM_RES_DARK     0x00000080
#define SM_RES_FEAR     0x00000100
#define SM_RES_CONF     0x00000200
#define SM_RES_CHAOS    0x00000400
#define SM_RES_DISEN    0x00000800
#define SM_RES_BLIND    0x00001000
#define SM_RES_NEXUS    0x00002000
#define SM_RES_SOUND    0x00004000
#define SM_RES_SHARD    0x00008000
#define SM_OPP_ACID     0x00010000
#define SM_OPP_ELEC     0x00020000
#define SM_OPP_FIRE     0x00040000
#define SM_OPP_COLD     0x00080000
#define SM_OPP_POIS     0x00100000
#define SM_OPP_XXX1     0x00200000
#define SM_OPP_XXX2     0x00400000
#define SM_OPP_XXX3     0x00800000
#define SM_IMM_ACID     0x01000000
#define SM_IMM_ELEC     0x02000000
#define SM_IMM_FIRE     0x04000000
#define SM_IMM_COLD     0x08000000
#define SM_IMM_XXX5     0x10000000
#define SM_IMM_XXX6     0x20000000
#define SM_IMM_FREE     0x40000000
#define SM_IMM_MANA     0x80000000

/*
 * Bit flags for the "p_ptr->notice" variable
 */
#define PN_COMBINE      0x00000001L     /* Combine the pack */
#define PN_REORDER      0x00000002L     /* Reorder the pack */
/* xxx (many) */

/*
 * Bit flags for the "p_ptr->update" variable
 */
#define PU_BONUS        0x00000001L     /* Calculate bonuses */
#define PU_TORCH        0x00000002L     /* Calculate torch radius */
#define PU_HP           0x00000004L     /* Calculate chp and mhp */
#define PU_MANA         0x00000008L     /* Calculate csp and msp */
#define PU_UN_VIEW      0x00000010L     /* Forget view */
#define PU_VIEW         0x00000020L     /* Update view */
#define PU_MONSTERS     0x00000040L     /* Update monsters */
#define PU_DISTANCE     0x00000080L     /* Update distances */
#define PU_FLOW         0x00000100L     /* Update flow */
#define PU_PANEL        0x00000200L     /* Update panel */

/*
 * Bit flags for the "p_ptr->redraw" variable
 */
#define PR1_MISC         0x00000001L     /* Display Race/Class */
#define PR1_TITLE        0x00000002L     /* Display Title */
#define PR1_LEV          0x00000004L     /* Display Level */
#define PR1_EXP          0x00000008L     /* Display Experience */
#define PR1_STATS        0x00000010L     /* Display Stats */
#define PR1_ARMOR        0x00000020L     /* Display Armor */
#define PR1_HP           0x00000040L     /* Display Hitpoints */
#define PR1_MANA         0x00000080L     /* Display Mana */
#define PR1_GOLD         0x00000100L     /* Display Gold */
#define PR1_DEPTH        0x00000200L     /* Display Depth */

/* jk */
#define PR1_POSITION     0x00000400L     /* display position on screen */
#define PR1_HEALTH       0x00000800L     /* Display Health Bar */
#define PR1_CUT          0x00001000L     /* Display Extra (Cut) */
#define PR1_STUN         0x00002000L     /* Display Extra (Stun) */
#define PR1_HUNGER       0x00004000L     /* Display Extra (Hunger) */
/* xxx */
#define PR1_BLIND        0x00010000L     /* Display Extra (Blind) */
#define PR1_CONFUSED     0x00020000L     /* Display Extra (Confused) */
#define PR1_AFRAID       0x00040000L     /* Display Extra (Afraid) */
#define PR1_POISONED     0x00080000L     /* Display Extra (Poisoned) */
#define PR1_STATE        0x00100000L     /* Display Extra (State) */
#define PR1_SPEED        0x00200000L     /* Display Extra (Speed) */
#define PR1_STUDY        0x00400000L     /* Display Extra (Study) */
/* jk */
#define PR1_SLIDING      0x00800000L     /* Display Extra (Sliding) */
#define PR1_THROAT       0x01000000L     /* Display Extra (throat) */

#define PR1_EXTRA        0x02000000L     /* Display Extra Info */
#define PR1_BASIC        0x04000000L     /* Display Basic Info */
#define PR1_MAP          0x08000000L     /* Display Map */

#define PR1_WIPE         0x10000000L     /* Hack -- Total Redraw */
#define PR1_AROUND       0x20000000L     /* Redraw "around" the player */
#define PR1_RECENT       0x40000000L     /* Redraw "recent" monster info */
#define PR1_CHOOSE       0x80000000L     /* Redraw "choices" or whatever */

#define PR2_FIRE         0x00000001L     /* Redraw "fire" status    */
#define PR2_COLD         0x00000002L     /* Redraw "cold" status    */
#define PR2_ELEC         0x00000004L     /* Redraw "elec" status    */
#define PR2_ACID         0x00000008L     /* Redraw "acid" status    */
#define PR2_LIFT         0x00000010L     /* Redraw "lift" status    */
#define PR2_READ         0x00000020L     /* Redraw "read" status    */
#define PR2_REFLECT      0x00000040L     /* Redraw "reflect" status */
#define PR2_EQUIPPY      0x00000080L     /* Redraw "equippy" status */

#define PR2_WIPE         0x10000000L     /* Total redraw         */
#define PR2_AROUND       0x20000000L     /* Redraw "around" the player */
#define PR2_RECENT       0x40000000L     /* Redraw "recent" monster info */
#define PR2_CHOOSE       0x80000000L     /* Redraw "choices" or whatever */

/*
 * Bit flags for the "p_ptr->window" variable (etc)
 */
#define PW_INVEN        0x00000001L     /* Display inven/equip    */
#define PW_EQUIP        0x00000002L     /* Display equip/inven    */
#define PW_PLAYER_0     0x00000004L     /* Display player (basic) */
#define PW_PLAYER_1     0x00000008L     /* Display player (extra) */
#define PW_LASTKILL     0x00000010L     /* List of last kills     */
/* xxx */
/* xxx */
#define PW_MESSAGE      0x00000040L     /* Display messages       */
#define PW_OVERHEAD     0x00000080L     /* Display overhead view  */
#define PW_MONSTER      0x00000100L     /* Display monster recall */
#define PW_OBJECT       0x00000200L     /* Display object recall  */
/* xxx */
#define PW_SNAPSHOT     0x00000800L     /* Display snap-shot      */
#define PW_BORG_1       0x00004000L     /* Display borg messages  */
#define PW_BORG_2       0x00008000L     /* Display borg status    */

/*** General index values ***/

/* jk */
#define MAX_TRAPS_IN_SET 4 /* maximum number of concurrent traps */

#define FTRAP_CHEST      0x000000001 /* may appear on chests */
#define FTRAP_DOOR       0x000000002 /* may appear on doors/floors */
#define FTRAP_XXX3       0x000000004
#define FTRAP_XXX4       0x000000008
#define FTRAP_XXX5       0x000000010
#define FTRAP_XXX6       0x000000020
#define FTRAP_XXX7       0x000000040
#define FTRAP_XXX8       0x000000080
#define FTRAP_XXX9       0x000000100
#define FTRAP_XXX10      0x000000200
#define FTRAP_XXX11      0x000000400
#define FTRAP_XXX12      0x000000800
#define FTRAP_XXX13      0x000001000
#define FTRAP_XXX14      0x000002000
#define FTRAP_XXX15      0x000004000
#define FTRAP_XXX16      0x000008000
#define FTRAP_LEVEL1     0x000010000 /* low level ball/bolt trap */
#define FTRAP_LEVEL2     0x000020000 /* medium level ball/bolt trap */
#define FTRAP_LEVEL3     0x000040000 /* high level ball/bolt trap */
#define FTRAP_LEVEL4     0x000080000 /* oops level ball/bolt trap */
#define FTRAP_XXX21      0x000100000
#define FTRAP_XXX22      0x000200000
#define FTRAP_XXX23      0x000400000
#define FTRAP_XXX24      0x000800000
#define FTRAP_XXX25      0x001000000
#define FTRAP_XXX26      0x002000000
#define FTRAP_XXX27      0x004000000
#define FTRAP_XXX28      0x008000000
#define FTRAP_XXX29      0x010000000
#define FTRAP_XXX30      0x020000000
#define FTRAP_XXX31      0x040000000
#define FTRAP_XXX32      0x080000000


/* jk */
#define STAT_DEC_TEMPORARY 1
#define STAT_DEC_NORMAL    2
#define STAT_DEC_PERMANENT 3

/* jk - which trap is which number */

#define TRAP_OF_WEAKNESS_I                  1
#define TRAP_OF_WEAKNESS_II                 2
#define TRAP_OF_WEAKNESS_III                3
#define TRAP_OF_INTELLIGENCE_I              4
#define TRAP_OF_INTELLIGENCE_II             5
#define TRAP_OF_INTELLIGENCE_III            6
#define TRAP_OF_WISDOM_I                    7
#define TRAP_OF_WISDOM_II                   8
#define TRAP_OF_WISDOM_III                  9
#define TRAP_OF_FUMBLING_I                 10
#define TRAP_OF_FUMBLING_II                11
#define TRAP_OF_FUMBLING_III               12
#define TRAP_OF_WASTING_I                  13
#define TRAP_OF_WASTING_II                 14
#define TRAP_OF_WASTING_III                15
#define TRAP_OF_BEAUTY_I                   16
#define TRAP_OF_BEAUTY_II                  17
#define TRAP_OF_BEAUTY_III                 18

#define TRAP_OF_CURSE_WEAPON               20
#define TRAP_OF_CURSE_ARMOR                21
#define TRAP_OF_EARTHQUAKE                 22
#define TRAP_OF_POISON_NEEDLE              23
#define TRAP_OF_SUMMON_MONSTER             24
#define TRAP_OF_SUMMON_UNDEAD              25
#define TRAP_OF_SUMMON_GREATER_UNDEAD      26
#define TRAP_OF_TELEPORT                   27
#define TRAP_OF_PARALYZING                 28
#define TRAP_OF_EXPLOSIVE_DEVICE           29
#define TRAP_OF_TELEPORT_AWAY              30
#define TRAP_OF_LOSE_MEMORY                31
#define TRAP_OF_BITTER_REGRET              32
#define TRAP_OF_BOWEL_CRAMPS               33
#define TRAP_OF_BLINDNESS_CONFUSION        34
#define TRAP_OF_AGGRAVATION                35
#define TRAP_OF_MULTIPLICATION             36
#define TRAP_OF_STEAL_ITEM                 37
#define TRAP_OF_SUMMON_FAST_QUYLTHULGS     38
#define TRAP_OF_SINKING                    39
#define TRAP_OF_MANA_DRAIN                 40
#define TRAP_OF_MISSING_MONEY              41
#define TRAP_OF_NO_RETURN                  42
#define TRAP_OF_SILENT_SWITCHING           43
#define TRAP_OF_WALLS                      44
#define TRAP_OF_CALLING_OUT                45
#define TRAP_OF_SLIDING                    46
#define TRAP_OF_CHARGES_DRAIN              47
#define TRAP_OF_STAIR_MOVEMENT             48
#define TRAP_OF_NEW                        49
#define TRAP_OF_SCATTER_ITEMS              50
#define TRAP_OF_DECAY                      51
#define TRAP_OF_WASTING_WANDS              52
#define TRAP_OF_FILLING                    53
#define TRAP_OF_DRAIN_SPEED                54

#define TRAP_OF_ELEC_BOLT                  60
#define TRAP_OF_POIS_BOLT                  61
#define TRAP_OF_ACID_BOLT                  62
#define TRAP_OF_COLD_BOLT                  63
#define TRAP_OF_FIRE_BOLT                  64
#define TRAP_OF_PLASMA_BOLT                65
#define TRAP_OF_WATER_BOLT                 66
#define TRAP_OF_LITE_BOLT                  67
#define TRAP_OF_DARK_BOLT                  68
#define TRAP_OF_SHARDS_BOLT                69
#define TRAP_OF_SOUND_BOLT                 70
#define TRAP_OF_CONFUSION_BOLT             71
#define TRAP_OF_FORCE_BOLT                 72
#define TRAP_OF_INERTIA_BOLT               73
#define TRAP_OF_MANA_BOLT                  74
#define TRAP_OF_ICE_BOLT                   75
#define TRAP_OF_CHAOS_BOLT                 76
#define TRAP_OF_NETHER_BOLT                77
#define TRAP_OF_DISENCHANT_BOLT            78
#define TRAP_OF_NEXUS_BOLT                 79
#define TRAP_OF_TIME_BOLT                  80
#define TRAP_OF_GRAVITY_BOLT               81

#define TRAP_OF_ELEC_BALL                  82
#define TRAP_OF_POIS_BALL                  83
#define TRAP_OF_ACID_BALL                  84
#define TRAP_OF_COLD_BALL                  85
#define TRAP_OF_FIRE_BALL                  86
#define TRAP_OF_PLASMA_BALL                87
#define TRAP_OF_WATER_BALL                 88
#define TRAP_OF_LITE_BALL                  89
#define TRAP_OF_DARK_BALL                  90
#define TRAP_OF_SHARDS_BALL                91
#define TRAP_OF_SOUND_BALL                 92
#define TRAP_OF_CONFUSION_BALL             93
#define TRAP_OF_FORCE_BALL                 94
#define TRAP_OF_INERTIA_BALL               95
#define TRAP_OF_MANA_BALL                  96
#define TRAP_OF_ICE_BALL                   97
#define TRAP_OF_CHAOS_BALL                 98
#define TRAP_OF_NETHER_BALL                99
#define TRAP_OF_DISENCHANT_BALL           100
#define TRAP_OF_NEXUS_BALL                101
#define TRAP_OF_TIME_BALL                 102
#define TRAP_OF_GRAVITY_BALL              103

#define TRAP_OF_ARROW_I                   110
#define TRAP_OF_ARROW_II                  111
#define TRAP_OF_ARROW_III                 112
#define TRAP_OF_ARROW_IV                  113
#define TRAP_OF_POISON_ARROW_I            114
#define TRAP_OF_POISON_ARROW_II           115
#define TRAP_OF_POISON_ARROW_III          116
#define TRAP_OF_POISON_ARROW_IV           117
#define TRAP_OF_DAGGER_I                  118
#define TRAP_OF_DAGGER_II                 119
#define TRAP_OF_POISON_DAGGER_I           120
#define TRAP_OF_POISON_DAGGER_II          121
#define TRAP_OF_ARROWS_I                  122
#define TRAP_OF_ARROWS_II                 123
#define TRAP_OF_ARROWS_III                124
#define TRAP_OF_ARROWS_IV                 125
#define TRAP_OF_POISON_ARROWS_I           126
#define TRAP_OF_POISON_ARROWS_II          127
#define TRAP_OF_POISON_ARROWS_III         128
#define TRAP_OF_POISON_ARROWS_IV          129
#define TRAP_OF_DAGGERS_I                 130
#define TRAP_OF_DAGGERS_II                131
#define TRAP_OF_POISON_DAGGERS_I          132
#define TRAP_OF_POISON_DAGGERS_II         133

#define TRAP_OF_DROP_ITEMS                140
#define TRAP_OF_DROP_ALL_ITEMS            141
#define TRAP_OF_DROP_EVERYTHING           142
#define TRAP_OF_SUMMON_HOUNDS             143

/*
 * Legal restrictions for "summon_specific()"
 */
/* jk */
#define SUMMON_ANIMAL            8
#define SUMMON_TROLL             9
#define SUMMON_QUYLTHULG        10
#define SUMMON_ANT              11
#define SUMMON_SPIDER           12
#define SUMMON_HOUND            13
#define SUMMON_HYDRA            14
#define SUMMON_ANGEL            15
#define SUMMON_DEMON            16
#define SUMMON_UNDEAD           17
#define SUMMON_DRAGON           18
#define SUMMON_HI_UNDEAD        21
#define SUMMON_HI_DRAGON        22
#define SUMMON_WRAITH           31
#define SUMMON_UNIQUE           32
#define SUMMON_NON_UNIQUE       33

/* jk - spell typs for skills to be added later */
#define SPELL_SMALL             0
#define SPELL_AVG            1
#define SPELL_LARGE             2
#define SPELL_SUPER             3

#define MAX_SPELL_SCALES        4

#define SPELL_ATTACK_NAT        0
#define SPELL_ATTACK_DRK        1
#define SPELL_ESCAPE            2
#define SPELL_HEAL              3
#define SPELL_SEEK              4
#define SPELL_CHANGE_OTHER      5
#define SPELL_CHANGE_ITEM       6
#define SPELL_CHANGE_SELF       7
#define SPELL_CHANGE_WORLD      8

#define MAX_SPELL_TYPES         9

/*
 * Spell types used by project(), and related functions.
 */
#define GF_ELEC         1
#define GF_POIS         2
#define GF_ACID         3
#define GF_COLD         4
#define GF_FIRE         5
#define GF_MISSILE      6
#define GF_ARROW        7
#define GF_PLASMA       8
#define GF_HOLY_ORB     9
#define GF_WATER        10
#define GF_LITE         11
#define GF_DARK         12
#define GF_LITE_WEAK    13
#define GF_DARK_WEAK    14
#define GF_SHARDS       15
#define GF_SOUND        16
#define GF_CONFUSION    17
#define GF_CONF_STRONG  18
#define GF_FORCE        19
#define GF_INERTIA      20
#define GF_MANA         21
#define GF_METEOR       22
#define GF_ICE          23
#define GF_CHAOS        24
#define GF_NETHER       25
#define GF_DISENCHANT   26
#define GF_NEXUS        27
#define GF_TIME         28
#define GF_GRAVITY      29
#define GF_KILL_WALL    30
#define GF_KILL_DOOR    31
#define GF_KILL_TRAP    32
#define GF_IDENT_TRAP   33

#define GF_MAKE_WALL    34
#define GF_MAKE_DOOR    35
#define GF_MAKE_TRAP    36
#define GF_CLONE        37
#define GF_POLY         38
#define GF_HEAL         39
#define GF_SPEED        40
#define GF_SLOW         41
#define GF_CONF         42
#define GF_SLEEP        43
#define GF_SLEEP_STRONG 44
#define GF_DRAIN        45
#define GF_AWAY_UNDEAD  46
#define GF_AWAY_EVIL    47
#define GF_AWAY_ALL     48
#define GF_TURN_UNDEAD  49
#define GF_TURN_EVIL    50
#define GF_TURN_ALL     51
#define GF_DISP_UNDEAD  52
#define GF_DISP_EVIL    53
#define GF_DISP_ALL     54

/*
 * Some things which induce learning
 */
#define DRS_ACID        1
#define DRS_ELEC        2
#define DRS_FIRE        3
#define DRS_COLD        4
#define DRS_POIS        5
#define DRS_NETH        6
#define DRS_LITE        7
#define DRS_DARK        8
#define DRS_FEAR        9
#define DRS_CONF        10
#define DRS_CHAOS       11
#define DRS_DISEN       12
#define DRS_BLIND       13
#define DRS_NEXUS       14
#define DRS_SOUND       15
#define DRS_SHARD       16
#define DRS_FREE        30
#define DRS_MANA        31

/*
 * Number of keymap modes
 */
#define KEYMAP_MODES    2

/*
 * Mode for original keyset commands
 */
#define KEYMAP_MODE_ORIG        0

/*
 * Mode for roguelike keyset commands
 */
#define KEYMAP_MODE_ROGUE       1

/*
 * Hack -- first "normal" artifact in the artifact list.  All of
 * the artifacts with indexes from 1 to 35 are "special" (lights,
 * rings, amulets), and the ones from 36 and up are "normal".
 */
#define ART_MIN_NORMAL          36

/*
 * Hack -- special "xtra" object powers
 */

        /* Sustain one stat */
#define EGO_XTRA_SUSTAIN        1

        /* High resist */
#define EGO_XTRA_HIGHRESIST     2
#define EGO_XTRA_LOWRESIST      3

        /* Special ability */
#define EGO_XTRA_ABILITY        4

/*
 * flag to get no color, even if we know the color of an item
 */
#define ITEM_DESC_COLOR         0x20

/*** Object flag values ***/

/*
 * Special "Item Flags"
 */
#define ID_SENSE        0x0001    /* Item has been "sensed"        */
#define ID_FIXED        0x0002    /* Item has been "haggled"       */
#define ID_EMPTY        0x0004    /* Item charges are known        */
#define ID_KNOWN        0x0008    /* Item abilities are known      */
#define ID_RUMOUR       0x0010    /* Item background is known      */
#define ID_MENTAL       0x0020    /* Item information is known     */
#define ID_CURSED       0x0040    /* Item is temporarily cursed    */
#define ID_BROKEN       0x0080    /* Item is permanently worthless */
#define ID_EQUIPTESTED  0x0100    /* Item has been tried           */

/*
 * Special Monster Flags (all temporary)
 */
#define MFLAG_VIEW      0x01    /* Monster is in line of sight */
/* xxx */
#define MFLAG_BORN      0x10    /* Monster is still being born */
#define MFLAG_NICE      0x20    /* Monster is still being nice */
#define MFLAG_SHOW      0x40    /* Monster is recently memorized */
#define MFLAG_MARK      0x80    /* Monster is currently memorized */

/*
 * different types of events that can cause a ball or bolt of something
 */
#define WHO_MONSTER         1
#define WHO_PLAYER          2
#define WHO_TRAPBYPLAYER    3
#define WHO_TRAPBYMONSTER   4
#define WHO_PLAYERASWIZARD  5

/*
 * As of 2.7.8, the "object flags" are valid for all objects, and as
 * of 2.7.9, these flags are not actually stored with the object.
 *
 * Note that "flags1" contains all flags dependant on "p1val" (including
 * stat bonuses, but NOT stat sustainers), plus all "extra attack damage"
 * flags (SLAY_XXX and BRAND_XXX).
 *
 * Note that "flags2" contains all "resistances" (including "Stat Sustainers",
 * actual immunities, and resistances).  Note that "Hold Life" is really an
 * "immunity" to ExpLoss, and "Free Action" is "immunity to paralysis".
 *
 * Note that "flags3" contains everything else -- including the three "CURSED"
 * flags, and the "BLESSED" flag, several "item display" parameters, some new
 * flags for powerful Bows, and flags which affect the player in a "general"
 * way (LITE, TELEPATHY, SEE_INVIS, SLOW_DIGEST, REGEN, FEATHER), including
 * all the "general" curses (TELEPORT, AGGRAVATE, EXP_DRAIN).  It also has
 * four new flags called "ITEM_IGNORE_XXX" which lets an item specify that
 * it can not be affected by various forms of destruction.  This is NOT as
 * powerful as actually granting resistance/immunity to the wearer.
 */

#define TR1_STR1                0x0000000000000001LL     /* STR += "p1val" */
#define TR1_INT1                0x0000000000000002LL     /* INT += "p1val" */
#define TR1_WIS1                0x0000000000000004LL     /* WIS += "p1val" */
#define TR1_DEX1                0x0000000000000008LL     /* DEX += "p1val" */
#define TR1_CON1                0x0000000000000010LL     /* CON += "p1val" */
#define TR1_CHR1                0x0000000000000020LL     /* CHR += "p1val" */
#define TR1_LITE1               0x0000000000000040LL     /* Permanent Lite += "p1val" */
#define TR1_STEALTH1            0x0000000000000080LL     /* Stealth += "p1val" */
#define TR1_SEARCH1             0x0000000000000100LL     /* Search += "p1val"  */
#define TR1_INFRA1              0x0000000000000200LL     /* Infra += "p1val"   */
#define TR1_TUNNEL1             0x0000000000000400LL     /* Tunnel += "p1val"  */
#define TR1_SPEED1              0x0000000000000800LL     /* Speed += "p1val"   */
#define TR1_BLOWS1              0x0000000000001000LL     /* Blows += "p1val"   */
#define TR1_MIGHT1              0x0000000000002000LL     /* Might += "p1val"   */
#define TR1_SHOTS1              0x0000000000004000LL     /* Shots += "p1val"   */
#define TR1_MAGIC1              0x0000000000008000LL     /* affects magic skill */
#define TR1_VAMPIRIC1           0x0000000000010000LL     /* has vampiric qualities */

#define TR1_STAT1_START         0x0000000000000001LL

#define TR1_STR2                0x0000000000020000LL     /* STR += "p1val" */
#define TR1_INT2                0x0000000000040000LL     /* INT += "p1val" */
#define TR1_WIS2                0x0000000000080000LL     /* WIS += "p1val" */
#define TR1_DEX2                0x0000000000100000LL     /* DEX += "p1val" */
#define TR1_CON2                0x0000000000200000LL     /* CON += "p1val" */
#define TR1_CHR2                0x0000000000400000LL     /* CHR += "p1val" */
#define TR1_LITE2               0x0000000000800000LL     /* Permanent Lite += "p1val" */
#define TR1_STEALTH2            0x0000000001000000LL     /* Stealth += "p1val" */
#define TR1_SEARCH2             0x0000000002000000LL     /* Search += "p1val"  */
#define TR1_INFRA2              0x0000000004000000LL     /* Infra += "p1val"   */
#define TR1_TUNNEL2             0x0000000008000000LL     /* Tunnel += "p1val"  */
#define TR1_SPEED2              0x0000000010000000LL     /* Speed += "p1val"   */
#define TR1_BLOWS2              0x0000000020000000LL     /* Blows += "p1val"   */
#define TR1_MIGHT2              0x0000000040000000LL     /* Might += "p1val"   */
#define TR1_SHOTS2              0x0000000080000000LL     /* Shots += "p1val"   */
#define TR1_MAGIC2              0x0000000100000000LL     /* affects magic skill */
#define TR1_VAMPIRIC2           0x0000000200000000LL     /* has vampiric qualities */

#define TR1_STAT2_START         0x0000000000020000LL

#define TR1_SLAY_ANIMAL         0x0000000400000000LL
#define TR1_KILL_ANIMAL         0x0000000800000000LL
#define TR1_SLAY_EVIL           0x0000001000000000LL
#define TR1_KILL_EVIL           0x0000002000000000LL
#define TR1_SLAY_UNDEAD         0x0000004000000000LL
#define TR1_KILL_UNDEAD         0x0000008000000000LL
#define TR1_SLAY_DEMON          0x0000010000000000LL
#define TR1_KILL_DEMON          0x0000020000000000LL
#define TR1_SLAY_ORC            0x0000040000000000LL
#define TR1_KILL_ORC            0x0000080000000000LL
#define TR1_SLAY_TROLL          0x0000100000000000LL
#define TR1_KILL_TROLL          0x0000200000000000LL
#define TR1_SLAY_GIANT          0x0000400000000000LL
#define TR1_KILL_GIANT          0x0000800000000000LL
#define TR1_SLAY_DRAGON         0x0001000000000000LL
#define TR1_KILL_DRAGON         0x0002000000000000LL     /* Execute Dragon */
/* jk */
#define TR1_IMPACT              0x0004000000000000LL     /* Cause Earthquakes */
#define TR1_XXX1                0x0008000000000000LL     /* Later */
#define TR1_BRAND_ACID          0x0010000000000000LL
#define TR1_BRAND_ELEC          0x0020000000000000LL
#define TR1_BRAND_FIRE          0x0040000000000000LL
#define TR1_BRAND_COLD          0x0080000000000000LL

#define TR2_SUST_STR            0x0000000000000001LL     /* some routines depend on these and TR1_STR */
#define TR2_SUST_INT            0x0000000000000002LL     /* etc being the first six of flags1, flags2 */
#define TR2_SUST_WIS            0x0000000000000004LL     /* namely the new object-power-display in    */
#define TR2_SUST_DEX            0x0000000000000008LL     /* files.c */
#define TR2_SUST_CON            0x0000000000000010LL
#define TR2_SUST_CHR            0x0000000000000020LL

#define TR2_SUST_STAT_START     0x0000000000000001LL

#define TR2_XXX1                0x0000000000000040LL     /* Later */
#define TR2_XXX2                0x0000000000000080LL     /* Later */
#define TR2_IM_ACID             0x0000000000000100LL
#define TR2_IM_ELEC             0x0000000000000200LL
#define TR2_IM_FIRE             0x0000000000000400LL
#define TR2_IM_COLD             0x0000000000000800LL
#define TR2_XXX3                0x0000000000001000LL     /* Later */
#define TR2_XXX4                0x0000000000002000LL     /* Later */
#define TR2_FREE_ACT            0x0000000000004000LL     /* Free Action */
#define TR2_HOLD_LIFE           0x0000000000008000LL     /* Hold Life */
#define TR2_RES_ACID            0x0000000000010000LL
#define TR2_RES_ELEC            0x0000000000020000LL
#define TR2_RES_FIRE            0x0000000000040000LL
#define TR2_RES_COLD            0x0000000000080000LL
#define TR2_RES_POIS            0x0000000000100000LL
#define TR2_RES_FEAR            0x0000000000200000LL     /* Later */
#define TR2_RES_LITE            0x0000000000400000LL
#define TR2_RES_DARK            0x0000000000800000LL
#define TR2_RES_BLIND           0x0000000001000000LL
#define TR2_RES_CONF            0x0000000002000000LL
#define TR2_RES_SOUND           0x0000000004000000LL
#define TR2_RES_SHARDS          0x0000000008000000LL
#define TR2_RES_NETHER          0x0000000010000000LL
#define TR2_RES_NEXUS           0x0000000020000000LL
#define TR2_RES_CHAOS           0x0000000040000000LL
#define TR2_RES_DISEN           0x0000000080000000LL

#define TR3_XXX1                0x0000000000000001LL     /* Later */
#define TR3_XXX2                0x0000000000000002LL     /* Later */
#define TR3_XXX3                0x0000000000000004LL     /* Later */
#define TR3_XXX4                0x0000000000000008LL     /* Later */
#define TR3_XXX5                0x0000000000000010LL     /* Later */
#define TR3_XXX6                0x0000000000000020LL     /* Later */
#define TR3_XXX7                0x0000000000000040LL     /* Later */
#define TR3_NOFLAVOR            0x0000000000000080LL     /* This object has no flavor */
#define TR3_EASY_KNOW           0x0000000000000100LL     /* Aware -> Known */
#define TR3_HIDE_TYPE           0x0000000000000200LL     /* Hide "p1val" description */
#define TR3_SHOW_MODS           0x0000000000000400LL     /* Always show Tohit/Todam */
#define TR3_INSTA_ART           0x0000000000000800LL     /* Item must be an artifact */
#define TR3_FEATHER             0x0000000000001000LL     /* Feather Falling */
#define TR3_SOMELITE            0x0000000000002000LL     /* radius 1 permanent lite */
#define TR3_SEE_INVIS           0x0000000000004000LL     /* See Invisible */
#define TR3_TELEPATHY           0x0000000000008000LL     /* Telepathy */
#define TR3_SLOW_DIGEST         0x0000000000010000LL     /* Item slows down digestion */
#define TR3_REGEN               0x0000000000020000LL     /* Item induces regeneration */
#define TR3_COULD2H             0x0000000000040000LL     /* Could be wielded 2H */
#define TR3_MUST2H              0x0000000000080000LL     /* Must be wielded 2H */
#define TR3_IGNORE_ACID         0x0000000000100000LL     /* Item ignores Acid Damage */
#define TR3_IGNORE_ELEC         0x0000000000200000LL     /* Item ignores Elec Damage */
#define TR3_IGNORE_FIRE         0x0000000000400000LL     /* Item ignores Fire Damage */
#define TR3_IGNORE_COLD         0x0000000000800000LL     /* Item ignores Cold Damage */
#define TR3_ACTIVATE            0x0000000001000000LL     /* Item can be activated */
#define TR3_DRAIN_EXP           0x0000000002000000LL     /* Item drains Experience */
#define TR3_TELEPORT            0x0000000004000000LL     /* Item teleports player */
#define TR3_AGGRAVATE           0x0000000008000000LL     /* Item aggravates monsters */
#define TR3_BLESSED             0x0000000010000000LL     /* Item is Blessed */
#define TR3_CURSED              0x0000000020000000LL     /* Item is Cursed */
#define TR3_HEAVY_CURSE         0x0000000040000000LL     /* Item is Heavily Cursed */
#define TR3_PERMA_CURSE         0x0000000080000000LL     /* Item is Perma Cursed */


/*
 * Hack -- flag set 1 -- mask for "p1val-dependant" flags.
 * Note that all "p1val" dependant flags must be in "flags1".
 */
/* jk - TR1_VAMPIRIC, TR1_MAGIC inserted */

#define TR1_P1VAL_MASK   \
        (TR1_STR1 | TR1_INT1 | TR1_WIS1 | TR1_DEX1 | TR1_VAMPIRIC1 | \
         TR1_CON1 | TR1_CHR1 | TR1_MIGHT1 | TR1_SHOTS1 | TR1_LITE1 | \
         TR1_STEALTH1 | TR1_SEARCH1 | TR1_INFRA1 | TR1_TUNNEL1 | \
         TR1_SPEED1 | TR1_BLOWS1 | TR1_MAGIC1)

#define TR1_P2VAL_MASK   \
        (TR1_STR2 | TR1_INT2 | TR1_WIS2 | TR1_DEX2 | TR1_VAMPIRIC2 | \
         TR1_CON2 | TR1_CHR2 | TR1_MIGHT2 | TR1_SHOTS2 | TR1_LITE2 | \
         TR1_STEALTH2 | TR1_SEARCH2 | TR1_INFRA2 | TR1_TUNNEL2 | \
         TR1_SPEED2 | TR1_BLOWS2 | TR1_MAGIC2)


/*** Monster blow constants ***/

/*
 * New monster blow methods
 */
#define RBM_HIT         1
#define RBM_TOUCH       2
#define RBM_PUNCH       3
#define RBM_KICK        4
#define RBM_CLAW        5
#define RBM_BITE        6
#define RBM_STING       7
#define RBM_XXX1        8
#define RBM_BUTT        9
#define RBM_CRUSH       10
#define RBM_ENGULF      11
#define RBM_XXX2        12
#define RBM_CRAWL       13
#define RBM_DROOL       14
#define RBM_SPIT        15
#define RBM_XXX3        16
#define RBM_GAZE        17
#define RBM_WAIL        18
#define RBM_SPORE       19
#define RBM_XXX4        20
#define RBM_BEG         21
#define RBM_INSULT      22
#define RBM_MOAN        23
#define RBM_XXX5        24


/*
 * New monster blow effects
 */
#define RBE_HURT        1
#define RBE_POISON      2
#define RBE_UN_BONUS    3
#define RBE_UN_POWER    4
#define RBE_EAT_GOLD    5
#define RBE_EAT_ITEM    6
#define RBE_EAT_FOOD    7
#define RBE_EAT_LITE    8
#define RBE_ACID        9
#define RBE_ELEC        10
#define RBE_FIRE        11
#define RBE_COLD        12
#define RBE_BLIND       13
#define RBE_CONFUSE     14
#define RBE_TERRIFY     15
#define RBE_PARALYZE    16
#define RBE_LOSE_STR    17
#define RBE_LOSE_INT    18
#define RBE_LOSE_WIS    19
#define RBE_LOSE_DEX    20
#define RBE_LOSE_CON    21
#define RBE_LOSE_CHR    22
#define RBE_LOSE_ALL    23
#define RBE_SHATTER     24
#define RBE_EXP_10      25
#define RBE_EXP_20      26
#define RBE_EXP_40      27
#define RBE_EXP_80      28

/*** Monster flag values (hard-coded) ***/

/* jk - corpse stuff */
#define CORPSE_GIVES_STR            0x00000001
#define CORPSE_GIVES_DEX            0x00000002
#define CORPSE_GIVES_INT            0x00000004
#define CORPSE_GIVES_WIS            0x00000008
#define CORPSE_GIVES_CON            0x00000010
#define CORPSE_GIVES_CHR            0x00000020
#define CORPSE_GIVES_BLINDNESS      0x00000040
#define CORPSE_GIVES_CONFUSION      0x00000080
#define CORPSE_GIVES_VOMIT          0x00000100
#define CORPSE_GIVES_TELEPORT       0x00000200
#define CORPSE_GIVES_PEARL          0x00000400
#define CORPSE_GIVES_POISON         0x00000800
#define CORPSE_GIVES_BADPOISON      0x00001000
#define CORPSE_GIVES_PARALYZE       0x00002000
#define CORPSE_GIVES_MANA           0x00004000
#define CORPSE_GIVES_SCREAM         0x00008000
#define CORPSE_GIVES_THROAT         0x00010000
#define CORPSE_GIVES_NEXUS          0x00020000
#define CORPSE_GIVES_BLINK          0x00040000
#define CORPSE_GIVES_SPEED          0x00080000
#define CORPSE_GIVES_FIRE           0x00100000
#define CORPSE_GIVES_ACID           0x00200000
#define CORPSE_GIVES_ELEC           0x00400000
#define CORPSE_GIVES_COLD           0x00800000
#define CORPSE_GIVES_BADTHROAT      0x01000000
#define CORPSE_GIVES_SLEEP          0x02000000
#define CORPSE_GIVES_BERSERKER      0x04000000
#define CORPSE_GIVES_INFLATE        0x08000000
#define CORPSE_GIVES_FORGET         0x10000000
#define CORPSE_GIVES_BADSCREAM      0x20000000
#define CORPSE_GIVES_XXX7           0x40000000
#define CORPSE_GIVES_XXX8           0x80000000

#define CORPSE_TAKES_STR            0x00000001
#define CORPSE_TAKES_DEX            0x00000002
#define CORPSE_TAKES_INT            0x00000004
#define CORPSE_TAKES_WIS            0x00000008
#define CORPSE_TAKES_CON            0x00000010
#define CORPSE_TAKES_CHR            0x00000020
#define CORPSE_TAKES_BLINDNESS      0x00000040
#define CORPSE_TAKES_CONFUSION      0x00000080
#define CORPSE_TAKES_POISON         0x00000100
#define CORPSE_TAKES_BADPOISON      0x00000200
#define CORPSE_TAKES_PARALYZE       0x00000400
#define CORPSE_TAKES_MANA           0x00000800
#define CORPSE_TAKES_SPEED          0x00001000
#define CORPSE_TAKES_ACID           0x00002000
#define CORPSE_TAKES_FIRE           0x00004000
#define CORPSE_TAKES_ELEC           0x00008000
#define CORPSE_TAKES_COLD           0x00010000
#define CORPSE_TAKES_XXX1           0x00020000
#define CORPSE_TAKES_XXX2           0x00040000
#define CORPSE_TAKES_XXX3           0x00080000
#define CORPSE_TAKES_XXX4           0x00100000
#define CORPSE_TAKES_XXX5           0x00200000
#define CORPSE_TAKES_XXX6           0x00400000
#define CORPSE_TAKES_XXX7           0x00800000
#define CORPSE_TAKES_XXX8           0x01000000
#define CORPSE_TAKES_XXX9           0x02000000
#define CORPSE_TAKES_XXX10          0x04000000
#define CORPSE_TAKES_XXX11          0x08000000
#define CORPSE_TAKES_XXX12          0x10000000
#define CORPSE_TAKES_XXX13          0x20000000
#define CORPSE_TAKES_XXX14          0x40000000
#define CORPSE_TAKES_XXX15          0x80000000

/*
 * movement result flags
 */
#define MOVE_KILL_WALL   0x00000001
#define MOVE_PASS_WALL   0x00000002
#define MOVE_OPEN_DOOR   0x00000004
#define MOVE_BASH_DOOR   0x00000008
#define MOVE_MOVE_BODY   0x00000010
#define MOVE_KILL_BODY   0x00000020
#define MOVE_BREAK_GLYPH 0x00000040
#define MOVE_TAKE_ITEM   0x00000080
#define MOVE_KILL_ITEM   0x00000100

/*
 * birth fiddling benefits flags
 */
#define FIDDLE_PLUS2_ITEMS 1
#define FIDDLE_PLUS1_ITEM  2
#define FIDDLE_MINUS50_EXP 3
#define FIDDLE_MINUS25_EXP 4
#define FIDDLE_PLUS25_EXP  5
#define FIDDLE_PLUS60_EXP  6
#define FIDDLE_PLUS150_EXP 7

/*
 * New monster race bit flags
 */
#define RF1_UNIQUE              0x0000000000000001LL      /*  1  Unique Monster */
#define RF1_QUESTOR             0x0000000000000002LL      /*  2 Quest Monster */
#define RF1_MALE                0x0000000000000004LL      /*  3 Male gender */
#define RF1_FEMALE              0x0000000000000008LL      /*  4 Female gender */
#define RF1_CHAR_CLEAR          0x0000000000000010LL      /*  5 Absorbs symbol */
#define RF1_CHAR_MULTI          0x0000000000000020LL      /*  6 Changes symbol */
#define RF1_ATTR_CLEAR          0x0000000000000040LL      /*  7 Absorbs color */
#define RF1_ATTR_MULTI          0x0000000000000080LL      /*  8 Changes color */
#define RF1_FORCE_DEPTH         0x0000000000000100LL      /*  9 Start at "correct" depth */
#define RF1_FORCE_MAXHP         0x0000000000000200LL      /* 10 Start with max hitpoints */
#define RF1_FORCE_SLEEP         0x0000000000000400LL      /* 11 Start out sleeping */
#define RF1_FORCE_EXTRA         0x0000000000000800LL      /* 12 Start out something */
#define RF1_FRIEND              0x0000000000001000LL      /* 13 Arrive with a friend */
#define RF1_FRIENDS             0x0000000000002000LL      /* 14 Arrive with some friends */
#define RF1_ESCORT              0x0000000000004000LL      /* 15 Arrive with an escort */
#define RF1_ESCORTS             0x0000000000008000LL      /* 16 Arrive with some escorts */
#define RF1_NEVER_BLOW          0x0000000000010000LL      /* 17 Never make physical blow */
#define RF1_NEVER_MOVE          0x0000000000020000LL      /* 18 Never make physical move */
#define RF1_RAND_25             0x0000000000040000LL      /* 19 Moves randomly (25%) */
#define RF1_RAND_50             0x0000000000080000LL      /* 20 Moves randomly (50%) */
#define RF1_ONLY_GOLD           0x0000000000100000LL      /* 21 Drop only gold */
#define RF1_ONLY_ITEM           0x0000000000200000LL      /* 22 Drop only items */
#define RF1_DROP_60             0x0000000000400000LL      /* 23 Drop an item/gold (60%) */
#define RF1_DROP_90             0x0000000000800000LL      /* 24 Drop an item/gold (90%) */
#define RF1_DROP_1D2            0x0000000001000000LL      /* 25 Drop 1d2 items/gold */
#define RF1_DROP_2D2            0x0000000002000000LL      /* 26 Drop 2d2 items/gold */
#define RF1_DROP_3D2            0x0000000004000000LL      /* 27 Drop 3d2 items/gold */
#define RF1_DROP_4D2            0x0000000008000000LL      /* 28 Drop 4d2 items/gold */
#define RF1_DROP_GOOD           0x0000000010000000LL      /* 29 Drop good items */
#define RF1_DROP_GREAT          0x0000000020000000LL      /* 30 Drop great items */
#define RF1_DROP_USEFUL         0x0000000040000000LL      /* 31 Drop "useful" items */
#define RF1_DROP_CHOSEN         0x0000000080000000LL      /* 32 Drop "chosen" items */
#define RF1_XXX33               0x0000000100000000LL      /* 33 unused */
#define RF1_XXX34               0x0000000200000000LL      /* 34 unused */
#define RF1_XXX35               0x0000000400000000LL      /* 35 unused */
#define RF1_XXX36               0x0000000800000000LL      /* 36 unused */
#define RF1_XXX37               0x0000001000000000LL      /* 37 unused */
#define RF1_XXX38               0x0000002000000000LL      /* 38 unused */
#define RF1_XXX39               0x0000004000000000LL      /* 39 unused */
#define RF1_XXX40               0x0000008000000000LL      /* 40 unused */
#define RF1_XXX41               0x0000010000000000LL      /* 41 unused */
#define RF1_XXX42               0x0000020000000000LL      /* 42 unused */
#define RF1_XXX43               0x0000040000000000LL      /* 43 unused */
#define RF1_XXX44               0x0000080000000000LL      /* 44 unused */
#define RF1_XXX45               0x0000100000000000LL      /* 45 unused */
#define RF1_XXX46               0x0000200000000000LL      /* 46 unused */
#define RF1_XXX47               0x0000400000000000LL      /* 47 unused */
#define RF1_XXX48               0x0000800000000000LL      /* 48 unused */
#define RF1_XXX49               0x0001000000000000LL      /* 49 unused */
#define RF1_XXX50               0x0002000000000000LL      /* 50 unused */
#define RF1_XXX51               0x0004000000000000LL      /* 51 unused */
#define RF1_XXX52               0x0008000000000000LL      /* 52 unused */
#define RF1_XXX53               0x0010000000000000LL      /* 53 unused */
#define RF1_XXX54               0x0020000000000000LL      /* 54 unused */
#define RF1_XXX55               0x0040000000000000LL      /* 55 unused */
#define RF1_XXX56               0x0080000000000000LL      /* 56 unused */
#define RF1_XXX57               0x0100000000000000LL      /* 57 unused */
#define RF1_XXX58               0x0200000000000000LL      /* 58 unused */
#define RF1_XXX59               0x0400000000000000LL      /* 59 unused */
#define RF1_XXX60               0x0800000000000000LL      /* 60 unused */
#define RF1_XXX61               0x1000000000000000LL      /* 61 unused */
#define RF1_XXX62               0x2000000100000000LL      /* 62 unused */
#define RF1_XXX63               0x4000000000000000LL      /* 63 unused */
#define RF1_XXX64               0x8000000000000000LL      /* 64 unused */

/*
 * New monster race bit flags
 */
#define RF2_STUPID              0x0000000000000001LL      /*  1 Monster is stupid */
#define RF2_SMART               0x0000000000000002LL      /*  2 Monster is smart */
#define RF2_XXX1                0x0000000000000004LL      /*  3 (?) */
#define RF2_XXX2                0x0000000000000008LL      /*  4 (?) */
#define RF2_INVISIBLE           0x0000000000000010LL      /*  5 Monster avoids vision */
#define RF2_COLD_BLOOD          0x0000000000000020LL      /*  6 Monster avoids infra */
#define RF2_EMPTY_MIND          0x0000000000000040LL      /*  7 Monster avoids telepathy */
#define RF2_WEIRD_MIND          0x0000000000000080LL      /*  8 Monster avoids telepathy? */
#define RF2_MULTIPLY            0x0000000000000100LL      /*  9 Monster reproduces */
#define RF2_REGENERATE          0x0000000000000200LL      /* 10 Monster regenerates */
#define RF2_XXX3                0x0000000000000400LL      /* 11 (?) */
#define RF2_XXX4                0x0000000000000800LL      /* 12 (?) */
#define RF2_POWERFUL            0x0000000000001000LL      /* 13 Monster has strong breath */
#define RF2_XXX5                0x0000000000002000LL      /* 14 (?) */
#define RF2_XXX7                0x0000000000004000LL      /* 15 (?) */
#define RF2_BUILD_WALL          0x0000000000008000LL      /* 16 Monster can build walls */
#define RF2_OPEN_DOOR           0x0000000000010000LL      /* 17 Monster can open doors */
#define RF2_BASH_DOOR           0x0000000000020000LL      /* 18 Monster can bash doors */
#define RF2_PASS_WALL           0x0000000000040000LL      /* 19 Monster can pass walls */
#define RF2_KILL_WALL           0x0000000000080000LL      /* 20 Monster can destroy walls */
#define RF2_MOVE_BODY           0x0000000000100000LL      /* 21 Monster can move monsters */
#define RF2_KILL_BODY           0x0000000000200000LL      /* 22 Monster can kill monsters */
#define RF2_TAKE_ITEM           0x0000000000400000LL      /* 23 Monster can pick up items */
#define RF2_KILL_ITEM           0x0000000000800000LL      /* 24 Monster can crush items */
#define RF2_BRAIN_1             0x0000000001000000LL      /* 25 Cause brain damage power 1 */
#define RF2_BRAIN_2             0x0000000002000000LL      /* 26 Cause brain damage power 2 */
#define RF2_BRAIN_3             0x0000000004000000LL      /* 27 Cause brain damage power 3 */
#define RF2_BRAIN_4             0x0000000008000000LL      /* 28 Cause brain damage power 4 */
#define RF2_BRAIN_5             0x0000000010000000LL      /* 29 Cause brain damage power 5 */
#define RF2_BRAIN_6             0x0000000020000000LL      /* 30 Cause brain damage power 6 */
#define RF2_BRAIN_7             0x0000000040000000LL      /* 31 Cause brain damage power 7 */
#define RF2_BRAIN_8             0x0000000080000000LL      /* 32 Cause brain damage power 8 */
#define RF2_XXX33               0x0000000100000000LL      /* 33 unused */
#define RF2_XXX34               0x0000000200000000LL      /* 34 unused */
#define RF2_XXX35               0x0000000400000000LL      /* 35 unused */
#define RF2_XXX36               0x0000000800000000LL      /* 36 unused */
#define RF2_XXX37               0x0000001000000000LL      /* 37 unused */
#define RF2_XXX38               0x0000002000000000LL      /* 38 unused */
#define RF2_XXX39               0x0000004000000000LL      /* 39 unused */
#define RF2_XXX40               0x0000008000000000LL      /* 40 unused */
#define RF2_XXX41               0x0000010000000000LL      /* 41 unused */
#define RF2_XXX42               0x0000020000000000LL      /* 42 unused */
#define RF2_XXX43               0x0000040000000000LL      /* 43 unused */
#define RF2_XXX44               0x0000080000000000LL      /* 44 unused */
#define RF2_XXX45               0x0000100000000000LL      /* 45 unused */
#define RF2_XXX46               0x0000200000000000LL      /* 46 unused */
#define RF2_XXX47               0x0000400000000000LL      /* 47 unused */
#define RF2_XXX48               0x0000800000000000LL      /* 48 unused */
#define RF2_XXX49               0x0001000000000000LL      /* 49 unused */
#define RF2_XXX50               0x0002000000000000LL      /* 50 unused */
#define RF2_XXX51               0x0004000000000000LL      /* 51 unused */
#define RF2_XXX52               0x0008000000000000LL      /* 52 unused */
#define RF2_XXX53               0x0010000000000000LL      /* 53 unused */
#define RF2_XXX54               0x0020000000000000LL      /* 54 unused */
#define RF2_XXX55               0x0040000000000000LL      /* 55 unused */
#define RF2_XXX56               0x0080000000000000LL      /* 56 unused */
#define RF2_XXX57               0x0100000000000000LL      /* 57 unused */
#define RF2_XXX58               0x0200000000000000LL      /* 58 unused */
#define RF2_XXX59               0x0400000000000000LL      /* 59 unused */
#define RF2_XXX60               0x0800000000000000LL      /* 60 unused */
#define RF2_XXX61               0x1000000000000000LL      /* 61 unused */
#define RF2_XXX62               0x2000000100000000LL      /* 62 unused */
#define RF2_XXX63               0x4000000000000000LL      /* 63 unused */
#define RF2_XXX64               0x8000000000000000LL      /* 64 unused */

/*
 * New monster race bit flags
 */
#define RF3_ORC                 0x0000000000000001LL      /*  1 Orc */
#define RF3_TROLL               0x0000000000000002LL      /*  2 Troll */
#define RF3_GIANT               0x0000000000000004LL      /*  3 Giant */
#define RF3_DRAGON              0x0000000000000008LL      /*  4 Dragon */
#define RF3_DEMON               0x0000000000000010LL      /*  5 Demon */
#define RF3_UNDEAD              0x0000000000000020LL      /*  6 Undead */
#define RF3_EVIL                0x0000000000000040LL      /*  7 Evil */
#define RF3_ANIMAL              0x0000000000000080LL      /*  8 Animal */
#define RF3_WYRM                0x0000000000000100LL      /*  9 Wyrm - needed in vaults */
#define RF3_XXX2                0x0000000000000200LL      /* 10 (?) */
#define RF3_XXX3                0x0000000000000400LL      /* 11 Non-Vocal (?) */
#define RF3_XXX4                0x0000000000000800LL      /* 12 Non-Living (?) */
#define RF3_HURT_LITE           0x0000000000001000LL      /* 13 Hurt by lite */
#define RF3_HURT_ROCK           0x0000000000002000LL      /* 14 Hurt by rock remover */
#define RF3_HURT_FIRE           0x0000000000004000LL      /* 15 Hurt badly by fire */
#define RF3_HURT_COLD           0x0000000000008000LL      /* 16 Hurt badly by cold */
#define RF3_IM_ACID             0x0000000000010000LL      /* 17 Resist acid a lot */
#define RF3_IM_ELEC             0x0000000000020000LL      /* 18 Resist elec a lot */
#define RF3_IM_FIRE             0x0000000000040000LL      /* 19 Resist fire a lot */
#define RF3_IM_COLD             0x0000000000080000LL      /* 20 Resist cold a lot */
#define RF3_IM_POIS             0x0000000000100000LL      /* 21 Resist poison a lot */
#define RF3_NO_FLOOR            0x0000000000200000LL      /* 22 doesn't touch the floor while moving */
#define RF3_RES_NETH            0x0000000000400000LL      /* 23 Resist nether a lot */
#define RF3_RES_WATE            0x0000000000800000LL      /* 24 Resist water */
#define RF3_RES_PLAS            0x0000000001000000LL      /* 25 Resist plasma */
#define RF3_RES_NEXU            0x0000000002000000LL      /* 26 Resist nexus */
#define RF3_RES_DISE            0x0000000004000000LL      /* 27 Resist disenchantment */
#define RF3_XXX6                0x0000000008000000LL      /* 28 Resist (?) */
#define RF3_NO_FEAR             0x0000000010000000LL      /* 29 Cannot be scared */
#define RF3_NO_STUN             0x0000000020000000LL      /* 30 Cannot be stunned */
#define RF3_NO_CONF             0x0000000040000000LL      /* 31 Cannot be confused */
#define RF3_NO_SLEEP            0x0000000080000000LL      /* 32 Cannot be slept */
#define RF3_XXX33               0x0000000100000000LL      /* 33 unused */
#define RF3_XXX34               0x0000000200000000LL      /* 34 unused */
#define RF3_XXX35               0x0000000400000000LL      /* 35 unused */
#define RF3_XXX36               0x0000000800000000LL      /* 36 unused */
#define RF3_XXX37               0x0000001000000000LL      /* 37 unused */
#define RF3_XXX38               0x0000002000000000LL      /* 38 unused */
#define RF3_XXX39               0x0000004000000000LL      /* 39 unused */
#define RF3_XXX40               0x0000008000000000LL      /* 40 unused */
#define RF3_XXX41               0x0000010000000000LL      /* 41 unused */
#define RF3_XXX42               0x0000020000000000LL      /* 42 unused */
#define RF3_XXX43               0x0000040000000000LL      /* 43 unused */
#define RF3_XXX44               0x0000080000000000LL      /* 44 unused */
#define RF3_XXX45               0x0000100000000000LL      /* 45 unused */
#define RF3_XXX46               0x0000200000000000LL      /* 46 unused */
#define RF3_XXX47               0x0000400000000000LL      /* 47 unused */
#define RF3_XXX48               0x0000800000000000LL      /* 48 unused */
#define RF3_XXX49               0x0001000000000000LL      /* 49 unused */
#define RF3_XXX50               0x0002000000000000LL      /* 50 unused */
#define RF3_XXX51               0x0004000000000000LL      /* 51 unused */
#define RF3_XXX52               0x0008000000000000LL      /* 52 unused */
#define RF3_XXX53               0x0010000000000000LL      /* 53 unused */
#define RF3_XXX54               0x0020000000000000LL      /* 54 unused */
#define RF3_XXX55               0x0040000000000000LL      /* 55 unused */
#define RF3_XXX56               0x0080000000000000LL      /* 56 unused */
#define RF3_XXX57               0x0100000000000000LL      /* 57 unused */
#define RF3_XXX58               0x0200000000000000LL      /* 58 unused */
#define RF3_XXX59               0x0400000000000000LL      /* 59 unused */
#define RF3_XXX60               0x0800000000000000LL      /* 60 unused */
#define RF3_XXX61               0x1000000000000000LL      /* 61 unused */
#define RF3_XXX62               0x2000000100000000LL      /* 62 unused */
#define RF3_XXX63               0x4000000000000000LL      /* 63 unused */
#define RF3_XXX64               0x8000000000000000LL      /* 64 unused */

/*
 * New monster race bit flags
 */
#define RF4_SHRIEK              0x0000000000000001LL      /*  1 Shriek for help */
#define RF4_XXX2                0x0000000000000002LL      /*  2 (?) */
#define RF4_XXX3                0x0000000000000004LL      /*  3 (?) */
#define RF4_ARROW_1             0x0000000000000008LL      /*  4 Fire an arrow (light) */
#define RF4_ARROW_2             0x0000000000000010LL      /*  5 Fire an arrow (average) */
#define RF4_ARROW_3             0x0000000000000020LL      /*  6 Fire missiles (heavy) */
#define RF4_ARROW_4             0x0000000000000040LL      /*  7 Fire missiles (powerful) */
#define RF4_ARROW_5             0x0000000000000080LL      /*  8 Fire missiles (deadly) */
#define RF4_BR_ACID             0x0000000000000100LL      /*  9 Breathe Acid */
#define RF4_BR_ELEC             0x0000000000000200LL      /* 10 Breathe Elec */
#define RF4_BR_FIRE             0x0000000000000400LL      /* 11 Breathe Fire */
#define RF4_BR_COLD             0x0000000000000800LL      /* 12 Breathe Cold */
#define RF4_BR_POIS             0x0000000000001000LL      /* 13 Breathe Poison */
#define RF4_BR_NETH             0x0000000000002000LL      /* 14 Breathe Nether */
#define RF4_BR_LITE             0x0000000000004000LL      /* 15 Breathe Lite */
#define RF4_BR_DARK             0x0000000000008000LL      /* 16 Breathe Dark */
#define RF4_BR_CONF             0x0000000000010000LL      /* 17 Breathe Confusion */
#define RF4_BR_SOUN             0x0000000000020000LL      /* 18 Breathe Sound */
#define RF4_BR_CHAO             0x0000000000040000LL      /* 19 Breathe Chaos */
#define RF4_BR_DISE             0x0000000000080000LL      /* 20 Breathe Disenchant */
#define RF4_BR_NEXU             0x0000000000100000LL      /* 21 Breathe Nexus */
#define RF4_BR_TIME             0x0000000000200000LL      /* 22 Breathe Time */
#define RF4_BR_INER             0x0000000000400000LL      /* 23 Breathe Inertia */
#define RF4_BR_GRAV             0x0000000000800000LL      /* 24 Breathe Gravity */
#define RF4_BR_SHAR             0x0000000001000000LL      /* 25 Breathe Shards */
#define RF4_BR_PLAS             0x0000000002000000LL      /* 26 Breathe Plasma */
#define RF4_BR_WALL             0x0000000004000000LL      /* 27 Breathe Force */
#define RF4_BR_MANA             0x0000000008000000LL      /* 28 Breathe Mana */
#define RF4_BR_PFIRE            0x0000000010000000LL      /* 29 Breathe Powerfull Fire */
#define RF4_BOLT_1              0x0000000020000000LL      /* 30 Fire a bolt (light) */
#define RF4_BOLT_2              0x0000000040000000LL      /* 31 Fire a bolt (average) */
#define RF4_BOLT_3              0x0000000080000000LL      /* 32 Fire a bolt (heavy) */
#define RF4_BOLT_4              0x0000000100000000LL      /* 33 Fire a bolt (powerful) */
#define RF4_BOLT_5              0x0000000200000000LL      /* 34 Fire a bolt (deadly) */
#define RF4_SHOT_1              0x0000000400000000LL      /* 35 Fire a shot (light) */
#define RF4_SHOT_2              0x0000000800000000LL      /* 36 Fire a shot (average) */
#define RF4_SHOT_3              0x0000001000000000LL      /* 37 Fire a shot (heavy) */
#define RF4_SHOT_4              0x0000002000000000LL      /* 38 Fire a shot (powerful) */
#define RF4_SHOT_5              0x0000004000000000LL      /* 39 Fire a shot (deadly) */
#define RF4_XXX40               0x0000008000000000LL      /* 40 unused */
#define RF4_XXX41               0x0000010000000000LL      /* 41 unused */
#define RF4_XXX42               0x0000020000000000LL      /* 42 unused */
#define RF4_XXX43               0x0000040000000000LL      /* 43 unused */
#define RF4_XXX44               0x0000080000000000LL      /* 44 unused */
#define RF4_XXX45               0x0000100000000000LL      /* 45 unused */
#define RF4_XXX46               0x0000200000000000LL      /* 46 unused */
#define RF4_XXX47               0x0000400000000000LL      /* 47 unused */
#define RF4_XXX48               0x0000800000000000LL      /* 48 unused */
#define RF4_XXX49               0x0001000000000000LL      /* 49 unused */
#define RF4_XXX50               0x0002000000000000LL      /* 50 unused */
#define RF4_XXX51               0x0004000000000000LL      /* 51 unused */
#define RF4_XXX52               0x0008000000000000LL      /* 52 unused */
#define RF4_XXX53               0x0010000000000000LL      /* 53 unused */
#define RF4_XXX54               0x0020000000000000LL      /* 54 unused */
#define RF4_XXX55               0x0040000000000000LL      /* 55 unused */
#define RF4_XXX56               0x0080000000000000LL      /* 56 unused */
#define RF4_XXX57               0x0100000000000000LL      /* 57 unused */
#define RF4_XXX58               0x0200000000000000LL      /* 58 unused */
#define RF4_XXX59               0x0400000000000000LL      /* 59 unused */
#define RF4_XXX60               0x0800000000000000LL      /* 60 unused */
#define RF4_XXX61               0x1000000000000000LL      /* 61 unused */
#define RF4_XXX62               0x2000000100000000LL      /* 62 unused */
#define RF4_XXX63               0x4000000000000000LL      /* 63 unused */
#define RF4_XXX64               0x8000000000000000LL      /* 64 unused */

/*
 * New monster race bit flags
 */
#define RF5_BA_ACID             0x0000000000000001LL      /*  1 Acid Ball */
#define RF5_BA_ELEC             0x0000000000000002LL      /*  2 Elec Ball */
#define RF5_BA_FIRE             0x0000000000000004LL      /*  3 Fire Ball */
#define RF5_BA_COLD             0x0000000000000008LL      /*  4 Cold Ball */
#define RF5_BA_POIS             0x0000000000000010LL      /*  5 Poison Ball */
#define RF5_BA_NETH             0x0000000000000020LL      /*  6 Nether Ball */
#define RF5_BA_WATE             0x0000000000000040LL      /*  7 Water Ball */
#define RF5_BA_MANA             0x0000000000000080LL      /*  8 Mana Storm */
#define RF5_BA_DARK             0x0000000000000100LL      /*  9 Darkness Storm */
#define RF5_DRAIN_MANA          0x0000000000000200LL      /* 10 Drain Mana */
#define RF5_MIND_BLAST          0x0000000000000400LL      /* 11 Blast Mind */
#define RF5_BRAIN_SMASH         0x0000000000000800LL      /* 12 Smash Brain */
#define RF5_CAUSE_1             0x0000000000001000LL      /* 13 Cause Light Wound */
#define RF5_CAUSE_2             0x0000000000002000LL      /* 14 Cause Serious Wound */
#define RF5_CAUSE_3             0x0000000000004000LL      /* 15 Cause Critical Wound */
#define RF5_CAUSE_4             0x0000000000008000LL      /* 16 Cause Mortal Wound */
#define RF5_BO_ACID             0x0000000000010000LL      /* 17 Acid Bolt */
#define RF5_BO_ELEC             0x0000000000020000LL      /* 18 Elec Bolt (unused) */
#define RF5_BO_FIRE             0x0000000000040000LL      /* 19 Fire Bolt */
#define RF5_BO_COLD             0x0000000000080000LL      /* 20 Cold Bolt */
#define RF5_BO_POIS             0x0000000000100000LL      /* 21 Poison Bolt (unused) */
#define RF5_BO_NETH             0x0000000000200000LL      /* 22 Nether Bolt */
#define RF5_BO_WATE             0x0000000000400000LL      /* 23 Water Bolt */
#define RF5_BO_MANA             0x0000000000800000LL      /* 24 Mana Bolt */
#define RF5_BO_PLAS             0x0000000001000000LL      /* 25 Plasma Bolt */
#define RF5_BO_ICEE             0x0000000002000000LL      /* 26 Ice Bolt */
#define RF5_MISSILE             0x0000000004000000LL      /* 27 Magic Missile */
#define RF5_SCARE               0x0000000008000000LL      /* 28 Frighten Player */
#define RF5_BLIND               0x0000000010000000LL      /* 29 Blind Player */
#define RF5_CONF                0x0000000020000000LL      /* 30 Confuse Player */
#define RF5_SLOW                0x0000000040000000LL      /* 31 Slow Player */
#define RF5_HOLD                0x0000000080000000LL      /* 32 Paralyze Player */
#define RF5_XXX33               0x0000000100000000LL      /* 33 unused */
#define RF5_XXX34               0x0000000200000000LL      /* 34 unused */
#define RF5_XXX35               0x0000000400000000LL      /* 35 unused */
#define RF5_XXX36               0x0000000800000000LL      /* 36 unused */
#define RF5_XXX37               0x0000001000000000LL      /* 37 unused */
#define RF5_XXX38               0x0000002000000000LL      /* 38 unused */
#define RF5_XXX39               0x0000004000000000LL      /* 39 unused */
#define RF5_XXX40               0x0000008000000000LL      /* 40 unused */
#define RF5_XXX41               0x0000010000000000LL      /* 41 unused */
#define RF5_XXX42               0x0000020000000000LL      /* 42 unused */
#define RF5_XXX43               0x0000040000000000LL      /* 43 unused */
#define RF5_XXX44               0x0000080000000000LL      /* 44 unused */
#define RF5_XXX45               0x0000100000000000LL      /* 45 unused */
#define RF5_XXX46               0x0000200000000000LL      /* 46 unused */
#define RF5_XXX47               0x0000400000000000LL      /* 47 unused */
#define RF5_XXX48               0x0000800000000000LL      /* 48 unused */
#define RF5_XXX49               0x0001000000000000LL      /* 49 unused */
#define RF5_XXX50               0x0002000000000000LL      /* 50 unused */
#define RF5_XXX51               0x0004000000000000LL      /* 51 unused */
#define RF5_XXX52               0x0008000000000000LL      /* 52 unused */
#define RF5_XXX53               0x0010000000000000LL      /* 53 unused */
#define RF5_XXX54               0x0020000000000000LL      /* 54 unused */
#define RF5_XXX55               0x0040000000000000LL      /* 55 unused */
#define RF5_XXX56               0x0080000000000000LL      /* 56 unused */
#define RF5_XXX57               0x0100000000000000LL      /* 57 unused */
#define RF5_XXX58               0x0200000000000000LL      /* 58 unused */
#define RF5_XXX59               0x0400000000000000LL      /* 59 unused */
#define RF5_XXX60               0x0800000000000000LL      /* 60 unused */
#define RF5_XXX61               0x1000000000000000LL      /* 61 unused */
#define RF5_XXX62               0x2000000100000000LL      /* 62 unused */
#define RF5_XXX63               0x4000000000000000LL      /* 63 unused */
#define RF5_XXX64               0x8000000000000000LL      /* 64 unused */

/*
 * New monster race bit flags
 */
#define RF6_HASTE               0x0000000000000001LL      /*  1 Speed self */
#define RF6_HEAL                0x0000000000000002LL      /*  2 Heal self */
#define RF6_BLINK               0x0000000000000004LL      /*  3 Teleport Short */
#define RF6_TPORT               0x0000000000000008LL      /*  4 Teleport Long */
#define RF6_TELE_TO             0x0000000000000010LL      /*  5 Move player to monster */
#define RF6_TELE_AWAY           0x0000000000000020LL      /*  6 Move player far away */
#define RF6_TELE_LEVEL          0x0000000000000040LL      /*  7 Move player vertically */
#define RF6_DARKNESS            0x0000000000000080LL      /*  8 Create Darkness */
#define RF6_TRAPS               0x0000000000000100LL      /*  9 Create Traps */
#define RF6_FORGET              0x0000000000000200LL      /* 10 Cause amnesia */
#define RF6_S_TROLLS            0x0000000000000400LL      /* 11 Summon Trolls */
#define RF6_S_MONSTER           0x0000000000000800LL      /* 12 Summon Monster */
#define RF6_S_MONSTERS          0x0000000000001000LL      /* 13 Summon Monsters */
#define RF6_S_ANT               0x0000000000002000LL      /* 14 Summon Ants */
#define RF6_S_SPIDER            0x0000000000004000LL      /* 15 Summon Spiders */
#define RF6_S_HOUND             0x0000000000008000LL      /* 16 Summon Hounds */
#define RF6_S_HYDRA             0x0000000000010000LL      /* 17 Summon Hydras */
#define RF6_S_ANGEL             0x0000000000020000LL      /* 18 Summon Angel */
#define RF6_S_DEMON             0x0000000000040000LL      /* 19 Summon Demon */
#define RF6_S_UNDEAD            0x0000000000080000LL      /* 20 Summon Undead */
#define RF6_S_DRAGON            0x0000000000100000LL      /* 21 Summon Dragon */
#define RF6_S_HI_UNDEAD         0x0000000000200000LL      /* 22 Summon Greater Undead */
#define RF6_S_HI_DRAGON         0x0000000000400000LL      /* 23 Summon Ancient Dragon */
#define RF6_S_WRAITH            0x0000000000800000LL      /* 24 Summon Unique Wraith */
#define RF6_S_UNIQUE            0x0000000001000000LL      /* 25 Summon Unique Monster */
#define RF6_S_XX1               0x0000000002000000LL      /* 26 (?) */
#define RF6_S_XX2               0x0000000004000000LL      /* 27 (?) */
#define RF6_S_XX3               0x0000000008000000LL      /* 28 (?) */
#define RF6_S_NUMBER2           0x0000000010000000LL      /* 29 Summon 2 monsters */
#define RF6_S_NUMBER4           0x0000000020000000LL      /* 30 Summon 4 monsters */
#define RF6_S_NUMBER8           0x0000000040000000LL      /* 31 Summon 8 monsters */
#define RF6_S_NUMBER16          0x0000000080000000LL      /* 32 Summon 8 monsters */
#define RF6_XXX33               0x0000000100000000LL      /* 33 unused */
#define RF6_XXX34               0x0000000200000000LL      /* 34 unused */
#define RF6_XXX35               0x0000000400000000LL      /* 35 unused */
#define RF6_XXX36               0x0000000800000000LL      /* 36 unused */
#define RF6_XXX37               0x0000001000000000LL      /* 37 unused */
#define RF6_XXX38               0x0000002000000000LL      /* 38 unused */
#define RF6_XXX39               0x0000004000000000LL      /* 39 unused */
#define RF6_XXX40               0x0000008000000000LL      /* 40 unused */
#define RF6_XXX41               0x0000010000000000LL      /* 41 unused */
#define RF6_XXX42               0x0000020000000000LL      /* 42 unused */
#define RF6_XXX43               0x0000040000000000LL      /* 43 unused */
#define RF6_XXX44               0x0000080000000000LL      /* 44 unused */
#define RF6_XXX45               0x0000100000000000LL      /* 45 unused */
#define RF6_XXX46               0x0000200000000000LL      /* 46 unused */
#define RF6_XXX47               0x0000400000000000LL      /* 47 unused */
#define RF6_XXX48               0x0000800000000000LL      /* 48 unused */
#define RF6_XXX49               0x0001000000000000LL      /* 49 unused */
#define RF6_XXX50               0x0002000000000000LL      /* 50 unused */
#define RF6_XXX51               0x0004000000000000LL      /* 51 unused */
#define RF6_XXX52               0x0008000000000000LL      /* 52 unused */
#define RF6_XXX53               0x0010000000000000LL      /* 53 unused */
#define RF6_XXX54               0x0020000000000000LL      /* 54 unused */
#define RF6_XXX55               0x0040000000000000LL      /* 55 unused */
#define RF6_XXX56               0x0080000000000000LL      /* 56 unused */
#define RF6_XXX57               0x0100000000000000LL      /* 57 unused */
#define RF6_XXX58               0x0200000000000000LL      /* 58 unused */
#define RF6_XXX59               0x0400000000000000LL      /* 59 unused */
#define RF6_XXX60               0x0800000000000000LL      /* 60 unused */
#define RF6_XXX61               0x1000000000000000LL      /* 61 unused */
#define RF6_XXX62               0x2000000100000000LL      /* 62 unused */
#define RF6_XXX63               0x4000000000000000LL      /* 63 unused */
#define RF6_XXX64               0x8000000000000000LL      /* 64 unused */

/*
 * Hack -- choose "intelligent" spells when desperate
 */

#define RF4_INT_MASK \
   0L

#define RF5_INT_MASK \
  (RF5_HOLD | RF5_SLOW | RF5_CONF | RF5_BLIND | RF5_SCARE)

#define RF6_INT_MASK \
   (RF6_BLINK |  RF6_TPORT | RF6_TELE_LEVEL | RF6_TELE_AWAY | \
    RF6_HEAL | RF6_HASTE | RF6_TRAPS | \
    RF6_S_MONSTER | RF6_S_MONSTERS | \
    RF6_S_ANT | RF6_S_SPIDER | RF6_S_HOUND | RF6_S_HYDRA | \
    RF6_S_ANGEL | RF6_S_DRAGON | RF6_S_UNDEAD | RF6_S_DEMON | \
    RF6_S_HI_DRAGON | RF6_S_HI_UNDEAD | RF6_S_WRAITH | RF6_S_UNIQUE)

/* jk - to see if a monster can summon others */
#define RF4_SUMMON_MASK 0L
#define RF5_SUMMON_MASK 0L

#define RF6_SUMMON_MASK \
   (RF6_S_MONSTER | RF6_S_MONSTERS | RF6_S_TROLLS | \
    RF6_S_ANT | RF6_S_SPIDER | RF6_S_HOUND | RF6_S_HYDRA | \
    RF6_S_ANGEL | RF6_S_DRAGON | RF6_S_UNDEAD | RF6_S_DEMON | \
    RF6_S_HI_DRAGON | RF6_S_HI_UNDEAD | RF6_S_WRAITH | RF6_S_UNIQUE)

/* these RF_?_ATTACK_SPELL_MASK's are used to see if a monster is better off
 * keeping it's distance
 */
#define RF4_ATTACK_MASK \
   ( RF4_ARROW_1 | RF4_ARROW_2 | RF4_ARROW_3 | RF4_ARROW_4 | RF4_ARROW_5 | \
     RF4_BOLT_1  | RF4_BOLT_2  | RF4_BOLT_3  | RF4_BOLT_4  | RF4_BOLT_5  | \
     RF4_SHOT_1  | RF4_SHOT_2  | RF4_SHOT_3  | RF4_SHOT_4  | RF4_SHOT_5  | \
     RF4_BR_ACID | RF4_BR_ELEC | RF4_BR_FIRE | RF4_BR_COLD | RF4_BR_POIS | \
     RF4_BR_NETH | RF4_BR_LITE | RF4_BR_DARK | RF4_BR_CONF | RF4_BR_SOUN | \
     RF4_BR_CHAO | RF4_BR_DISE | RF4_BR_NEXU | RF4_BR_TIME | RF4_BR_INER | \
     RF4_BR_GRAV | RF4_BR_SHAR | RF4_BR_PLAS | RF4_BR_WALL | RF4_BR_MANA | \
     RF4_BR_PFIRE )

#define RF5_ATTACK_MASK \
   ( RF5_BA_ACID | RF5_BA_ELEC    | RF5_BA_FIRE    | RF5_BA_COLD     | \
     RF5_BA_POIS | RF5_BA_NETH    | RF5_BA_WATE    | RF5_BA_MANA     | \
     RF5_BA_DARK | RF5_DRAIN_MANA | RF5_MIND_BLAST | RF5_BRAIN_SMASH | \
     RF5_CAUSE_1 | RF5_CAUSE_2    | RF5_CAUSE_3    | RF5_CAUSE_4     | \
     RF5_BO_ACID | RF5_BO_ELEC    | RF5_BO_FIRE    | RF5_BO_COLD     | \
     RF5_BO_POIS | RF5_BO_NETH    | RF5_BO_WATE    | RF5_BO_MANA     | \
     RF5_BO_PLAS | RF5_BO_ICEE    | RF5_MISSILE    | RF5_SCARE       | \
     RF5_BLIND   | RF5_CONF       | RF5_SLOW       | RF5_HOLD)

#define RF6_ATTACK_MASK \
   (RF6_TRAPS | RF6_TELE_TO |\
    RF6_S_MONSTER | RF6_S_MONSTERS | RF6_S_TROLLS | \
    RF6_S_ANT | RF6_S_SPIDER | RF6_S_HOUND | RF6_S_HYDRA | \
    RF6_S_ANGEL | RF6_S_DRAGON | RF6_S_UNDEAD | RF6_S_DEMON | \
    RF6_S_HI_DRAGON | RF6_S_HI_UNDEAD | RF6_S_WRAITH | RF6_S_UNIQUE)


/*
 * Hack -- "bolt" spells that may hurt fellow monsters
 */
#define RF4_BOLT_MASK \
  (RF4_ARROW_1 | RF4_ARROW_2 | RF4_ARROW_3 | RF4_ARROW_4 | RF4_ARROW_5 | \
   RF4_BOLT_1  | RF4_BOLT_2  | RF4_BOLT_3  | RF4_BOLT_4  | RF4_BOLT_5  | \
   RF4_SHOT_1  | RF4_SHOT_2  | RF4_SHOT_3  | RF4_SHOT_4  | RF4_SHOT_5)

#define RF5_BOLT_MASK \
   (RF5_BO_ACID | RF5_BO_ELEC | RF5_BO_FIRE | RF5_BO_COLD | \
    RF5_BO_POIS | RF5_BO_NETH | RF5_BO_WATE | RF5_BO_MANA | \
    RF5_BO_PLAS | RF5_BO_ICEE | RF5_MISSILE)

#define RF6_BOLT_MASK \
   0L

#define RF4_BALL_MASK 0L
#define RF5_BALL_MASK \
   (RF5_BA_ACID | RF5_BA_ELEC | RF5_BA_FIRE | RF5_BA_COLD | \
    RF5_BA_POIS | RF5_BA_NETH | RF5_BA_WATE | RF5_BA_MANA | RF5_BA_DARK )
#define RF6_BALL_MASK 0L

#define RF4_ESCAPE_MASK 0L
#define RF5_ESCAPE_MASK 0L
#define RF6_ESCAPE_MASK \
   ( RF6_BLINK | RF6_TPORT | RF6_TELE_AWAY | RF6_TELE_LEVEL )

#define RF4_ANNOY_MASK \
   ( RF4_SHRIEK )
   
#define RF5_ANNOY_MASK \
   ( RF5_CAUSE_1 | RF5_CAUSE_2 | RF5_CAUSE_3 | RF5_CAUSE_4 | \
     RF5_SCARE | RF5_BLIND | RF5_CONF | RF5_SLOW | RF5_HOLD)

#define RF6_ANNOY_MASK \
   ( RF6_TRAPS )

#define RF4_HEAL_MASK 0L
#define RF5_HEAL_MASK 0L
#define RF6_HEAL_MASK \
   ( RF6_HEAL )

#define RF4_SPEED_MASK 0L
#define RF5_SPEED_MASK \
   ( RF5_SLOW )
#define RF6_SPEED_MASK \
   ( RF6_HASTE )

#define RF4_TACTIC_MASK 0L
#define RF5_TACTIC_MASK 0L
#define RF6_TACTIC_MASK \
   ( RF6_BLINK )

/***Macro Definitions ***/

/* jk - and show it on screen if needed - just add logs to log( above */
/* note there is no traling ; */
#define logs(FILE,MESSAGE...) \
      if (term_initialized) \
      { \
         bool save1=inkey_scan; \
         inkey_scan=TRUE; \
         msg_format(## MESSAGE); \
         inkey_scan=save1; \
      }

/*
 * Hack -- The main "screen"
 */
#define term_screen  (angband_term[0])

/*
 * Convert an "attr"/"char" pair into a "pict" (P)
 */
#define PICT(A,C) \
        ((((u16b)(A)) << 8) | ((byte)(C)))

/*
 * Convert a "pict" (P) into an "attr" (A)
 */
#define PICT_A(P) \
        ((byte)((P) >> 8))

/*
 * Convert a "pict" (P) into an "char" (C)
 */
#define PICT_C(P) \
        ((char)((byte)(P)))

/*
 * Convert a "location" (Y,X) into a "grid" (G)
 * changed from 2.8.3 because x can now range from 0 to 330.
 * for safety margins, take 512
 * note that if the answer must fit in a 16-bit variable,
 * we need 1) all 16 bits
 *         2) make sure that Y is never > 128
 *         3) add an extra & 0x7f in GRID_Y to prevent returning y>64 as
 *            negative values
 */
#define GRID(X,Y) \
        (512 * (Y) + (X))

/*
 * Convert a "grid" (G) into a "location" (Y)
 */
#define GRID_Y(G) \
        ( (int) ( ((G) >> 9 ) & 0x7f) )

/*
 * Convert a "grid" (G) into a "location" (X)
 */
#define GRID_X(G) \
        ( (int) ((G) & 0x1ff) )


/*
 * Deterines if a map location is fully inside the outer walls
 */
#define in_bounds(X,Y) \
   (((Y) > 0) && ((X) > 0) && ((Y) < cur_hgt-1) && ((X) < cur_wid-1))

/*
 * Determines if a map location is on or inside the outer walls
 */
#define in_bounds2(X,Y) \
   (((Y) >= 0) && ((X) >= 0) && ((Y) < cur_hgt) && ((X) < cur_wid))

#define is_wall_ptr(C) \
   ( ( ((C)->mtyp==DUNG_WALL) && ((C)->styp!=DUNG_WALL_RUBBLE) ) || \
     ( ((C)->mtyp==DUNG_DOOR) && ((C)->styp==DUNG_DOOR_SECRET)) || \
       ((C)->mtyp==DUNG_PERWALL) )

#define is_wall(X,Y) \
   ( ( (dungeon.level[sublevel][(Y)][(X)].mtyp==DUNG_WALL) && (dungeon.level[sublevel][(Y)][(X)].styp!=DUNG_WALL_RUBBLE)) || \
     ( (dungeon.level[sublevel][(Y)][(X)].mtyp==DUNG_DOOR) && (dungeon.level[sublevel][(Y)][(X)].styp==DUNG_DOOR_SECRET)) || \
       (dungeon.level[sublevel][(Y)][(X)].mtyp==DUNG_PERWALL))

#define really_is_wall(X,Y) \
   ( ( (dungeon.level[sublevel][(Y)][(X)].mtyp==DUNG_WALL) && (dungeon.level[sublevel][(Y)][(X)].styp!=DUNG_WALL_RUBBLE)) || \
       (dungeon.level[sublevel][(Y)][(X)].mtyp==DUNG_PERWALL))

#define in_maze(X,Y) \
   ((dungeon.level[sublevel][(Y)][(X)].fdat & CAVE_MAZE) == CAVE_MAZE)

/*   (((C)->mtyp==DUNG_FLOOR) || ((C)->mtyp==DUNG_WILDN)) */
#define is_floor_ptr(C) \
   (((C)->mtyp==DUNG_FLOOR) && ((C)->styp==DUNG_FLOOR_NORMAL))

#define is_floor(X,Y) \
   ( (dungeon.level[sublevel][(Y)][(X)].mtyp==DUNG_FLOOR) && (dungeon.level[sublevel][(Y)][(X)].styp==DUNG_FLOOR_NORMAL))

#define is_room(X,Y) \
   ( (dungeon.level[sublevel][(Y)][(X)].fdat & CAVE_ROOM) == CAVE_ROOM)

#define test_grid_ptr(C,MTYP,STYP) \
      (((C)->mtyp==MTYP) && ((C)->styp==STYP))

#define test_grid(X,Y,MTYP,STYP) \
      ((dungeon.level[sublevel][(Y)][(X)].mtyp==MTYP) && (dungeon.level[sublevel][(Y)][(X)].styp==STYP))
/*
 * Determine if a "legal" grid is a "walkable" grid
 *
 */
#define floor_grid_bold(X,Y) \
    ((dungeon.level[sublevel][(Y)][(X)].fdat & CAVE_WALK) != 0L )

#define feat_name(X,Y) \
    (f_name + f_info[get_f_idx(dungeon.level[sublevel][(Y)][(X)].mtyp, dungeon.level[sublevel][(Y)][(X)].styp)].name)

/*
 * Determine if a "legal" grid is within "los" of the player
 *
 * Note the use of comparison to zero to force a "boolean" result
 */
#define player_has_los_bold(X,Y) \
    ((dungeon.level[sublevel][(Y)][(X)].fdat & CAVE_VIEW) != 0L)

/*
 * Same as above, but also require that the grid be "legal"
 */
#define valid_grid(X,Y) \
    (in_bounds((X),(Y)) && valid_grid_bold((X),(Y)))

/*
 * Determine if a "legal" grid is an "naked" floor grid
 *
 * Line 1 -- forbid doors, rubble, seams, walls
 * Line 2 -- forbid terrain features
 * Line 3 -- forbid normal objects
 * Line 4 -- forbid normal monsters
 * Line 5 -- forbid the player
 */
#define naked_grid_bold(X,Y) \
    (floor_grid_bold((X),(Y)) && \
     ( (dungeon.level[sublevel][(Y)][(X)].mtyp == DUNG_FLOOR) || \
       (dungeon.level[sublevel][(Y)][(X)].mtyp == DUNG_WILDN) ) && \
     (objects_on_floor((X),(Y))==0) && \
     !(dungeon.level[sublevel][(Y)][(X)].m_idx) && \
     !(((Y) == py) && ((X) == px)))

#define grid_walkable(X,Y) \
     ( (dungeon.level[sublevel][(Y)][(X)].mtyp == DUNG_FLOOR) || \
       (dungeon.level[sublevel][(Y)][(X)].mtyp == DUNG_WILDN) )

/*
 * Determine if a "legal" grid is a "clean" floor grid
 *
 * Line 1 -- forbid doors, rubble, seams, walls
 * Line 2 -- forbid terrain features
 * Line 3 -- forbid normal objects
 */
#define clean_grid_bold(X,Y) \
    (floor_grid_bold((X),(Y)) && \
     ( (dungeon.level[sublevel][(Y)][(X)].mtyp == DUNG_FLOOR) || \
       (dungeon.level[sublevel][(Y)][(X)].mtyp == DUNG_WILDN) ) && \
     (objects_on_floor(X,Y)==0))

/*
 * Determine if a "legal" grid is an "empty" floor grid
 *
 * Line 1 -- forbid doors, rubble, seams, walls
 * Line 2 -- forbid normal monsters
 * Line 3 -- forbid the player
 */
#define empty_grid_bold(X,Y) \
    (floor_grid_bold((X),(Y)) && \
     !(dungeon.level[sublevel][(Y)][(X)].m_idx) && \
     !(((Y) == py) && ((X) == px)))

/*
 * Determines if a map location is currently "on screen" -RAK-
 * Note that "panel_contains(x,y)" always implies "in_bounds2(x,y)".
 */
#define panel_contains(x, y) \
  (((y) >= panel_min_row) && ((y) <= panel_max_row) && \
   ((x) >= panel_min_col) && ((x) <= panel_max_col))

/*
 * Determine if a given inventory item is "aware"
 */
#define object_aware_p(T) \
    (k_info[(T)->k_idx].aware)

/*
 * Determine if a given inventory item is "tried"
 */
#define object_tried_p(T) \
    (k_info[(T)->k_idx].tried)

/*
 * Determine if a given inventory item is "known"
 * Test One -- Check for special "known" tag
 * Test Two -- Check for "Easy Know" + "Aware"
 */
#define object_known_p(T) \
    (((T)->ident & ID_KNOWN) || \
     (k_info[(T)->k_idx].easy_know && k_info[(T)->k_idx].aware))

/*
 * Return the "attr" for a given item.
 * flavored items return the flavor, then if necessary, user defined aware items, then
 * Allow user redefinition of "aware" items.
 * Default to the "base" attr for unaware items
 */
#define object_attr(T) \
    ( (k_info[(T)->k_idx].flavor) ? (misc_to_attr[k_info[(T)->k_idx].flavor]) : \
      ( (k_info[(T)->k_idx].x_attr) ? (k_info[(T)->k_idx].x_attr) : (k_info[(T)->k_idx].d_attr) ) )

/*
 * Return the "char" for a given item.
 * Allow user redefinition of "aware" items.
 * Default to the "base" char for unaware items
 */
#define object_char(T) \
    ( (k_info[(T)->k_idx].flavor) ? (misc_to_char[k_info[(T)->k_idx].flavor]) : \
                                    (k_info[(T)->k_idx].x_char) )

/*
 * Artifacts use the "name1" field
 */
#define artifact_p(T) \
        (((T)->name1!=(byte)0) ? TRUE : FALSE)

/*
 * Ego-Items use the "name2" field
 */
#define ego_item_p(T) \
        (((T)->name2!=(byte)0) ? TRUE : FALSE)

/*
 * Broken items.
 */
#define broken_p(T) \
        ((T)->ident & ID_BROKEN)

/*
 * Cursed items.
 */
#define cursed_p(T) \
        ((T)->ident & ID_CURSED)

/*
 * define a nice routine to use as a 'percentage' chance
 */
#define pchance(X) \
        ( randint(100) <= (X) )

/*
 * Hack -- Prepare to use the "Secure" routines
 */
#if defined(SET_UID) && defined(SECURE)
  extern int PlayerUID;
# define getuid() PlayerUID
# define geteuid() PlayerUID
#endif

/*
 * Pluralizer.  Args(count, singular, plural)
 */
#define plural(c,s,p) \
    (((c) == 1) ? (s) : (p))


/*
 * simple min(X,Y) function
 * that returns Y, unless it's lower than X
 */
#define min(X,Y) (((X) > (Y))? (Y) : (X))
#define max(X,Y) (((X) < (Y))? (Y) : (X))

#define ang_isupper(C) isupper((int)(C))
#define ang_islower(C) islower((int)(C))

/* Color primitives */
#define ang_get_color(r,g,b) ((r) + (g)*5 + (b)*25)
#define get_red(c) ((c) % 5)
#define get_green(c) (((c) / 5) % 5)
#define get_blue(c) ((c) / 25)

/* Several basic colors */
#define ANG_COLOR_BLACK    ang_get_color(0, 0, 0)
#define ANG_COLOR_DK_GREY  ang_get_color(1, 1, 1)
#define ANG_COLOR_GREY     ang_get_color(2, 2, 2)
#define ANG_COLOR_LT_GREY  ang_get_color(3, 3, 3)
#define ANG_COLOR_WHITE    ang_get_color(4, 4, 4)
#define ANG_COLOR_RED      ang_get_color(2, 0, 0)
#define ANG_COLOR_ORANGE   ang_get_color(4, 2, 0)
#define ANG_COLOR_YELLOW   ang_get_color(4, 4, 0)
#define ANG_COLOR_GREEN    ang_get_color(0, 2, 1)
#define ANG_COLOR_BLUE     ang_get_color(0, 0, 4)
#define ANG_COLOR_PURPLE   ang_get_color(2, 0, 2)
#define ANG_COLOR_BROWN    ang_get_color(2, 1, 0)
#define ANG_COLOR_LT_RED   ang_get_color(4, 1, 3)
#define ANG_COLOR_LT_GREEN ang_get_color(0, 4, 0)
#define ANG_COLOR_LT_BLUE  ang_get_color(0, 4, 4)
#define ANG_COLOR_LT_BROWN ang_get_color(3, 2, 1)

/*** Color constants ***/

/*
 * Angband "attributes" (with symbols, and base (R,G,B) codes)
 *
 * The "(R,G,B)" codes are given in "fourths" of the "maximal" value,
 * and should "gamma corrected" on most (non-Macintosh) machines.
 */
#define TERM_DARK       0       /* 'd' */       /* 0,0,0 */
#define TERM_WHITE      (byte_hack)1       /* 'w' */       /* 4,4,4 */
#define TERM_SLATE      2       /* 's' */       /* 2,2,2 */
#define TERM_ORANGE     3       /* 'o' */       /* 4,2,0 */
#define TERM_RED        4       /* 'r' */       /* 3,0,0 */
#define TERM_GREEN      5       /* 'g' */       /* 0,2,1 */
#define TERM_BLUE       6       /* 'b' */       /* 0,0,4 */
#define TERM_BROWN      7       /* 'u' */       /* 2,1,0 */
#define TERM_L_DARK     8       /* 'D' */       /* 1,1,1 */
#define TERM_L_WHITE    9       /* 'W' */       /* 3,3,3 */
#define TERM_VIOLET     10      /* 'v' */       /* 4,0,4 */
#define TERM_YELLOW     11      /* 'y' */       /* 4,4,0 */
#define TERM_L_RED      12      /* 'R' */       /* 4,0,0 */
#define TERM_L_GREEN    13      /* 'G' */       /* 0,4,0 */
#define TERM_L_BLUE     14      /* 'B' */       /* 0,4,4 */
#define TERM_L_BROWN    15      /* 'U' */       /* 3,2,1 */

/*
 * XXX XXX Hack -- note that "TERM_MULTI" is now just "TERM_VIOLET"
 * We will have to find a cleaner method for "MULTI_HUED" later.
 * There were only two multi-hued "flavors" (one potion, one food).
 * Plus five multi-hued "base-objects" (3 dragon scales, one blade
 * of chaos, and one something else).  See the SHIMMER_OBJECTS code
 * in "dungeon.c" and the object color extractor in "cave.c".
 */
#define TERM_MULTI      TERM_VIOLET

/*** Sound constants ***/

/*
 * Mega-Hack -- some primitive sound support (see "main-win.c" and
 *              "main-gcu.c" )
 *
 * Some "sound" constants for "Term_xtra(TERM_XTRA_SOUND, val)"
 */
#define SOUND_HIT       1
#define SOUND_MISS      2
#define SOUND_FLEE      3
#define SOUND_DROP      4
#define SOUND_KILL      5
#define SOUND_LEVEL     6
#define SOUND_DEATH     7

/*
 * Mega-Hack -- maximum known sounds
 */
#define SOUND_MAX       25

/*** Hack ***/

/*
 * Hack -- attempt to reduce various values
 */
#ifdef ANGBAND_LITE
# undef MACRO_MAX
# define MACRO_MAX      128
# undef QUARK_MAX
# define QUARK_MAX      128
# undef MESSAGE_MAX
# define MESSAGE_MAX    128
# undef MESSAGE_BUF
# define MESSAGE_BUF    4096
#endif

/*
 * what tactic can a monster follow
 */
#define TACTIC_ATTACK_MELEE        1
#define TACTIC_ATTACK_MELEE_PACK   2
#define TACTIC_ATTACK_SPELL        3
#define TACTIC_FLEE                4

