# Project: Sil
#
# To use this makefile, the current working directory must be where
# this makefile is (if this makefile is at "raFS::Temp.$.ang.src.makefile",
# the CWD must be "raFS::Temp.$.ang.src").
#
# This makefile is for GNU make, and the GCC compiler, though it should
# be easily modified to work with other compilers.
  
# Defaults
COMPILER = norcroft
default: standard


# The standard object files:
OBJS := \
  z-util.o z-virt.o z-form.o z-rand.o z-term.o \
  variable.o tables.o util.o cave.o \
  object1.o object2.o monster1.o monster2.o \
  xtra1.o xtra2.o spells1.o spells2.o \
  melee1.o melee2.o save.o files.o \
  cmd1.o cmd2.o cmd3.o cmd4.o cmd5.o cmd6.o \
  birth.o load.o \
  wizard1.o wizard2.o obj-info.o \
  generate.o dungeon.o init1.o init2.o randart.o \
  main-ros.o \
  use-obj.o squelch.o

# Borg object files:
BOBJS := borg1.o borg2.o borg3.o borg4.o borg5.o borg6.o borg7.o \
	borg8.o borg9.o


# Defaults for norcy
ifeq (norcroft, $(COMPILER))  
  # Tools:
  CC := cc 
  LD := link
  RM := remove    

  # Libraries:
  LIBS := <CLibs$$Dir>.clib.o.StubsG <DeskLib$$Dir>.o.DeskLib

  CCFLAGS_BASIC := -apcs 3/32/fpe2/swst/fp/nofpr -c -Wan
       

#  # Hack to remove compiler crashes with Acorn C/C++ version 5 and earlier
#  object2.o:
# 	$(CC) -Ospace $(CCFLAGS) -c -o object2.o object2.c
#
#  monster2.o:
# 	$(CC) -Ospace $(CCFLAGS) -c -o monster2.o monster2.c
endif
   
# Defaults for gcc
ifeq (gcc, $(COMPILER))
  WARNINGS := -ansi -Wall -Wno-unused -Wno-long-long -W -Wcast-qual
       
  # Tools:
  CC := gcc -mlibscl -c
  LD := gcc -mlibscl
  RM := remove
 

  # Libraries:
  LIBS := <DeskLib$$Dir>.o.DeskLib

  WARNINGS := -ansi -Wall -Wundef -Wpointer-arith \
            -Wcast-align -Wwrite-strings -Wstrict-prototypes \
            -Wmissing-prototypes -Wmissing-declarations -Wnested-externs \
            -Winline -Wno-unused -Wno-long-long -W -Wcast-qual

  CCFLAGS_BASIC := -O2 $(WARNINGS) -mthrowback -mpoke-function-name
         
endif


#
# Rules to make the various targets
#
ALL_TARGETS := standard fullscreen borg

standard: CCFLAGS := $(CCFLAGS_BASIC)
standard: $(OBJS) $(LIBS)
	$(LD) $(LDFLAGS) -o ^.!RunImage $(OBJS) $(LIBS)

fullscreen: CCFLAGS := -DFULLSCREEN_ONLY $(CCFLAGS_BASIC)  
fullscreen: $(OBJS) $(LIBS)
	$(LD) $(LDFLAGS) -o ^.!RunImageF $(OBJS)  $(LIBS)

borg: CCFLAGS := $(CCFLAGS_BASIC)
borg: $(OBJS) $(BOBJS) $(LIBS)
	$(LD) $(LDFLAGS) -o ^.!RunImageB $(BOBJS) $(LIBS)



# Suffix rules
.SUFFIXES: .o .c

# A basic rule
.c.o:;	$(CC) $(CCFLAGS) -o $@ $<

# Dynamic dependencies:


