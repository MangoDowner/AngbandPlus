/* File: spells.pkg */

/*
 * Purpose: Lua interface defitions for spells.
 * To be processed by tolua to generate C source code.
 */

$#include "angband.h"
$#include "lua.h"

typedef char *mcptr;
typedef const char* cptr;
typedef int errr;
typedef unsigned char bool;
typedef unsigned char byte;
typedef signed short s16b;
typedef unsigned short u16b;
typedef signed int s32b;
typedef unsigned int u32b;

#define DEFAULT_RADIUS	25

#define GF_ELEC         1
#define GF_POIS         2
#define GF_ACID         3
#define GF_COLD         4
#define GF_FIRE         5
#define GF_UNBREATH     6
#define GF_CORPSE_EXPL  7
#define GF_MISSILE      10
#define GF_ARROW        11
#define GF_PLASMA       12
#define GF_WAVE         13
#define GF_WATER        14
#define GF_LITE         15
#define GF_DARK         16
#define GF_LITE_WEAK    17
#define GF_DARK_WEAK    18
#define GF_SHARDS       20
#define GF_SOUND        21
#define GF_CONFUSION    22
#define GF_FORCE        23
#define GF_INERTIA      24
#define GF_MANA         26
#define GF_METEOR       27
#define GF_ICE          28
#define GF_CHAOS        30
#define GF_NETHER       31
#define GF_DISENCHANT   32
#define GF_NEXUS        33
#define GF_TIME         34
#define GF_GRAVITY      35
#define GF_KILL_WALL    40
#define GF_KILL_DOOR    41
#define GF_KILL_TRAP    42
#define GF_MAKE_WALL    45
#define GF_MAKE_DOOR    46
#define GF_MAKE_TRAP    47
#define GF_OLD_CLONE    51
#define GF_OLD_POLY             52
#define GF_OLD_HEAL             53
#define GF_OLD_SPEED    54
#define GF_OLD_SLOW             55
#define GF_OLD_CONF             56
#define GF_OLD_SLEEP    57
#define GF_OLD_DRAIN    58
#define GF_AWAY_UNDEAD  61
#define GF_AWAY_EVIL    62
#define GF_AWAY_ALL     63
#define GF_TURN_UNDEAD  64
#define GF_TURN_EVIL    65
#define GF_TURN_ALL     66
#define GF_DISP_UNDEAD  67
#define GF_DISP_EVIL    68
#define GF_DISP_ALL 69    
#define GF_DISP_DEMON   70      /* New types for Zangband begin here... */
#define GF_DISP_LIVING  71
#define GF_ROCKET       72
#define GF_NUKE         73
#define GF_MAKE_GLYPH   74
#define GF_STASIS       75
#define GF_STONE_WALL   76
#define GF_DEATH_RAY    77
#define GF_STUN         78
#define GF_HOLY_FIRE    79
#define GF_HELL_FIRE    80
#define GF_DISINTEGRATE 81
#define GF_CHARM        82
#define GF_CONTROL_UNDEAD   83
#define GF_CONTROL_ANIMAL   84
#define GF_PSI         85
#define GF_PSI_DRAIN   86
#define GF_TELEKINESIS  87
#define GF_JAM_DOOR     88
#define GF_DOMINATION   89
#define GF_DISP_GOOD    90
#define GF_IDENTIFY     91
#define GF_RAISE        92
#define GF_STAR_IDENTIFY 93
#define GF_DESTRUCTION  94
#define GF_STUN_CONF    95
#define GF_STUN_DAM     96
#define GF_CONF_DAM     98
#define GF_STAR_CHARM   99
#define GF_IMPLOSION    100
#define GF_LAVA_FLOW    101
#define GF_FEAR         102
#define GF_BETWEEN_GATE 103
#define GF_WINDS_MANA   104
#define GF_DEATH        105
#define GF_CONTROL_DEMON 106
#define GF_RAISE_DEMON 107
#define GF_TRAP_DEMONSOUL 108
#define GF_ATTACK       109

#define PROJECT_JUMP       0x00000001
#define PROJECT_BEAM       0x00000002
#define PROJECT_THRU       0x00000004
#define PROJECT_STOP       0x00000008
#define PROJECT_GRID       0x00000010
#define PROJECT_ITEM       0x00000020
#define PROJECT_KILL       0x00000040
#define PROJECT_HIDE       0x00000080
#define PROJECT_VIEWABLE   0x00000100   /* Affect monsters in LOS */
#define PROJECT_METEOR_SHOWER 0x00000200        /* Affect random grids */
#define PROJECT_BLAST      0x00000400   /* Like Mega_blast, but will only affect viewable grids */
#define PROJECT_PANEL      0x00000800   /* Affect everything in the panel. */
#define PROJECT_ALL        0x00001000   /* Affect every single grid. */
#define PROJECT_WALL       0x00002000
#define PROJECT_MANA_PATH  0x00004000   /* Follow a mana path. */
#define PROJECT_ABSORB_MANA 0x00008000   /* The spell increase in power as it absord grid's mana. */
#define PROJECT_STAY       0x00010000

extern int project_time;
extern void teleport_player_directed(int rad, int dir);
extern void teleport_away(int m_idx, int dis);
extern void teleport_player(int dis);
extern void teleport_player_to(int ny, int nx);
extern void teleport_monster_to(int m_idx, int ny, int nx);
extern bool teleport_monster(int dir);
extern void teleport_player_level(void);
extern void fetch(int dir, int wgt, bool require_los);
extern void recall_player(int d, int f);
extern void take_hit(int damage, cptr kb_str);
extern void take_sanity_hit(int damage, cptr hit_from);
extern bool project(int who, int rad, int y, int x, int dam, int typ, int flg);
extern void corrupt_player(void);
extern void grow_grass(int rad);
extern void grow_trees(int rad);
extern bool hp_player(int num);
extern bool heal_insanity(int val);
extern void warding_glyph(void);
extern void explosive_rune(void);
extern bool do_dec_stat(int stat, int mode);
extern bool do_res_stat(int stat, bool full);
extern bool do_inc_stat(int stat);
extern void identify_pack(void);
extern bool remove_curse(void);
extern bool remove_all_curse(void);
extern bool restore_level(void);
extern void self_knowledge(FILE *fff = NULL);
extern bool lose_all_info(void);
extern bool detect_traps(int rad);
extern bool detect_doors(int rad);
extern bool detect_stairs(int rad);
extern bool detect_treasure(int rad);
extern bool hack_no_detect_message;
extern bool detect_objects_gold(int rad);
extern bool detect_objects_normal(int rad);
extern bool detect_objects_magic(int rad);
extern bool detect_monsters_normal(int rad);
extern bool detect_monsters_invis(int rad);
extern bool detect_monsters_evil(int rad);
extern bool detect_monsters_good(int rad);
extern bool detect_monsters_xxx(u32b match_flag, int rad);
extern bool detect_monsters_string(cptr chars, int rad);
extern bool detect_monsters_nonliving(int rad);
extern bool detect_all(int rad);
extern void stair_creation(void);
extern bool tgt_pt (int *x = 0, int *y = 0);
extern bool wall_stone(int y, int x);
extern bool create_artifact(object_type *o_ptr, bool a_scroll, bool get_name);
extern bool wall_to_mud(int dir);
extern bool ident_spell(void);
extern bool identify_fully(void);
extern bool recharge(int num);
extern void aggravate_monsters(int who);
extern bool genocide(bool player_cast);
extern bool mass_genocide(bool player_cast);
extern bool probing(void);
extern bool banish_evil(int dist);
extern bool dispel_evil(int dam);
extern bool dispel_good(int dam);
extern bool dispel_undead(int dam);
extern bool dispel_monsters(int dam);
extern bool dispel_living(int dam);
extern bool dispel_demons(int dam);
extern bool turn_undead(void);
extern bool door_creation(void);
extern bool trap_creation(void);
extern bool glyph_creation(void);
extern void wipe(int y1, int x1, int r);
extern void destroy_area(int y1, int x1, int r, bool full, bool bypass);
extern void earthquake(int cy, int cx, int r);
extern void lite_room(int y1, int x1);
extern void unlite_room(int y1, int x1);
extern bool lite_area(int dam, int rad);
extern bool unlite_area(int dam, int rad);
extern bool fire_ball_beam(int typ, int dir, int dam, int rad);
extern void make_wish(void);

extern bool fire_wave(int typ, int dir, int dam, int rad, int time, s32b eff);
#define EFF_WAVE                0x00000001      /* A circle whose radius increase */
#define EFF_LAST                0x00000002      /* The wave lasts */
#define EFF_STORM               0x00000004      /* the effect follwos the player */

extern bool fire_cloud(int typ, int dir, int dam, int rad, int time);
extern bool fire_wall(int typ, int dir, int dam, int time);
extern bool fire_ball(int typ, int dir, int dam, int rad);
extern bool fire_bolt(int typ, int dir, int dam);
extern bool fire_beam(int typ, int dir, int dam);
extern bool fire_druid_ball(int typ, int dir, int dam, int rad);
extern bool fire_druid_bolt(int typ, int dir, int dam);
extern bool fire_druid_beam(int typ, int dir, int dam);
extern bool fire_bolt_or_beam(int prob, int typ, int dir, int dam);
extern bool alchemy(void);
extern void alter_reality(void);
extern void swap_position(int lty, int ltx);
extern void teleport_swap(int dir);
extern void project_meteor(int radius, int typ, int dam, u32b flg);
extern bool passwall(int dir, bool safe);
extern bool project_hook(int typ, int dir, int dam, int flg);
extern bool wizard_lock(int dir);
extern bool project(int who, int rad, int y, int x, int dam, int typ, int flg);
extern bool reset_recall(bool no_trepas_max_depth);
extern bool get_aim_dir(int *dp = 0);
extern bool get_rep_dir(int *dp = 0);
extern bool project_hack @ project_los(int typ, int dam);
extern void map_area(void);
extern void wiz_lite(void);
extern void wiz_lite_extra(void);
extern void wiz_dark(void);
extern void create_between_gate(int dist, int y, int x);
extern bool destroy_doors_touch(void);
extern bool destroy_traps_touch(void);

/* "Innate" powers */
struct magic_power
{
	int     min_lev;
	int     mana_cost;
	int     fail;
	cptr    name;
	cptr    desc;
};

extern magic_power *new_magic_power(int num);
extern magic_power *grab_magic_power @ get_magic_power(magic_power *m_ptr, int num);
extern int get_magic_power_lua @ select_magic_power(int *sn, magic_power *powers, int max_powers, char *info_fct, int plev, int cast_stat);
extern bool lua_spell_success @ magic_power_sucess(magic_power *spell, int stat, char *oups_fct = NULL);

s16b    add_new_power(cptr name, cptr desc, cptr gain, cptr lose, byte level, byte cost, byte stat, byte diff);
extern s16b power_max;






/* Schools  */
/*
 * The spell function must provide the desc
 */
struct spell_type@school_spell_type
{
	cptr name;
	byte skill_level;      	        /* Required level (to learn) */
	byte mana;			/* Required mana at lvl 1 */
	byte mana_max;			/* Required mana at max lvl */
	byte fail;			/* Minimum chance of failure */
        s16b level;                     /* Spell level(0 = not learnt) */
};
struct school_type
{
        cptr name;                      /* Name */
        s16b skill;                     /* Skil used for that school */
};

extern s16b new_school(int i, cptr name, s16b skill);
extern s16b new_spell(int i, cptr name);
extern spell_type *grab_spell_type @ spell(s16b num);
extern school_type *grab_school_type @ school(s16b num);
extern s32b lua_get_level(s32b s, s32b lvl, s32b max, s32b min, s32b bonus);
extern s32b lua_spell_chance(s32b chance, int level, int skill_level, int mana, int cur_mana, int stat);
extern s32b lua_spell_device_chance(s32b chance, int level, int base_level);
extern u32b get_school_spell(cptr do_what);

extern s16b last_teleportation_y;
extern s16b last_teleportation_x;

extern void get_pos_player(int dis, int *ny, int *nx);
extern void teleport_player_to(int ny, int nx);
