# File: Makefile

# This is not a very "nice" Makefile, but it usually works.

#
# Note that you may have to make modifications below according
# to your machine, available libraries, compilation options,
# and your "visual module" of choice.  This Makefile is intended
# for use with Unix machines running X11, Curses, Ncurses, or Vt100,
# or possibly for "Atari" or "Amiga" computers with "Curses" ports,
# see below for more information.
#
# Note that various systems (including most non-UNIX ones) have separate
# makefiles which will compile appropriate visual modules.
#
# If you are able to construct "main-xxx.c" and/or "Makefile.xxx"
# file for a currently unsupported system, please send them to me
# (kieron@dimetrodon.demon.co.uk) for inclusion in future versions.
#
# This Makefile comes with "default" dependancies that may be obsolete.
#


#
# The "source" and "object" files.
#

SRCS = \
  birth.c cave.c cmd1.c cmd2.c cmd3.c cmd4.c cmd5.c cmd6.c dungeon.c files.c \
  generate.c init1.c init2.c load.c loadsave.c maid-x11.c main-ami.c main-cap.c \
  main-dos.c main-emx.c main-gcu.c main-gtk.c main-ibm.c main-lsl.c main-mac.c \
  main-ros.c main-sla.c main-vcs.c main-vme.c main-win.c main-x11.c main-xaw.c \
  main-xpj.c main-xxx.c main.c melee1.c melee2.c monster1.c monster2.c \
  object1.c object2.c quest.c powers.c readdib.c save.c spells1.c spells2.c \
  squelch.c store.c tables.c util.c variable.c wizard1.c wizard2.c xtra1.c \
  xtra2.c z-form.c z-rand.c z-term.c z-util.c z-virt.c main-crb.c

OBJS = \
  birth.o cave.o cmd1.o cmd2.o cmd3.o cmd4.o cmd5.o cmd6.o dungeon.o files.o \
  generate.o init1.o init2.o load.o loadsave.o maid-x11.o main-ami.o main-cap.o \
  main-dos.o main-emx.o main-gcu.o main-gtk.o main-ibm.o main-lsl.o main-mac.o \
  main-ros.o main-sla.o main-vcs.o main-vme.o main-win.o main-x11.o main-xaw.o \
  main-xpj.o main-xxx.o main.o melee1.o melee2.o monster1.o monster2.o \
  object1.o object2.o quest.o powers.o readdib.o save.o spells1.o spells2.o \
  squelch.o store.o tables.o util.o variable.o wizard1.o wizard2.o xtra1.o \
  xtra2.o z-form.o z-rand.o z-term.o z-util.o z-virt.o main-crb.o



##
## Following are some "system" definitions
##
## No changes are needed to compile a version that will run on both
## X11 and Curses, in debugging mode, with maximal warnings, on many
## normal Unix machines of the Sun OS variety (non-solaris).
##
## To use an "alternative" definition, simply "modify" (or "replace")
## the definition below with one that you like.  For example, you can
## change the compiler to "cc", or remove the "debugging" options, or
## remove the X11 or Curses support, etc, as desired.
##
## See also "config.h" and "h-config.h" for important information.
##
## Some "examples" are given below, they can be used by simply
## removing the FIRST column of "#" signs from the "block" of lines
## you wish to use, and commenting out "standard" block below.
##
## This is not intended to be a "good" Makefile, just a "simple" one.
##


#
# This is my compiler of choice, it seems to work most everywhere
#
CC = gcc
STD_CFLAGS = $(GCC_CFLAGS)

#
# Standard version (see main-x11.c, main-gtk.c and main-gcu.c)
#
# This version supports "gtk", "X11" and "curses" in a single executable.
#
# You may have to add various X11 include/library directories to the
# "CFLAGS", if your machine places files in a weird location.
#
# You may be able to remove "-ltermcap" on some machines (ex: Solaris).
#
# You may have to replace "-lcurses" with "-lncurses" to use the
# "new curses" library instead of the "old curses" library, and
# you may have to add "-I/usr/include/ncurses" to the "CFLAGS".
#
# See "main-gcu.c" and "config.h" for some optional "curses" defines,
# including "USE_GETCH" and "USE_CURS_SET".  Note that "config.h" will
# attempt to "guess" at many of these flags based on your system.
#
# Specifying -ansi -pedantic generates a number of irrelevant warnings, but
# it doesn't prevent compiling and generates some important warnings.

GCC_CFLAGS = -O3 -fno-strength-reduce -pipe -g  \
	-W -Wall -Wmissing-prototypes -Wmissing-declarations \
	-Wno-long-long -Wwrite-strings -Wpointer-arith -Wredundant-decls \
	-Wbad-function-cast -Wsign-compare -DHAVE_MKSTEMP \
	-Waggregate-return -Wno-format-y2k -Wstrict-prototypes

# An alternative set of compiler flags for a different compiler.
TCC_CFLAGS = -D"HAVE_MKSTEMP" -g

# Test that Cthangband does not require obviously non-c89 things.
ANSI_CFLAGS = -std=c89 -pedantic -D"NO_VARIABLE_ARRAYS"

# X11-based display with multiple windows.
X11_CFLAGS = -D"USE_X11"
X11_LIBS = -L/usr/X11R6/lib -lX11 

# X11 Athena Widget display.
XAW_CFLAGS = -D"USE_XAW"
XAW_LIBS = -L/usr/X11R6/lib -lXaw -lXmu -lXt -lX11

# Curses display for a console.
GCU_CFLAGS = -D"USE_GCU"
GCU_LIBS = -lcurses -ltermcap

# X11 GTK display with menus.
GTK_CFLAGS = -D"USE_GTK" `gtk-config --cflags`
GTK_LIBS = `gtk-config --libs` 

# X11 display with slanted windows.
XPJ_CFLAGS = -D"USE_XPJ"
XPJ_LIBS = $(X11_LIBS)

# S-Lang display for terminal console
SLA_CFLAGS = -Wall -O2 -fno-strength-reduce -D"USE_SLA" -I/usr/include/slang
SLA_LIBS = -lslang

# SVGALib display for a console. May need the fontfile to be changed to work.
LSL_CFLAGS = -D"USE_LSL"
LSL_LIBS = -lz -lvgagl -lvga

# Virtual console display. May also need source modification.
VCS_CFLAGS = -D"USE_VCS"

# Termcap/vt100-based display for a console.
CAP_CFLAGS = -D"USE_CAP"
CAP_LIBS = -ltermcap

# (Untested) OSX/gcc port.
OSX_CFLAGS = -D"MACH_O_CARBON"
OSX_LIBS = -framework CoreFoundation -framework QuickTime -framework Carbon

# One possible set of CFLAGS/LIBS. Add/remove matching pairs as desired.
CFLAGS = $(STD_CFLAGS) $(X11_CFLAGS) $(GCU_CFLAGS) $(GTK_CFLAGS)
LIBS =                 $(X11_LIBS)   $(GCU_LIBS)   $(GTK_LIBS)




##
## Variation -- compile for Linux
##
## Allows the use of Angband in X11 using the Athena Widget set.
## Does it ever need -lXext, -lSM or -lICE?
#
#CFLAGS = -Wall -O2 -fno-strength-reduce -pipe -g -D"USE_XAW"
#LIBS = -L/usr/X11R6/lib -lXaw -lXext -lSM -lICE -lXmu -lXt -lX11


##
## Variation -- this might work better than the suggestion above
##
#CFLAGS = -I/usr/include/ncurses \
#         -Wall -O2 -fno-strength-reduce -fomit-frame-pointer \
#         -D"USE_X11" -D"USE_GCU" \
#         -D"USE_TPOSIX" -D"USE_CURS_SET"
#LIBS = -lX11 -lncurses
#LDFLAGS = -s


##
## Variation -- Only work on simple vt100 terminals
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_CAP" -D"USE_HARDCODE"


##
## Variation -- compile for Solaris
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_GCU" -D"SOLARIS"
#LIBS = -lX11 -lsocket -lcurses


##
## Variation -- compile for SGI Indigo runnig Irix
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_GCU" -D"SGI"
#LIBS = -lX11 -lcurses -ltermcap -lsun


##
## Variation -- compile for Dec ALPHA OSF/1 v2.0
##
#CC     = cc
##CFLAGS = -std -O -g3 -Olimit 4000 -D"USE_X11" -D"USE_GCU"
#CFLAGS = -std -g -D"USE_X11" -D"USE_GCU"
#LIBS   = -lX11 -lcurses -ltermcap -lrpcsvc


##
## Variation -- compile for Interactive Unix (ISC) systems
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_X11" -D"USE_GCU" -D"ISC"
#LIBS = -lX11 -lcurses -lnsl_s -linet -lcposix


##
## Variation -- Support fat binaries under NEXTSTEP
##
#CFLAGS = -Wall -O1 -pipe -g -D"USE_GCU" -arch m68k -arch i386
#LIBS = -lcurses -ltermcap



##
## Variation -- compile for OSX with gcc.
##
#CFLAGS = $(STD_CFLAGS) $(OSX_CFLAGS)
#LIBS   =               $(OSX_LIBS)

GAME = Cthangband

#
# Base target.
#
default: sCthangband

#
# Install the game.
#
install: default
	mv $(GAME) ..


#
# Hack - build without optimisation for debugging.
#

debug: CFLAGS := $(CFLAGS) -O0
debug: default

#
# Build the "Angband" program
#

sCthangband: $(OBJS)
	$(CC) $(CFLAGS) -o $(GAME) $(OBJS) $(LDFLAGS) $(LIBS)


#
# Clean up old junk
#

clean:
	\rm -f *.bak *.o $(GAME)


#
# Generate dependancies automatically
#

depend:
	makedepend -D__MAKEDEPEND__ $(SRCS)


#
# Hack -- some file dependencies
#

HDRS = \
  h-basic.h \
  h-define.h h-type.h h-system.h h-config.h

INCS = \
  angband.h \
  config.h defines.h types.h externs.h \
  z-term.h z-rand.h z-virt.h $(HDRS)


birth.o: birth.c $(INCS)
cave.o: cave.c $(INCS)
cmd1.o: cmd1.c $(INCS)
cmd2.o: cmd2.c $(INCS)
cmd3.o: cmd3.c $(INCS)
cmd4.o: cmd4.c $(INCS)
cmd5.o: cmd5.c $(INCS)
cmd6.o: cmd6.c $(INCS)
dungeon.o: dungeon.c $(INCS)
files.o: files.c $(INCS)
generate.o: generate.c $(INCS)
init1.o: init1.c $(INCS)
init2.o: init2.c $(INCS)
load.o: load.c $(INCS) loadsave.h
loadsave.o: loadsave.c $(INCS) loadsave.h
main-gcu.o: main-gcu.c $(INCS)
main-x11.o: main-x11.c $(INCS) maid-x11.h
maid-x11.o: maid-x11.c $(INCS) maid-x11.h
main.o: main.c $(INCS)
melee1.o: melee1.c $(INCS)
melee2.o: melee2.c $(INCS)
monster1.o: monster1.c $(INCS)
monster2.o: monster2.c $(INCS)
object1.o: object1.c $(INCS)
object2.o: object2.c $(INCS)
powers.o: powers.c $(INCS)
quest.o: quest.c $(INCS)
save.o: save.c $(INCS) loadsave.h
spells1.o: spells1.c $(INCS)
spells2.o: spells2.c $(INCS)
squelch.o: squelch.c $(INCS)
store.o: store.c $(INCS)
tables.o: tables.c $(INCS)
util.o: util.c $(INCS)
variable.o: variable.c $(INCS)
wizard1.o: wizard1.c $(INCS)
wizard2.o: wizard2.c $(INCS)
xtra1.o: xtra1.c $(INCS)
xtra2.o: xtra2.c $(INCS)
z-form.o: z-form.c $(HDRS) z-virt.h
z-rand.o: z-rand.c $(HDRS) z-rand.h
z-term.o: z-term.c $(HDRS) z-term.h z-virt.h
z-util.o: z-util.c $(HDRS) 
z-virt.o: z-virt.c $(HDRS) z-virt.h

