/* File: generate.h *//* Purpose: Header file for dungeon generation routines *//* * Copyright (c) 1989 James E. Wilson, Robert A. Koeneke * * This software may be copied and distributed for educational, research, and * not for profit purposes provided that this copyright and statement are * included in all such copies. *//* Prfnoff -- reorganized generate.c into generate.h, generate.c, genroom.c */#ifndef INCLUDED_GENERATE_H#define INCLUDED_GENERATE_H#define SAFE_MAX_ATTEMPTS 5000/* * The "size" of a "generation block" in grids */#define BLOCK_HGT	11#define BLOCK_WID	11/* * Maximum numbers of rooms along each axis (currently 6x6) */#define MAX_ROOMS_ROW	(MAX_HGT / BLOCK_HGT)#define MAX_ROOMS_COL	(MAX_WID / BLOCK_WID)/* * Bounds on some arrays used in the "dun_data" structure. * These bounds are checked, though usually this is a formality. */#define CENT_MAX	100#define DOOR_MAX	200#define WALL_MAX	500#define TUNN_MAX	900/* * Simple structure to hold a map location */typedef struct coord coord;struct coord{	byte y;	byte x;};/* * Structure to hold all "dungeon generation" data */typedef struct dun_data dun_data;struct dun_data{	/* Array of centers of rooms */	int cent_n;	coord cent[CENT_MAX];	/* Array of possible door locations */	int door_n;	coord door[DOOR_MAX];	/* Array of wall piercing locations */	int wall_n;	coord wall[WALL_MAX];	/* Array of tunnel grids */	int tunn_n;	coord tunn[TUNN_MAX];	/* Number of blocks along each axis */	int row_rooms;	int col_rooms;	/* Array of which blocks are used */	bool room_map[MAX_ROOMS_ROW][MAX_ROOMS_COL];	/* Hack -- there is a pit/nest on this level */	bool crowded;};/* generate.c */extern void place_random_stairs(int y, int x);extern void place_locked_door(int y, int x);extern void place_secret_door(int y, int x);extern dun_data *dun;/* genroom.c */extern bool room_build(int y0, int x0, int typ);#endif /* INCLUDED_GENERATE_H */