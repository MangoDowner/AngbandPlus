/*
 * Internal probability routine
 */
static bool int_outof(monster_race *r_ptr, int prob)
{
	/* Non-Smart monsters are half as "smart" */
	if (!(r_ptr->flags2 & (RF2_SMART))) prob = prob / 2;

	/* Roll the dice */
	return (rand_int(100) < prob);
}


/*
 * Large static array to support pick spell list.
 *
 * Rewrite of the code by ARD andrewdoull@hotmail.com.
 * Should include the original credits but I was in a hurry. :-)
 *
 * Unlike remove_bad_spells, we try to pick the highest damage spell, and use
 * that. We use a percentage of player hit points to determine the effectiveness
 * of paralysis, blind, slow and other annoying spells. This means a monster
 * will try and disable a player first, if at full health, then use attack magic
 * to deliver the coup-de-gras.
 */

s16b max_attack_dam [] =
{
0       /* RF4_SHRIEK */,
10      /* RF4_SPORE */,
10       /* RF4_GAZE */,
10       /* RF4_WAIL */,
10       /* RF4_SPIT */,
10      /* RF4_SHOOT */,
0      /* RF4_XXX3 */,
0      /* RF4_XXX4 */,
1600    /* RF4_BR_ACID */,
1600    /* RF4_BR_ELEC */,
1600    /* RF4_BR_FIRE */, 
1600    /* RF4_BR_COLD */,
800     /* RF4_BR_POIS */,
550     /* RF4_BR_NETH */,
400     /* RF4_BR_LITE */,
400     /* RF4_BR_DARK */,
400     /* RF4_BR_CONF */,
400     /* RF4_BR_SOUN */,
600     /* RF4_BR_CHAO */,
500     /* RF4_BR_DISE */,
250     /* RF4_BR_NEXU */,
150     /* RF4_BR_TIME */,
200     /* RF4_BR_GRAV */,
400     /* RF4_BR_SHAR */,
150     /* RF4_BR_PLAS */,
200     /* RF4_BR_WALL */,
0       /* RF4_BR_MANA */,
0       /* RF4_XXX5X4 */,
0       /* RF4_XXX6X4 */,
0       /* RF4_XXX7X4 */,
0       /* RF4_XXX8X4 */,
15      /* RF5_BA_ACID */, 
8       /* RF5_BA_ELEC */,
10      /* RF5_BA_FIRE */,
10      /* RF5_BA_COLD */,
24      /* RF5_BA_POIS */,
150     /* RF5_BA_NETH */,
50      /* RF5_BA_WATE */,
100     /* RF5_BA_MANA */,
100     /* RF5_BA_DARK */,
0       /* RF5_DRAIN_MANA */,
64      /* RF5_MIND_BLAST */, 
180     /* RF5_BRAIN_SMASH */,
24      /* RF5_CAUSE_1 */, 
64      /* RF5_CAUSE_2 */,
150     /* RF5_CAUSE_3 */,
225     /* RF5_CAUSE_4 */,
56      /* RF5_BO_ACID */,
32      /* RF5_BO_ELEC */,
72      /* RF5_BO_FIRE */,
48      /* RF5_BO_COLD */,
0       /* RF5_BO_POIS */,
55      /* RF5_BO_NETH */,
100     /* RF5_BO_WATE */,
50      /* RF5_BO_MANA */,
66      /* RF5_BO_PLAS */,
36      /* RF5_BO_ICEE */,
12      /* RF5_MISSILE */,
0       /* RF5_SCARE */,
0       /* RF5_BLIND */,
0       /* RF5_CONF */,
0       /* RF5_SLOW */,
0       /* RF5_HOLD */,
0       /* RF6_HASTE */,
0       /* RF6_XXX1X6 */,
0       /* RF6_HEAL */,
0       /* RF6_XXX2X6 */,
0       /* RF6_BLINK */,
0       /* RF6_TPORT */,
0       /* RF6_XXX3X6 */,
0       /* RF6_XXX4X6 */,
0       /* RF6_TELE_TO */,
0       /* RF6_TELE_AWAY */,
0       /* RF6_TELE_LEVEL */,
0       /* RF6_XXX5 */,
0       /* RF6_DARKNESS */,
0       /* RF6_TRAPS */,
0       /* RF6_FORGET */,
0       /* RF6_XXX6X6 */,
0       /* RF6_S_KIN */,
0       /* RF6_HI_DEMON */,
0       /* RF6_S_MONSTER */,
0       /* RF6_S_MONSTERS */,
0       /* RF6_S_ANT */,
0       /* RF6_S_SPIDER */,
0       /* RF6_S_HOUND */,
0       /* RF6_S_HYDRA */,
0       /* RF6_S_ANGEL */,
0       /* RF6_S_DEMON */,
0       /* RF6_S_UNDEAD */,
0       /* RF6_S_DRAGON */,
0       /* RF6_S_HI_UNDEAD */,
0       /* RF6_S_HI_DRAGON */,
0       /* RF6_S_WRAITH */,
0       /* RF6_S_UNIQUE */
};

s16b max_attack_level [] =
{
0       /* RF4_SHRIEK */,
0      /* RF4_SPORE */,
0       /* RF4_GAZE */,
0       /* RF4_WAIL */,
0       /* RF4_SPIT */,
0      /* RF4_SHOOT */,
0      /* RF4_XXX3 */,
0      /* RF4_XXX4 */,
2       /* RF4_BR_ACID */,
2       /* RF4_BR_ELEC */,
2       /* RF4_BR_FIRE */,
2       /* RF4_BR_COLD */, 
2       /* RF4_BR_POIS */,
1       /* RF4_BR_NETH */,
1       /* RF4_BR_LITE */,
1       /* RF4_BR_DARK */,
1       /* RF4_BR_CONF */,
1       /* RF4_BR_SOUN */,
1       /* RF4_BR_CHAO */,
1       /* RF4_BR_DISE */,
2       /* RF4_BR_NEXU */,
2       /* RF4_BR_TIME */, 
2       /* RF4_BR_GRAV */, 
1       /* RF4_BR_SHAR */, 
1       /* RF4_BR_PLAS */, 
1       /* RF4_BR_WALL */,
0       /* RF4_BR_MANA */,
0       /* RF4_XXX5X4 */,
0       /* RF4_XXX6X4 */,
0       /* RF4_XXX7X4 */,
0       /* RF4_XXX8X4 */,
18      /* RF5_BA_ACID */, 
9       /* RF5_BA_ELEC */,   /*3/2*/
21      /* RF5_BA_FIRE */,   /*7/2*/
9       /* RF5_BA_COLD */,   /*3/2*/
0       /* RF5_BA_POIS */,           /* 12 */
6       /* RF5_BA_NETH */,   /* 1 */ /* 100 */
15      /* RF5_BA_WATE */,   /*5/2*/
30      /* RF5_BA_MANA */,   /* 5 */ /* 50 */
30      /* RF5_BA_DARK */,   /* 5 */ /* 50 */
0       /* RF5_DRAIN_MANA */,/* 1/2*/
0       /* RF5_MIND_BLAST */, /*32*/
0       /* RF5_BRAIN_SMASH */, /* 90 */
0       /* RF5_CAUSE_1 */,   /* 12 */
0       /* RF5_CAUSE_2 */,   /* 32 */
0       /* RF5_CAUSE_3 */,   /* 75 */
0       /* RF5_CAUSE_4 */,   /* 122 */
2       /* RF5_BO_ACID */,   /* 1/3 */
2       /* RF5_BO_ELEC */,   /* 1/3 */
2       /* RF5_BO_FIRE */,   /* 1/3 */
2       /* RF5_BO_COLD */,   /* 1/3 */
0       /* RF5_BO_POIS */,
4       /* RF5_BO_NETH */,   /* 2/3 */  /*37.5*/
6       /* RF5_BO_WATE */,   /* 1 */
4       /* RF5_BO_MANA */,   /* 2/3 */
6       /* RF5_BO_PLAS */,   /* 1 fixed*/
6       /* RF5_BO_ICEE */,   /* 1 fixed*/
2       /* RF5_MISSILE */,   /* 1/3 fixed*/
0       /* RF5_SCARE */,
0       /* RF5_BLIND */,
0       /* RF5_CONF */,
0       /* RF5_SLOW */,
0       /* RF5_HOLD */,
0       /* RF6_HASTE */,
0       /* RF6_XXX1X6 */,
0       /* RF6_HEAL */,
0       /* RF6_XXX2X6 */,
0       /* RF6_BLINK */,
0       /* RF6_TPORT */,
0       /* RF6_XXX3X6 */,
0       /* RF6_XXX4X6 */,
0       /* RF6_TELE_TO */,
0       /* RF6_TELE_AWAY */,
0       /* RF6_TELE_LEVEL */,
0       /* RF6_XXX5 */,
0       /* RF6_DARKNESS */,
0       /* RF6_TRAPS */,
0       /* RF6_FORGET */,
0       /* RF6_XXX6X6 */,
0       /* RF6_S_KIN */,
0       /* RF6_HI_DEMON */,
0       /* RF6_S_MONSTER */,
0       /* RF6_S_MONSTERS */,
0       /* RF6_S_ANT */,
0       /* RF6_S_SPIDER */,
0       /* RF6_S_HOUND */,
0       /* RF6_S_HYDRA */,
0       /* RF6_S_ANGEL */,
0       /* RF6_S_DEMON */,
0       /* RF6_S_UNDEAD */,
0       /* RF6_S_DRAGON */,
0       /* RF6_S_HI_UNDEAD */,
0       /* RF6_S_HI_DRAGON */,
0       /* RF6_S_WRAITH */,
0       /* RF6_S_UNIQUE */
};

s16b max_attack_flav [] =
{
0       /* RF4_SHRIEK */,
0      /* RF4_SPORE */,
0       /* RF4_GAZE */,
0       /* RF4_WAIL */,
0       /* RF4_SPIT */,
0      /* RF4_SHOOT */,
0      /* RF4_XXX3 */,
0      /* RF4_XXX4 */,
GF_ACID /* RF4_BR_ACID */,   
GF_ELEC /* RF4_BR_ELEC */,   
GF_FIRE /* RF4_BR_FIRE */,   
GF_COLD /* RF4_BR_COLD */,   
GF_POIS /* RF4_BR_POIS */,   
GF_NETHER       /* RF4_BR_NETH */,  
GF_LITE        /* RF4_BR_LITE */,  
GF_DARK /* RF4_BR_DARK */,  
GF_CONFUSION    /* RF4_BR_CONF */, 
GF_SOUND        /* RF4_BR_SOUN */, 
GF_CHAOS        /* RF4_BR_CHAO */,  
GF_DISENCHANT   /* RF4_BR_DISE */, 
GF_NEXUS        /* RF4_BR_NEXU */, 
GF_TIME /* RF4_BR_TIME */,   
GF_GRAVITY      /* RF4_BR_GRAV */,  
GF_SHARD        /* RF4_BR_SHAR */,
GF_PLASMA       /* RF4_BR_PLAS */,
GF_INERTIA      /* RF4_BR_WALL */, 
GF_MANA /* RF4_BR_MANA */,
0       /* RF4_XXX5X4 */,
0       /* RF4_XXX6X4 */,
0       /* RF4_XXX7X4 */,
0       /* RF4_XXX8X4 */,
GF_ACID /* RF5_BA_ACID */,
GF_ELEC /* RF5_BA_ELEC */,
GF_FIRE /* RF5_BA_FIRE */,
GF_COLD /* RF5_BA_COLD */,
GF_POIS /* RF5_BA_POIS */,
GF_NETHER       /* RF5_BA_NETH */, 
GF_WATER        /* RF5_BA_WATE */,  
GF_MANA /* RF5_BA_MANA */, 
GF_DARK /* RF5_BA_DARK */, 
0       /* RF5_DRAIN_MANA */,
0       /* RF5_MIND_BLAST */, 
0       /* RF5_BRAIN_SMASH */,
0       /* RF5_CAUSE_1 */,   
0       /* RF5_CAUSE_2 */,   /* 32 */
0       /* RF5_CAUSE_3 */,   /* 75 */
0       /* RF5_CAUSE_4 */,   /* 122 */
GF_ACID /* RF5_BO_ACID */,   /* 1/3 */
GF_ELEC /* RF5_BO_ELEC */,   /* 1/3 */
GF_FIRE /* RF5_BO_FIRE */,   /* 1/3 */
GF_COLD /* RF5_BO_COLD */,   /* 1/3 */
GF_POIS /* RF5_BO_POIS */,
GF_NETHER       /* RF5_BO_NETH */,   /* 2/3 */  /*37.5*/
GF_WATER        /* RF5_BO_WATE */,   /* 1 */
GF_MANA /* RF5_BO_MANA */,   /* 2/3 */
GF_PLASMA       /* RF5_BO_PLAS */,   /* 1 fixed*/
GF_ICE  /* RF5_BO_ICEE */,   /* 1 fixed*/
GF_MISSILE      /* RF5_MISSILE */,   /* 1/3 fixed*/
0       /* RF5_SCARE */,
0       /* RF5_BLIND */,
GF_OLD_CONF     /* RF5_CONF */,
GF_OLD_SLOW     /* RF5_SLOW */,
0       /* RF5_HOLD */,
0       /* RF6_HASTE */,
0       /* RF6_XXX1X6 */,
0       /* RF6_HEAL */,
0       /* RF6_XXX2X6 */,
0       /* RF6_BLINK */,
0       /* RF6_TPORT */,
0       /* RF6_XXX3X6 */,
0       /* RF6_XXX4X6 */,
0       /* RF6_TELE_TO */,
0       /* RF6_TELE_AWAY */,
0       /* RF6_TELE_LEVEL */,
0       /* RF6_XXX5 */,
0       /* RF6_DARKNESS */,
0       /* RF6_TRAPS */,
0       /* RF6_FORGET */,
0       /* RF6_XXX6X6 */,
0       /* RF6_S_KIN */,
0       /* RF6_HI_DEMON */,
0       /* RF6_S_MONSTER */,
0       /* RF6_S_MONSTERS */,
0       /* RF6_S_ANT */,
0       /* RF6_S_SPIDER */,
0       /* RF6_S_HOUND */,
0       /* RF6_S_HYDRA */,
0       /* RF6_S_ANGEL */,
0       /* RF6_S_DEMON */,
0       /* RF6_S_UNDEAD */,
0       /* RF6_S_DRAGON */,
0       /* RF6_S_HI_UNDEAD */,
0       /* RF6_S_HI_DRAGON */,
0       /* RF6_S_WRAITH */,
0       /* RF6_S_UNIQUE */
};

s16b max_attack_perc [] =
{
0       /* RF4_SHRIEK */,
0      /* RF4_SPORE */,
0       /* RF4_GAZE */,
0       /* RF4_WAIL */,
0       /* RF4_SPIT */,
0      /* RF4_SHOOT */,
0      /* RF4_XXX3 */,
0      /* RF4_XXX4 */,
0       /* RF4_BR_ACID */,   
0       /* RF4_BR_ELEC */,   
0       /* RF4_BR_FIRE */,   
0       /* RF4_BR_COLD */,   
0       /* RF4_BR_POIS */,   
20      /* RF4_BR_NETH */,  
70      /* RF4_BR_LITE */,  
70      /* RF4_BR_DARK */,  
50      /* RF4_BR_CONF */, 
60      /* RF4_BR_SOUN */, 
20      /* RF4_BR_CHAO */,  
5       /* RF4_BR_DISE */, 
0       /* RF4_BR_NEXU */, 
15      /* RF4_BR_TIME */,   
60      /* RF4_BR_GRAV */,  
0       /* RF4_BR_SHAR */,
60      /* RF4_BR_PLAS */,
20      /* RF4_BR_WALL */, 
0       /* RF4_BR_MANA */,
0       /* RF4_XXX5X4 */,
0       /* RF4_XXX6X4 */,
0       /* RF4_XXX7X4 */,
0       /* RF4_XXX8X4 */,
0       /* RF5_BA_ACID */,
0       /* RF5_BA_ELEC */,
0       /* RF5_BA_FIRE */,
0       /* RF5_BA_COLD */,
0       /* RF5_BA_POIS */,
5       /* RF5_BA_NETH */, 
60      /* RF5_BA_WATE */,  
0       /* RF5_BA_MANA */, 
70      /* RF5_BA_DARK */, 
10      /* RF5_DRAIN_MANA */,
80      /* RF5_MIND_BLAST */, 
100     /* RF5_BRAIN_SMASH */,
0       /* RF5_CAUSE_1 */,   
0       /* RF5_CAUSE_2 */,   /* 32 */
0       /* RF5_CAUSE_3 */,   /* 75 */
0       /* RF5_CAUSE_4 */,   /* 122 */
0       /* RF5_BO_ACID */,   /* 1/3 */
0       /* RF5_BO_ELEC */,   /* 1/3 */
0       /* RF5_BO_FIRE */,   /* 1/3 */
0       /* RF5_BO_COLD */,   /* 1/3 */
0       /* RF5_BO_POIS */,
5       /* RF5_BO_NETH */,   /* 2/3 */  /*37.5*/
60      /* RF5_BO_WATE */,   /* 1 */
0       /* RF5_BO_MANA */,   /* 2/3 */
60      /* RF5_BO_PLAS */,   /* 1 fixed*/
0       /* RF5_BO_ICEE */,   /* 1 fixed*/
0       /* RF5_MISSILE */,   /* 1/3 fixed*/
20      /* RF5_SCARE */,
70      /* RF5_BLIND */,
50      /* RF5_CONF */,
40      /* RF5_SLOW */,
100     /* RF5_HOLD */,
0       /* RF6_HASTE */,
0       /* RF6_XXX1X6 */,
0       /* RF6_HEAL */,
0       /* RF6_XXX2X6 */,
0       /* RF6_BLINK */,
0       /* RF6_TPORT */,
0       /* RF6_XXX3X6 */,
0       /* RF6_XXX4X6 */,
0       /* RF6_TELE_TO */,
0       /* RF6_TELE_AWAY */,
0       /* RF6_TELE_LEVEL */,
0       /* RF6_XXX5 */,
0       /* RF6_DARKNESS */,
0       /* RF6_TRAPS */,
0       /* RF6_FORGET */,
0       /* RF6_XXX6X6 */,
0       /* RF6_S_KIN */,
0       /* RF6_HI_DEMON */,
0       /* RF6_S_MONSTER */,
0       /* RF6_S_MONSTERS */,
0       /* RF6_S_ANT */,
0       /* RF6_S_SPIDER */,
0       /* RF6_S_HOUND */,
0       /* RF6_S_HYDRA */,
0       /* RF6_S_ANGEL */,
0       /* RF6_S_DEMON */,
0       /* RF6_S_UNDEAD */,
0       /* RF6_S_DRAGON */,
0       /* RF6_S_HI_UNDEAD */,
0       /* RF6_S_HI_DRAGON */,
0       /* RF6_S_WRAITH */,
0       /* RF6_S_UNIQUE */
};


/*
 * Remove the "bad" spells from a spell list
 * Now considers spells that do less damage than the maximum to be "bad".
 * As a result, this function must be applied last before casting the spell.
 * However, if a monster has their primary attack resisted, and that have another
 * attack they suspect is unresisted, they are much more likely to swap to the
 * second attack.
 * Note that this code makes SMART monsters always use their hardest hitting damage
 * attack.
 * Note that we could weight the function so that player 'incapacitation' is considered
 * alongside player damage.
 *
 * Note this function will always return one spell.
 */
static int pick_attack_spell(int m_idx, u32b f4, u32b f5, u32b f6)
{
	monster_type *m_ptr = &m_list[m_idx];
	monster_race *r_ptr = &r_info[m_ptr->r_idx];

	u32b smart = 0L;

	s16b max,dam;   

	int i, choice,choices;

	u32b bitzero=0x01;


	/* Too stupid to know anything */
        if (r_ptr->flags2 & (RF2_STUPID)) return (-1);


	/* Must be cheating or learning */
        if (!smart_cheat && !smart_learn) return (-1);

	/* Update acquired knowledge */
	if (smart_learn)
	{
		/* Hack -- Occasionally forget player status */
		if (m_ptr->smart && (rand_int(100) < 1)) m_ptr->smart = 0L;

		/* Use the memorized flags */
		smart = m_ptr->smart;
	}


	/* Cheat if requested */
	if (smart_cheat)
	{
		/* Know weirdness */
		if (p_ptr->free_act) smart |= (SM_IMM_FREE);
		if (!p_ptr->msp) smart |= (SM_IMM_MANA);

		/* Know immunities */
		if (p_ptr->immune_acid) smart |= (SM_IMM_ACID);
		if (p_ptr->immune_elec) smart |= (SM_IMM_ELEC);
		if (p_ptr->immune_fire) smart |= (SM_IMM_FIRE);
		if (p_ptr->immune_cold) smart |= (SM_IMM_COLD);

		/* Know oppositions */
		if (p_ptr->oppose_acid) smart |= (SM_OPP_ACID);
		if (p_ptr->oppose_elec) smart |= (SM_OPP_ELEC);
		if (p_ptr->oppose_fire) smart |= (SM_OPP_FIRE);
		if (p_ptr->oppose_cold) smart |= (SM_OPP_COLD);
		if (p_ptr->oppose_pois) smart |= (SM_OPP_POIS);

		/* Know resistances */
		if (p_ptr->resist_acid) smart |= (SM_RES_ACID);
		if (p_ptr->resist_elec) smart |= (SM_RES_ELEC);
		if (p_ptr->resist_fire) smart |= (SM_RES_FIRE);
		if (p_ptr->resist_cold) smart |= (SM_RES_COLD);
		if (p_ptr->resist_pois) smart |= (SM_RES_POIS);
		if (p_ptr->resist_fear) smart |= (SM_RES_FEAR);
		if (p_ptr->hero) smart |= (SM_RES_FEAR);
		if (p_ptr->shero) smart |= (SM_RES_FEAR);
		if (p_ptr->resist_lite) smart |= (SM_RES_LITE);
		if (p_ptr->resist_dark) smart |= (SM_RES_DARK);
		if (p_ptr->resist_blind) smart |= (SM_RES_BLIND);
		if (p_ptr->resist_confu) smart |= (SM_RES_CONFU);
		if (p_ptr->resist_sound) smart |= (SM_RES_SOUND);
		if (p_ptr->resist_shard) smart |= (SM_RES_SHARD);
		if (p_ptr->resist_nexus) smart |= (SM_RES_NEXUS);
		if (p_ptr->resist_nethr) smart |= (SM_RES_NETHR);
		if (p_ptr->resist_chaos) smart |= (SM_RES_CHAOS);
		if (p_ptr->resist_disen) smart |= (SM_RES_DISEN);
	}

	if (smart & (SM_RES_FEAR))
	{
		if (int_outof(r_ptr, 100)) f5 &= ~(RF5_SCARE);
	}

	if (smart & (SM_IMM_FREE))
	{
		if (int_outof(r_ptr, 100)) f5 &= ~(RF5_HOLD);
		if (int_outof(r_ptr, 100)) f5 &= ~(RF5_SLOW);
	}

	if (smart & (SM_IMM_MANA))
	{
		if (int_outof(r_ptr, 100)) f5 &= ~(RF5_DRAIN_MANA);
	}

	if ((smart & (SM_RES_BLIND)) || (p_ptr->blind))
	{
		if (int_outof(r_ptr, 100)) f5 &= ~(RF5_BLIND);
	}


	max = 0;
	choice = -1;
	choices = 1;     

	/* Extract the "innate" spells */
	for (i = 0; i < 96; i++)
	{
		/* Get damage */
		dam = max_attack_dam[i];

		/* XXX XXX Handle cases where spell delivers melee attacks */

		/* Not a damaging spell */
		if ((dam==0) && (max_attack_perc[i]==0)) continue;

		/* Monster doesn't have 'innate' spell */
		if ((i<32) && !(f4 & (bitzero << (i)))) continue;

		/* Monster doesn't have spell */
		if ((i>=32) && (i<64) && !(f5 & (bitzero << (i-32)))) continue;

		/* Monster doesn't have spell */
		if ((i>=64) && (i<32) && !(f6 & (bitzero << (i-64)))) continue;

		/* Less smart monsters will still try a spell */
		if (!int_outof(r_ptr, 100)) continue;           

		/* Modify breath damage by monster level */
		if ((i>=8) && (i<32)) {

			/* Downgrade damage */
			if ((m_ptr->hp/max_attack_level[i]) < dam)
			{
				dam = m_ptr->hp/max_attack_level[i];
			}

			/* Minimum damage */
			if (dam < 1) dam = 1;

		}
		else {
		
			/* Upgrade damage */
			dam = dam + ((r_ptr->level * max_attack_level[i])/6);

			/* Instead of random roll for efficiency reasons */
			dam = dam / 2;

			/* Minimum damage */
			if (dam < 1) dam = 1;

		}

		/* Apply special effects eg stunning, blinding etc. */
		/* XXX Hack - we treat this as a percentage of player current hit points, even though
			the monster should not know this. This will result in disabling attacks against
			high hit point players, and damaging attacks against low hit point players. */
		/* XXX XXX Don't currently handle resistances very well */
		dam = dam + ((max_attack_perc[i] * p_ptr->chp) /100);

		switch (max_attack_flav[i]) {
			/* No defense */
			case 0:
			case GF_MISSILE:
			case GF_ARROW:
			case GF_PLASMA:
			case GF_WATER:
			case GF_FORCE:
			case GF_INERTIA:
			case GF_TIME:
			case GF_GRAVITY:
			case GF_MANA:
			case GF_METEOR:
			break;

			case GF_FIRE:
			if (smart & SM_IMM_FIRE) dam = 0;
			if (smart & SM_RES_FIRE) dam = (dam + 2) / 3;
			if (smart & SM_OPP_FIRE) dam = (dam + 2) / 3;
			break;

			case GF_COLD: case GF_ICE:
			if (smart & SM_IMM_COLD) dam = 0;
			if (smart & SM_RES_COLD) dam = (dam + 2) / 3;
			if (smart & SM_OPP_COLD) dam = (dam + 2) / 3;
			break;

			case GF_ACID:
			if (smart & SM_IMM_ACID) dam = 0;
			if (smart & SM_RES_ACID) dam = (dam + 2) / 3;
			if (smart & SM_OPP_ACID) dam = (dam + 2) / 3;
			break;

			case GF_POIS:
			if (smart & SM_RES_POIS) dam = (dam + 2) / 3;
			if (smart & SM_OPP_POIS) dam = (dam + 2) / 3;
			break;

			case GF_HOLY_ORB:
			dam /=2;
			break;

			case GF_NETHER:
			if (smart & SM_RES_NETHR) dam *=6; dam/=(randint(6)+6);
			break;

			case GF_CHAOS:
			if (smart & SM_RES_CHAOS) dam *=6; dam/=(randint(6)+6);
			break;                                  

			case GF_SHARD:
			if (smart & SM_RES_SHARD) dam *=6; dam/=(randint(6)+6);
			break;                                  

			case GF_SOUND:
			if (smart & SM_RES_SOUND) dam *=5; dam/=(randint(6)+6);
			break;                                  

			case GF_CONFUSION:
			if (smart & SM_RES_CONFU) dam *=5; dam/=(randint(6)+6);
			break;          

			case GF_DISENCHANT:
			if (smart & SM_RES_DISEN) dam *=6; dam/=(randint(6)+6);
			break;  

			case GF_NEXUS:
			if (smart & SM_RES_NEXUS) dam *=6; dam/=(randint(6)+6);
			break;

			case GF_LITE:
			if (smart & SM_RES_LITE) dam *=4; dam/=(randint(6)+6);
			break;

			case GF_DARK:
			if (smart & SM_RES_DARK) dam *=4; dam/=(randint(6)+6);
			break;

			default:
			dam =0;
			break;
		}

		/* Tie breaker */
                if ((max < dam) || ((max == dam) && (rand_int(choices)==0)))
		{

			if (choice >=0)
			{
				/* Monster doesn't try old choice */
				if (choice<32) f4 &= ~(bitzero << (choice));

				/* Monster doesn't try old choice */
				if ((choice>=32) && (choice<64)) f5 &= ~(bitzero << (choice-32));

				/* Monster doesn't try old choice */
				if ((choice>=64) && (choice<32)) f6 &= ~(bitzero << (choice-64));               
			}
			choice = i;

                        if (max == dam) choices++;
			else choices = 1;
		}

		/* Spell is not good enough */
		else
		{
			/* Monster doesn't try spell */
			if (i<32) f4 &= ~(bitzero << (i));

			/* Monster doesn't try spell */
			if ((i>=32) && (i<64)) f5 &= ~(bitzero << (i-32));

			/* Monster doesn't try spell */
			if ((i>=64) && (i<32)) f6 &= ~(bitzero << (i-64));

			/* Try again */
			continue;
		
		}

		max = dam;

	}
	return(choice);
}
#endif